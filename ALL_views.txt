|||Accomodation
^^^/*
date			changedby		description
2021-04-27		daboh			view to work around getting new guid for use in a function, because newid() is not allowed in a function.
*/

CREATE   VIEW [gradtours].[Accomodation]  
AS  
SELECT     HotelId AS AccomodationId, Name, Description, GTManaged, LocationId, AccomodationTypeId, BookingCode, Markup, BookingAlert, ISNULL(Deleted, 0) AS Deleted,   
                      HotelSupplierId, Alternates, OverviewDescription, ClientConfirmation, UseCustomVendor, UseCustomMarkup, CustomVendorId, MinDoubleRate, MaxDoubleRate,   
                      LastUpdatedBy, LastUpdatedByDate, LastModifiedDate, IsDescriptionOnly, GTA_ID, gHotelId, IsGlobal, CopyRight, gHotelId_backup, IsFeatured, IsCustom,   
					  ServiceRateTypeId, CommissionRate, PriceRackRate, rewriteURL, LocaleId, CategoryId, DateCreated, description_orig_value_, ActivityTypeId, IsActive, ChainCode,   
                      BrandCode, Preferred, AddressId, StatusId, CompanyKT, CompanyTE, HotelChainCodeId, HotelBrandCodeId
FROM         gradtours.Hotel  

|||AdWordsView_ClientAdGroup
^^^CREATE VIEW [gradtours].[AdWordsView_ClientAdGroup]
AS
SELECT DISTINCT 
                      gradtours.ClientReferral.Id, gradtours.AdWords_AdGroup.AdgroupID, gradtours.AdWords_AdGroup.AdgroupName, gradtours.AdWords_ClickPerformance.Date, 
                      gradtours.quoteagentaction.ClientId, gradtours.quoteagentaction.QuoteAgentActionTypeId, gradtours.quoteagentaction.Deleted, 
                      gradtours.quoteagentaction.DateCreated, gradtours.quoteagentaction.CurrentItineraryId, gradtours.AdWords_AdGroup.CampaignId, 
                      gradtours.quoteagentaction.QuoteAgentId, gradtours.AdWords_ClickPerformance.CityId, gradtours.AdWords_ClickPerformance.CountryId, 
                      gradtours.AdWords_ClickPerformance.MetroAreaId, gradtours.AdWords_ClickPerformance.RegionId
FROM         gradtours.AdWords_AdGroup INNER JOIN
                      gradtours.AdWords_ClickPerformance ON gradtours.AdWords_AdGroup.AdgroupID = gradtours.AdWords_ClickPerformance.AdGroupID INNER JOIN
                      gradtours.ClientReferral ON gradtours.AdWords_ClickPerformance.GCLID = gradtours.ClientReferral.Id INNER JOIN
                      gradtours.quoteagentaction ON gradtours.ClientReferral.ClientId = gradtours.quoteagentaction.ClientId
WHERE     (gradtours.quoteagentaction.Deleted = 0)

|||AdWordsView_ClientAdId
^^^CREATE VIEW [gradtours].[AdWordsView_ClientAdId]
AS
SELECT DISTINCT 
                      gradtours.ClientReferral.Id, gradtours.AdWords_ClickPerformance.Date, gradtours.quoteagentaction.ClientId, gradtours.quoteagentaction.QuoteAgentActionTypeId, 
                      gradtours.quoteagentaction.DateCreated, gradtours.quoteagentaction.CurrentItineraryId, gradtours.quoteagentaction.QuoteAgentId, 
                      gradtours.AdWords_ClickPerformance.AdId, gradtours.AdWords_ClickPerformance.CityId, gradtours.AdWords_ClickPerformance.CountryId, 
                      gradtours.AdWords_ClickPerformance.MetroAreaId, gradtours.AdWords_ClickPerformance.RegionId, gradtours.AdWords_ClickPerformance.CampaignId
FROM         gradtours.AdWords_ClickPerformance INNER JOIN
                      gradtours.ClientReferral ON gradtours.AdWords_ClickPerformance.GCLID = gradtours.ClientReferral.Id INNER JOIN
                      gradtours.quoteagentaction ON gradtours.ClientReferral.ClientId = gradtours.quoteagentaction.ClientId
WHERE     (gradtours.quoteagentaction.Deleted = 0)

|||bi_EligibleAgentRewards
^^^--set statistics io on
--set statistics time on
CREATE VIEW [gradtours].[bi_EligibleAgentRewards]
AS
SELECT 
	Trip.TripReference,
	QuoteAgent.Name as 'Quote Agent',
	CONCAT(TourAgent.FirstName, ' ', TourAgent.LastName) as 'Tour Agent',
	adjustedprice as 'AdjustedPrice', 
	Trip.TripName,
	InitialPayment.InitialPaymentDate, 
	Trip.BookedDate,
	Trip.TripStartDate
FROM Trip 
	JOIN QuoteAgent
		ON Trip.QuoteAgentId = QuoteAgent.QuoteAgentId
	JOIN
		(
			SELECT SUM(adjustedprice) as adjustedprice, adjustedprice_currencyid, tripId
				FROM trip_travelerrevenuesummary
			WHERE 
				clientpaymenttypeid = 1
			GROUP BY tripid, adjustedprice_currencyid
		) as AdjustedPrice
	ON Trip.TripId = AdjustedPrice.tripId
	JOIN
		(
			SELECT MIN(TravelerPaymentAllocation.PaymentDate) as InitialPaymentDate, Product.TripId as 'TripId' FROM [gradtours].[TravelerPaymentAllocation]
				JOIN [gradtours].[Product]
					ON TravelerPaymentAllocation.ProductId = Product.ProductId
				GROUP BY Product.TripId
		) as InitialPayment
	ON Trip.TripId = InitialPayment.TripId
	JOIN TourAgent
		ON Trip.TourAgentId = TourAgent.TourAgentId
WHERE
	Trip.TourAgentId is not null
	AND Trip.BookedDate >= '2020-05-13'
	AND Trip.BookedDate <= '2020-07-31'
	AND Trip.TripStartDate <= '2021-12-31'
	AND QuoteAgent.OutsideSalesAgent <> 1 -- No Agent Fams => Quote agent is Outside Sales Exec
	AND adjustedprice >= 7500
	AND InitialPaymentDate is not null
	AND Trip.Cancelled <> 1

|||bi_vw_ActivityHistory
^^^--select top 1000 * from [bi_vw_ActivityHistory] where productitemid is null 
CREATE VIEW [gradtours].[bi_vw_ActivityHistory]
AS
SELECT
	ParentCategoryText as 'Change Description',
	ActivityHistoryAction.ActionName as 'Change Type',
	OldValue as 'Old Value',
	NewValue as 'New Value',
	Vendor.vendorName as 'Vendor',
	AllActivities.Name as 'Activity Name',
	AllActivities.Deleted,
	'URL' = 
	CASE 
		WHEN AllActivities.ServiceId = 1 THEN CONCAT('http://tmt.kensingtontours.com/ActivityMgmt/AccomodationManagement.aspx?AccomodationId=', ActivityHistoryBatch.ActivityId)
		WHEN AllActivities.ServiceId = 2 THEN CONCAT('http://tmt.kensingtontours.com/ActivityMgmt/ActivityManagement.aspx?ActivityId=', ActivityHistoryBatch.ActivityId)
		WHEN AllActivities.ServiceId = 3 THEN CONCAT('http://tmt.kensingtontours.com/ActivityMgmt/TransportManagement.aspx?TransportId=', ActivityHistoryBatch.ActivityId)
		WHEN AllActivities.ServiceId = 11 THEN CONCAT('http://tmt.kensingtontours.com/PackageMgmt/PackageManagement.aspx?PackageId=', ActivityHistoryBatch.ActivityId)
	END,
	'Activity Type' =
	CASE 
		WHEN AllActivities.ServiceId = 1 THEN 'Hotel'
		WHEN AllActivities.ServiceId = 2 THEN 'Ground'
		WHEN AllActivities.ServiceId = 3 THEN 'Transport'
		WHEN AllActivities.ServiceId = 11 THEN 'Package'
	END,
	AllActivities.LocaleName as 'Location',
	ActivityHistory.DateCreated as 'Change Date',
	ActivityHistoryBatch.ActivityId,
	KTUser.FirstName + ' ' + KTUser.LastName as 'Changed By'
FROM
	ActivityHistory
	JOIN ActivityHistoryBatch ON ActivityHistory.ActivityHistoryBatchId = ActivityHistoryBatch.ActivityHistoryBatchId
	JOIN ActivityHistoryAction ON ActivityHistory.ActivityHistoryActionId = ActivityHistoryAction.ActivityHistoryActionId
	JOIN Vendor ON ActivityHistoryBatch.VendorId = Vendor.VendorId
	JOIN ActivityType ON ActivityHistoryBatch.ActivityType = ActivityType.ActivityTypeId
	JOIN KTUser ON KTUser.KTUserId = ActivityHistoryBatch.KTUserId
	--JOIN Locale ON Vendor.LocaleId = Locale.LocaleId
	--JOIN Locale ON AllActivities.LocaleId = Locale.LocaleId
	LEFT JOIN 
		(
			SELECT
				ServiceId = 1,
				h.Name,
				h.Deleted,
				h.gHotelId as ActivityId,
				h.LocaleId,
				l.Name as LocaleName
			FROM
				Hotel h inner join Locale l on h.LocaleId = l.LocaleId
			UNION
			SELECT
				ServiceId = 2,
				g.Name,
				g.Deleted,
				g.gGroundId as ActivityId,
				g.LocaleId,
				l.Name as LocaleName
			FROM
				Ground g inner join Locale l on g.LocaleId = l.LocaleId
			UNION
			SELECT
				ServiceId = 3,
				a.Name,
				a.Deleted,
				a.AirId as ActivityId,
				a.SourceLocaleId as LocaleId,
				l.Name as LocaleName
			FROM
				Air a inner join Locale l on a.SourceLocaleId = l.LocaleId
			UNION
			SELECT
				ServiceId = 11,
				i.Name,
				i.Deleted,
				i.ItineraryId as ActivityId,
				i.LocaleId,
				l.Name as LocaleName
			FROM
				Itinerary i inner join Locale l on i.LocaleId = l.LocaleId
			where TemplateTypeId = 9
		) AllActivities
	ON ActivityHistoryBatch.ActivityId = AllActivities.ActivityId AND ActivityType.ServiceId = AllActivities.ServiceId

|||bi_vw_CoaAllocationTree
^^^CREATE VIEW [gradtours].[bi_vw_CoaAllocationTree]
AS
	select company.companyid, company.name as companyName, t.level, coa.CoaAllocationId, coa.Name, parent.CoaAllocationId as parentCoaAllocationId, parent.name as parentName 
	from coaAllocationTree t
	inner join coaAllocation coa on coa.coaAllocationId = t.coaAllocationId
	inner join coaAllocation parent on parent.coaAllocationId = t.parentCOAAllocationId
	inner join company on company.companyId = t.companyId
	where coa.deleted = 0
	and parent.deleted = 0
	and company.companyid in (1,8)

|||bi_vw_DynamicHotelArbitrageFeeTrip
^^^CREATE VIEW [gradtours].[bi_vw_DynamicHotelArbitrageFeeTrip]
AS
SELECT        T.TripId, T.BookedDate, T.TripStartDate, SUM(A.ArbitrageFee) AS Expr1, A.ArbitrageCurrency, SUM(A.ArbitrageFeeUSD) AS Expr2, S.CustomServiceName
FROM            gradtours.ItineraryService AS S INNER JOIN
                         gradtours.ItineraryDay AS D ON S.ItineraryDayId = D.ItineraryDayId INNER JOIN
                         gradtours.ItineraryTrip AS IT ON IT.ItineraryId = D.ItineraryId INNER JOIN
                         gradtours.Trip AS T ON T.TripReference = IT.ItineraryReference INNER JOIN
                         gradtours.ItineraryService2Booking AS B ON S.ItineraryServiceId = B.ItineraryServiceId INNER JOIN
                             (SELECT        AdxHotelFilterId, ItineraryServiceId, ArbitrageFee, ArbitrageCurrency, gradtours.fn_ConvertCurrencyByDate(ArbitrageFee, 1,
                                                             (SELECT        TOP (1) CurrencyId
                                                               FROM            gradtours.Currency
                                                               WHERE        (Symbol = gradtours.ItineraryService2AdxHotelFilter.ArbitrageCurrency)), ArbitrageDate) AS ArbitrageFeeUSD
                               FROM            gradtours.ItineraryService2AdxHotelFilter) AS A ON S.ItineraryServiceId = A.ItineraryServiceId INNER JOIN
                         gradtours.Vendor AS V ON V.vendorId = S.VendorId INNER JOIN
                         gradtours.AdxHotelFilter AS AH ON A.AdxHotelFilterId = AH.AdxHotelFilterId INNER JOIN
                         gradtours.TeHotelProvider AS P ON P.HotelSearchProviderId = AH.ProviderId
WHERE        (S.VendorId IN
                             (SELECT        vendorId
                               FROM            gradtours.Vendor
                               WHERE        (vendorId = 6574) OR
                                                         (ParentId = 6574))) AND (S.Deleted = 0) AND (B.BookingStatusId = 1 OR
                         B.BookingStatusId = 4)
GROUP BY T.TripId, T.BookedDate, T.TripStartDate, S.CustomServiceName, A.ArbitrageCurrency

|||bi_vw_DynamicHotelBookings
^^^CREATE VIEW [gradtours].[bi_vw_DynamicHotelBookings]
AS
SELECT        S.SourceLocaleId, l.Name, region.LocaleId AS regionlocaleid, region.Name AS regionlocale, S.QuotedGroupAllocation, country.LocaleId AS countrylocaleid, country.Name AS countrylocale, D.ItineraryId, 
                         B.DateCreated AS BookedDate, Q.ItineraryStartDate + (D.Day - 1) AS ServiceStartDate, S.CustomServiceName, S.GlobalServiceId, S.ProviderServiceId, 
                         CASE WHEN S.GlobalServiceId = 55523 THEN 1 ELSE 0 END AS IsCustomService, S.UseCustomCost, C.Cost, CB.Cost AS ActualCost, CB.Cost - C.Cost AS CostVarience, C.Cost_CurrencyId,
                             (SELECT        Symbol
                               FROM            gradtours.Currency
                               WHERE        (CurrencyId = C.Cost_CurrencyId)) AS CostCurrency, C.ConvertedCost, CB.ConvertedCost AS ActualConvertedCost, CB.ConvertedCost - C.ConvertedCost AS ConvertedCostVarience, A.ArbitrageFee, 
                         A.ArbitrageCurrency, A.ArbitrageFeeUSD, C.ConvertedCost_CurrencyId,
                             (SELECT        Symbol
                               FROM            gradtours.Currency AS Currency_1
                               WHERE        (CurrencyId = C.ConvertedCost_CurrencyId)) AS ConvertedCostCurrency, V.vendorId, V.vendordisplayname, V.ParentId AS VendorParentId, H.HotelId, 
                         CASE WHEN S.GlobalServiceId = 55523 THEN AH.HotelName ELSE H.Name END AS HotelName, P.ProviderName, Tp.TripId, Q.QuoteAgentId, A.DMCRate AS DMCCost, A.DMCRateCurrencyId AS DMCCostCurrency, 
                         A.DMCRateUSD AS DMCCostUSD, A.DMCRateDiffCurrency, A.DMCRateUSD - CB.ConvertedCost AS SavingsUSD, AH.GuestRoom, S.ItineraryServiceId
FROM            gradtours.ItineraryService AS S WITH (NOLOCK) INNER JOIN 
                         gradtours.ItineraryDay AS D WITH (NOLOCK) ON S.ItineraryDayId = D.ItineraryDayId INNER JOIN
                         gradtours.ItineraryQuote AS Q WITH (NOLOCK) ON Q.ItineraryId = D.ItineraryId INNER JOIN
                         gradtours.ItineraryService2Booking AS B WITH (NOLOCK) ON S.ItineraryServiceId = B.ItineraryServiceId INNER JOIN
                         gradtours.ItineraryService2Cost AS C WITH (NOLOCK) ON S.ItineraryService2CostId_QuotedCost = C.ItineraryService2CostId INNER JOIN
                         gradtours.ItineraryService2Cost AS CB WITH (NOLOCK) ON B.ItineraryService2CostId = CB.ItineraryService2CostId INNER JOIN
                         gradtours.Locale AS l WITH (NOLOCK) ON l.LocaleId = S.SourceLocaleId INNER JOIN
                         gradtours.LocaleTree AS t1 WITH (NOLOCK) ON t1.localeId = l.LocaleId AND t1.ParentLocaleTypeId = 2 INNER JOIN
                         gradtours.Locale AS region WITH (NOLOCK) ON region.LocaleId = t1.ParentLocaleId INNER JOIN
                         gradtours.LocaleTree AS t2 WITH (NOLOCK) ON t2.localeId = l.LocaleId AND t2.ParentLocaleTypeId = 4 INNER JOIN
                         gradtours.Locale AS country WITH (NOLOCK) ON country.LocaleId = t2.ParentLocaleId INNER JOIN
                             (SELECT        AdxHotelFilterId, ItineraryServiceId, ArbitrageFee, ArbitrageCurrency, gradtours.fn_ConvertCurrencyByDate(ArbitrageFee, 1,
                                                             (SELECT        TOP (1) CurrencyId
                                                               FROM            gradtours.Currency AS Currency_2
                                                               WHERE        (Symbol = gradtours.ItineraryService2AdxHotelFilter.ArbitrageCurrency)), ArbitrageDate) AS ArbitrageFeeUSD, DMCRate, DMCRateCurrencyId, DMCRateUSD, DMCRateDiffCurrency
                               FROM            gradtours.ItineraryService2AdxHotelFilter) AS A ON S.ItineraryServiceId = A.ItineraryServiceId INNER JOIN
                         gradtours.Vendor AS V WITH (NOLOCK) ON V.vendorId = S.VendorId INNER JOIN
                         gradtours.HotelRoomCategory AS HC WITH (NOLOCK) ON HC.HotelRoomCategoryId = S.ProviderServiceId INNER JOIN
                         gradtours.Hotel AS H WITH (NOLOCK) ON HC.HotelId = H.HotelId INNER JOIN
                         gradtours.AdxHotelFilter AS AH WITH (NOLOCK) ON A.AdxHotelFilterId = AH.AdxHotelFilterId INNER JOIN
                         gradtours.TeHotelProvider AS P WITH (NOLOCK) ON P.HotelSearchProviderId = AH.ProviderId INNER JOIN
                         gradtours.ItineraryTrip WITH (NOLOCK) ON D.ItineraryId = gradtours.ItineraryTrip.ItineraryId INNER JOIN
                         gradtours.Trip AS Tp WITH (NOLOCK) ON gradtours.ItineraryTrip.ItineraryReference = Tp.TripReference
WHERE        (S.VendorId IN
                             (SELECT        vendorId
                               FROM            gradtours.Vendor
                               WHERE        (vendorId = 6574) OR
                                                         (ParentId = 6574))) AND (S.Deleted = 0) AND (B.BookingStatusId = 1 OR
                         B.BookingStatusId = 4)

|||bi_vw_DynamicHotelCostCompare
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_DynamicHotelCostCompare]
-- select * from costcompare
CREATE VIEW [gradtours].[bi_vw_DynamicHotelCostCompare]
AS
	SELECT distinct
	(Select top 1 L.Name from Locale L Inner Join LocaleTree LT on L.LocaleId = LT.ParentLocaleId where LT.LocaleId = Hotel.LocaleId and LT.ParentLocaleTypeId = 2) as Region,	
	CostCompare.Region as SubRegion,
	CostCompare.Country,
	CostCompare.Locale,
			CostCompare.ItineraryId, 
			CostCompare.BookedDate, 
			CostCompare.ServiceStartDate, 
			CostCompare.ItineraryServiceId, 
			Hotel.HotelId, 
			Hotel.Name as HotelName, 
			Hotel.LocaleId as HotelLocaleId, 
			CostCompare.HotelRoomCategoryId, 
			CostCompare.CustomServiceName, 
			CostCompare.HotelMapped, 
			CostCompare.Markup, 
			CostCompare.TmtCost, 
			CostCompare.TmtCostCurrency, 
			CostCompare.TmtCostUSD, 
			CostCompare.TmtCustomCost, 
			TeHotelProvider.ProviderName, 
			CostCompare.AdxCost as ProviderCost, 
			CostCompare.AdxCost * 1.05 as ProviderCostWithFee, 
			CostCompare.AdxCostCurrency as ProviderCostCurrency, 
			CostCompare.AdxCostUsd as ProviderCostUSD,
			CostCompare.AdxCostUsd * 1.05 as ProviderCostUSDWithFee,
			CostCompare.SabreCost, 
			CostCompare.SabreCostCurrency, 
			CostCompare.SabreCostUSD--, 
			--CostCompare.SabreBARCostUSD, 
			--CostCompare.SabreBARComission as SabreBARCommission, 
			--CostCompare.SabreBarMedianCostUSD as SabreMedianCostUSD, 
			--CostCompare.SabreBarMedianComission as SabreMedianComission 
         
      FROM
             CostCompare
			 INNER JOIN Hotel on Hotel.HotelId = CostCompare.HotelId
			 LEFT JOIN TeHotelProvider on TeHotelProvider.HotelProviderId = CostCompare.ProviderId

|||bi_vw_DynamicHotelCostVarianceTrip
^^^CREATE VIEW [gradtours].[bi_vw_DynamicHotelCostVarianceTrip]
AS
SELECT        T.TripId, P.BookedDate, P.StartDate AS TripStartDate, SUM(PIT.ActualCost) - SUM(PIT.QuotedCost) AS CostVarience, PIT.Currency AS CurrencyId,
                             (SELECT        Symbol
                               FROM            gradtours.Currency
                               WHERE        (CurrencyId = PIT.Currency)) AS Expr1, SUM(PIT.ActualCostUSD) - SUM(PIT.QuotedCostUSD) AS CostVarienceUSD, P.QuoteAgentId, PIT.VendorId, SUM(PIT.QuotedCost) AS QuotedCost, SUM(PIT.ActualCost) 
                         AS ActualCost, SUM(PIT.QuotedCostUSD) AS QuotedCostUSD, SUM(PIT.ActualCostUSD) AS ActualCostUSD
FROM            gradtours.Product AS P INNER JOIN
                         gradtours.Trip AS T ON T.TripId = P.TripId INNER JOIN
                         gradtours.ProductItem AS PIT ON PIT.ProductId = P.ProductId
WHERE        (PIT.VendorId IN
                             (SELECT        vendorId
                               FROM            gradtours.Vendor
                               WHERE        (vendorId = 6574) OR
                                                         (ParentId = 6574))) AND (PIT.IsCancelled = 0) AND (PIT.IsArchived = 0)
GROUP BY T.TripId, P.BookedDate, P.StartDate, PIT.VendorId, PIT.Currency, P.QuoteAgentId

|||bi_vw_DynamicHotelMapping
^^^CREATE VIEW [gradtours].[bi_vw_DynamicHotelMapping]
AS
SELECT        TR.LocaleId, TR.LocaleName, TR.RegionId, TR.RegionName, TR.CountryId, TR.Country, TR.HotelSearchProviderId, TR.ProviderName, TR.TeHotelRoomCategoryId, HT.HotelRoomCategoryId, HT.HotelId, 
                         HT.AdxHotelRoomCategoryId, HT.Description, HT.TmtRoomCategoryName, TR.AdxRoomCategory, CASE WHEN HT.AdxHotelRoomCategoryId IS NULL THEN 0 ELSE 1 END AS Ismapped
FROM            (SELECT        l.LocaleId, l.Name AS LocaleName, region.LocaleId AS RegionId, region.Name AS RegionName, country.LocaleId AS CountryId, country.Name AS Country, ISNULL(Tc.RoomName, '') + ISNULL(' (' + Tc.RateName + ') ', 
                                                    '') + ISNULL(' - ' + Tc.Boarding, '') + ISNULL(' (' + Tc.Bedding + ') ', '') AS AdxRoomCategory, Hp.HotelSearchProviderId, Hp.ProviderName, Tc.TeHotelRoomCategoryId
                          FROM            gradtours.TeHotelPropertyMapping AS Tm INNER JOIN
                                                    gradtours.TeHotelRoomCategory AS Tc ON Tm.HotelPropertyId = Tc.HotelPropertyId INNER JOIN
                                                    gradtours.Hotel AS H ON Tm.HotelId = H.HotelId INNER JOIN
                                                    gradtours.Locale AS l ON H.LocaleId = l.LocaleId INNER JOIN
                                                    gradtours.LocaleTree AS t1 ON t1.localeId = l.LocaleId AND t1.ParentLocaleTypeId = 2 INNER JOIN
                                                    gradtours.Locale AS region ON region.LocaleId = t1.ParentLocaleId INNER JOIN
                                                    gradtours.LocaleTree AS t2 ON t2.localeId = l.LocaleId AND t2.ParentLocaleTypeId = 4 INNER JOIN
                                                    gradtours.Locale AS country ON country.LocaleId = t2.ParentLocaleId INNER JOIN
                                                    gradtours.TeHotelProvider AS Hp ON Tc.ProviderId = Hp.HotelSearchProviderId) AS TR LEFT OUTER JOIN
                             (SELECT        Hc.HotelRoomCategoryId, Hc.HotelId, Ha.AdxHotelRoomCategoryId, Hc.Description, Hc.Name AS TmtRoomCategoryName
                               FROM            gradtours.HotelRoomCategoryTmt2Adx AS Ha INNER JOIN
                                                         gradtours.HotelRoomCategory AS Hc ON Ha.HotelRoomCategoryId = Hc.HotelRoomCategoryId
                               WHERE        (Ha.Deleted = 0)) AS HT ON TR.TeHotelRoomCategoryId = HT.AdxHotelRoomCategoryId

|||bi_vw_GroundBookedService
^^^CREATE VIEW [gradtours].[bi_vw_GroundBookedService]
AS
	SELECT 
             
	ItineraryTrip.ItineraryId, 
	ItineraryTrip.BookedDate, 
	ItineraryTrip.ItineraryReference, 	
	(select TripId from Trip where CompanyId = 1 and Computed_ItineraryId = ItineraryTrip.ItineraryId ) as TripId,
	ItineraryQuote.ItineraryStartDate, 
	ItineraryService.ItineraryServiceId, 
	ItineraryService.SourceLocaleId as LocaleId, 
	ItineraryService.CustomServiceName as ServiceName, 
	ItineraryService.IsCustomService, 
	ItineraryService.UseCustomCost, 
	ItineraryService2Cost.Cost, 
	ItineraryService2Cost.Cost_CurrencyId, 
	(select symbol from Currency where CurrencyId = ItineraryService2Cost.Cost_CurrencyId) as TMTCostCurrency,
	ItineraryService2Cost.ConvertedCost, 
	ItineraryService2Cost.ConvertedCost_CurrencyId,
	(select symbol from Currency where CurrencyId = ItineraryService2Cost.ConvertedCost_CurrencyId) as TMTConvertedCostCurrency,
	ItineraryService.Markup, 
	ItineraryQuote.ItineraryStartDate + (ItineraryDay.Day - 1) AS ServiceStartDate, 
	Vendors.VendorId, 
	Vendors.VendorName, 
	IsNull(Vendors.ParentId, Vendors.VendorId) as VendorParentId, 
	Ground.GroundId, 
	Ground.Name as GroundName,
	Ground2Vehicle.Ground2VehicleId,
	Ground2Vehicle.VehicleName, 
	Ground2Vehicle.VehicleCapacity
      FROM
		ItineraryTrip 
		inner join ItineraryQuote on ItineraryQuote.ItineraryId = ItineraryTrip.ItineraryId
		inner join ItineraryDay on ItineraryDay.ItineraryId = ItineraryQuote.ItineraryId 
		inner join ItineraryService on ItineraryService.ItineraryDayId = ItineraryDay.ItineraryDayId
		inner join ItineraryService2Booking on ItineraryService2Booking.ItineraryServiceId = ItineraryService.ItineraryServiceId
		inner join BookingStatus on BookingStatus.BookingStatusId = ItineraryService2Booking.BookingStatusId
		inner join Vendors on Vendors.VendorId = ItineraryService.VendorId
		inner join ItineraryService2Cost on ItineraryService.ItineraryService2CostId_QuotedCost = gradtours.ItineraryService2Cost.ItineraryService2CostId and gradtours.ItineraryService2Cost.Deleted = 0 
		
		left join Ground2Vehicle ON Ground2Vehicle.Ground2VehicleId = ItineraryService.GlobalServiceId 
		left join Ground on Ground.GroundId = Ground2Vehicle.GroundId
      WHERE 
		ItineraryService.ServiceId = 2
		and BookingStatus.IncludedWhenCalculatingCost = 1
      --and Ground.GroundId = 8506

|||bi_vw_GroundVendorRate
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_GroundVendorRate] 
CREATE VIEW [gradtours].[bi_vw_GroundVendorRate]
AS
	SELECT 
		Ground.GroundId, 
		Ground.Name, 
		Ground.Description, 
		Ground.LocaleId, 
		Ground.IsActive,  
		GroundSeasonDates.SeasonStartDate, 
		GroundSeasonDates.SeasonEndDate, 
		Vendors.VendorId, 
		Vendors.VendorDisplayName,
		IsNull(Vendors.ParentId, Vendors.VendorId) as VendorParentId, 
		Ground2Vehicle.Ground2VehicleId,
		Ground2Vehicle.VehicleName, 
		Ground2Vehicle.VehicleCapacity, 
		RateType.Name AS RateTypeName, 
        Rate.PerPerson as RatePerPerson, 
		Rate.PerVehicle as RatePerVehicle, 
		Rate.Flat as RateFlat, 
		(select top 1 Flat from Rate2RateRange rrr
			inner join RateRange rr on rrr.RateRangeId = rr.RateRangeId
			where rrr.RateId = Rate.RateId and rr.Minimum = 1 
			and (rrr.Deleted is null or rrr.Deleted = 0) and (rr.Deleted is null or rr.Deleted = 0)) as RateRangeSingleFlat,
		GroundSeason.CurrencyId, Currency.Symbol as Currency 
		
      FROM
        Ground
		INNER JOIN Ground2Vehicle on Ground2Vehicle.GroundId = Ground.GroundId
		INNER JOIN GroundRates ON GroundRates.GroundId = Ground.GroundId and GroundRates.Ground2VehicleId = Ground2Vehicle.Ground2VehicleId
		INNER JOIN GroundSeason ON GroundRates.GroundSeasonId = GroundSeason.GroundSeasonId AND GroundRates.GroundId = GroundSeason.GroundId
		INNER JOIN GroundSeasonDates ON GroundSeason.GroundSeasonId = GroundSeasonDates.GroundSeasonId
		INNER JOIN Ground2Vendor ON GroundRates.GroundId = Ground2Vendor.GroundId
		INNER JOIN Vendors on Vendors.VendorId = Ground2Vendor.VendorId
		INNER JOIN Currency ON GroundSeason.CurrencyId = Currency.CurrencyId
		INNER JOIN Rate ON GroundRates.RateId = Rate.RateId
		INNER JOIN RateType ON Rate.RateTypeId = RateType.RateTypeId
      where 
		(GroundSeasonDates.Deleted is null or GroundSeasonDates.Deleted = 0)
		AND (GroundSeason.Deleted is null or GroundSeason.Deleted = 0)
		AND (GroundRates.Deleted is null or GroundRates.Deleted = 0)
		AND (Ground2Vehicle.Deleted is null or Ground2Vehicle.Deleted = 0)
		AND (Ground2Vendor.Deleted is null or Ground2Vendor.Deleted = 0)
		AND (Rate.Deleted is null or Rate.Deleted = 0)
		--and Ground.GroundId = 2
		--and GroundSeasonDates.SeasonEndDate = '2013-02-28 00:00:00.000'

|||bi_vw_HotelBedbankMapping
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_HotelBedbankMapping] where ProviderId is null
CREATE VIEW [gradtours].[bi_vw_HotelBedbankMapping]
AS
	SELECT 
	
             Hotel.HotelId, Hotel.gHotelId, Hotel.Name as HotelName, Hotel.Description as HotelDescription, Hotel.LocaleId as HotelLocaleId, Hotel.IsActive as HotelIsActive, Hotel.Preferred as HotelIsPreferred, 
             HotelRoomCategory.HotelRoomCategoryId, HotelRoomCategory.gHotelRoomId, HotelRoomCategory.Name as HotelRoomCategoryName, HotelRoomCategory.Description as HotelRoomCategoryDescription, 
             TeHotelRoomCategory.TeHotelRoomCategoryId, TeHotelRoomCategory.RoomName as TeHotelRoomName, 
			 TeHotelRoomCategory.ProviderId, TeHotelProvider.ProviderName
      FROM
             Hotel 
             INNER JOIN HotelRoomCategory ON HotelRoomCategory.HotelId = Hotel.HotelId
			 INNER JOIN HotelRoomCategoryTmt2Adx ON HotelRoomCategoryTmt2Adx.HotelRoomCategoryId = HotelRoomCategory.HotelRoomCategoryId
			 INNER JOIN TeHotelRoomCategory on TeHotelRoomCategory.TeHotelRoomCategoryId = HotelRoomCategoryTmt2Adx.AdxHotelRoomCategoryId
			 INNER JOIN TeHotelProvider on TeHotelProvider.HotelSearchProviderId = TeHotelRoomCategory.ProviderId
      where (HotelRoomCategory.Deleted is null or HotelRoomCategory.Deleted = 0)
	  and HotelRoomCategoryTmt2Adx.Deleted = 0
	  and TeHotelRoomCategory.Deleted = 0
      --and Hotel.HotelId = 11274
	  --and HotelRoomCategory.HotelRoomCategoryId = 28675

|||bi_vw_HotelBookedService
^^^/*set statistics io on
set statistics time on
select * from [bi_vw_HotelBookedService]  where itineraryid = 1326480
select * from [bi_vw_HotelBookedService]  where VendorParentId = 6574*/
CREATE VIEW [gradtours].[bi_vw_HotelBookedService]
AS
SELECT        gradtours.ItineraryTrip.ItineraryId, gradtours.ItineraryTrip.BookedDate, gradtours.ItineraryTrip.ItineraryReference,
                             (SELECT        TripId
                               FROM            gradtours.Trip
                               WHERE        (CompanyId = 1) AND (Computed_ItineraryId = gradtours.ItineraryTrip.ItineraryId)) AS TripId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryService.ItineraryServiceId, 
                         gradtours.ItineraryService.SourceLocaleId AS LocaleId, gradtours.ItineraryService.CustomServiceName AS ServiceName, gradtours.ItineraryService.IsCustomService, gradtours.ItineraryService.UseCustomCost, 
                         gradtours.ItineraryService2Cost.Cost, gradtours.ItineraryService2Cost.Cost_CurrencyId,
                             (SELECT        Symbol
                               FROM            gradtours.Currency
                               WHERE        (CurrencyId = gradtours.ItineraryService2Cost.Cost_CurrencyId)) AS TMTCostCurrency, gradtours.ItineraryService2Cost.ConvertedCost, gradtours.ItineraryService2Cost.ConvertedCost_CurrencyId,
                             (SELECT        Symbol
                               FROM            gradtours.Currency AS Currency_1
                               WHERE        (CurrencyId = gradtours.ItineraryService2Cost.ConvertedCost_CurrencyId)) AS TMTConvertedCostCurrency, gradtours.ItineraryService.Markup, 
                         gradtours.ItineraryQuote.ItineraryStartDate + (gradtours.ItineraryDay.Day - 1) AS ServiceStartDate, gradtours.vendors.vendorId, gradtours.vendors.vendorName, ISNULL(gradtours.vendors.ParentId, gradtours.vendors.vendorId) 
                         AS VendorParentId, gradtours.GetNumberOfHotelRooms(1, gradtours.ItineraryQuote.QuotedGroupAllocation, gradtours.ItineraryService.QuotedGroupAllocation, N'SGL') AS NumSingleRooms, 
                         gradtours.GetNumberOfHotelRooms(1, gradtours.ItineraryQuote.QuotedGroupAllocation, gradtours.ItineraryService.QuotedGroupAllocation, N'DBL') AS NumDoubleRooms, gradtours.GetNumberOfHotelRooms(1, 
                         gradtours.ItineraryQuote.QuotedGroupAllocation, gradtours.ItineraryService.QuotedGroupAllocation, N'TWN') AS NumTwinRooms, gradtours.GetNumberOfHotelRooms(1, gradtours.ItineraryQuote.QuotedGroupAllocation, 
                         gradtours.ItineraryService.QuotedGroupAllocation, N'TPL') AS NumTripleRooms, gradtours.GetNumberOfHotelRooms(1, gradtours.ItineraryQuote.QuotedGroupAllocation, gradtours.ItineraryService.QuotedGroupAllocation, 
                         N'QUAD') AS NumQuadRooms, gradtours.Hotel.HotelId, CASE WHEN (gradtours.vendors.vendorId IN
                             (SELECT        vendorid
                               FROM            gradtours. Vendor
                               WHERE        vendorId = 6574 OR
                                                         ParentId = 6574) AND (gradtours.Hotel.Name IS NULL OR
                         gradtours.Hotel.Name = '')) THEN CASE WHEN CHARINDEX('(B)', CustomServiceName) = 0 THEN CustomServiceName ELSE LEFT(CustomServiceName, CHARINDEX('(B)', CustomServiceName) - 1) 
                         END ELSE gradtours.Hotel.Name END AS HotelName, gradtours.HotelRoomCategory.HotelRoomCategoryId, gradtours.HotelRoomCategory.Name AS HotelRoomCategoryName
FROM            gradtours.ItineraryTrip INNER JOIN
                         gradtours.ItineraryQuote ON gradtours.ItineraryQuote.ItineraryId = gradtours.ItineraryTrip.ItineraryId INNER JOIN
                         gradtours.ItineraryDay ON gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId INNER JOIN
                         gradtours.ItineraryService ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                         gradtours.ItineraryService2Booking ON gradtours.ItineraryService2Booking.ItineraryServiceId = gradtours.ItineraryService.ItineraryServiceId INNER JOIN
                         gradtours.bookingStatus ON gradtours.bookingStatus.bookingStatusId = gradtours.ItineraryService2Booking.BookingStatusId INNER JOIN
                         gradtours.vendors ON gradtours.vendors.vendorId = gradtours.ItineraryService.VendorId INNER JOIN
                         gradtours.ItineraryService2Cost ON gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = gradtours.ItineraryService2Cost.ItineraryService2CostId AND gradtours.ItineraryService2Cost.Deleted = 0 LEFT OUTER JOIN
                         gradtours.HotelRoomCategory ON gradtours.HotelRoomCategory.gHotelRoomId = gradtours.ItineraryService.GlobalServiceId AND 
                         gradtours.HotelRoomCategory.HotelRoomCategoryId = CAST(gradtours.ItineraryService.ProviderServiceId AS int) LEFT OUTER JOIN
                         gradtours.Hotel ON gradtours.Hotel.HotelId = gradtours.HotelRoomCategory.HotelId
WHERE        (gradtours.ItineraryService.ServiceId = 1) AND (gradtours.bookingStatus.IncludedWhenCalculatingCost = 1)

|||bi_vw_HotelRoomCategory
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_HotelRoomCategory] where HotelId = 11274
CREATE VIEW [gradtours].[bi_vw_HotelRoomCategory]
AS
	SELECT 
	
             Hotel.HotelId, Hotel.gHotelId, Hotel.Name as HotelName, Hotel.Description as HotelDescription, Hotel.LocaleId as HotelLocaleId, Hotel.IsActive as HotelIsActive, Hotel.Preferred as HotelIsPreferred, 
             HotelRoomCategory.HotelRoomCategoryId, HotelRoomCategory.gHotelRoomId, HotelRoomCategory.Name as HotelRoomCategoryName, HotelRoomCategory.Description as HotelRoomCategoryDescription 
             
      FROM
             Hotel 
             INNER JOIN HotelRoomCategory ON HotelRoomCategory.HotelId = Hotel.HotelId
      where (HotelRoomCategory.Deleted is null or HotelRoomCategory.Deleted = 0)

|||bi_vw_HotelVendorRate
^^^/*set statistics io on
set statistics time on
select * from [bi_vw_HotelVendorRate] where hotelid = 11274 and vendorid = 6789 and ghotelroomid = 27502 order by seasonstartdate desc
same rate all week, or only monday
 and Hotel.HotelId = 11274
***** Script for SelectTopNRows command from SSMS  *****
***** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [gradtours].[bi_vw_HotelVendorRate]
AS
SELECT        gradtours.Hotel.HotelId, gradtours.Hotel.gHotelId, gradtours.Hotel.Name AS HotelName, gradtours.Hotel.Description AS HotelDescription, gradtours.Hotel.LocaleId AS HotelLocaleId, gradtours.Hotel.IsActive AS HotelIsActive, 
                         gradtours.Hotel.Preferred AS HotelIsPreferred, gradtours.vendors.vendorId, ISNULL(gradtours.vendors.ParentId, gradtours.vendors.vendorId) AS VendorParentId, gradtours.vendors.vendorName, 
                         gradtours.HotelRoomCategory.HotelRoomCategoryId, gradtours.HotelRoomCategory.gHotelRoomId, gradtours.HotelRoomCategory.Name AS HotelRoomCategoryName, 
                         gradtours.HotelRoomCategory.Description AS HotelRoomCategoryDescription, gradtours.HotelRoomType.Name AS HotelRoomTypeName, gradtours.HotelSeasonDates.SeasonStartDate, 
                         gradtours.HotelSeasonDates.SeasonEndDate, gradtours.Rate.RateTypeId, gradtours.Rate.Flat, gradtours.Hotel2Vendor.IsDescriptionOnly, gradtours.Hotel2Vendor.IsActive AS HotelVendorIsActive
FROM            gradtours.Hotel INNER JOIN
                         gradtours.HotelRoomCategory ON gradtours.HotelRoomCategory.HotelId = gradtours.Hotel.HotelId INNER JOIN
                         gradtours.HotelRoomCategory2Vendor ON gradtours.HotelRoomCategory2Vendor.HotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId INNER JOIN
                         gradtours.Hotel2Vendor ON gradtours.Hotel2Vendor.VendorId = gradtours.HotelRoomCategory2Vendor.VendorId AND gradtours.Hotel2Vendor.HotelId = gradtours.Hotel.HotelId INNER JOIN
                         gradtours.vendors ON gradtours.vendors.vendorId = gradtours.HotelRoomCategory2Vendor.VendorId INNER JOIN
                         gradtours.HotelSeason ON gradtours.HotelSeason.HotelId = gradtours.Hotel.HotelId AND gradtours.HotelSeason.VendorId = gradtours.HotelRoomCategory2Vendor.VendorId INNER JOIN
                         gradtours.HotelSeasonDates ON gradtours.HotelSeasonDates.HotelSeasonId = gradtours.HotelSeason.HotelSeasonId INNER JOIN
                         gradtours.HotelRates ON gradtours.HotelRates.HotelSeasonId = gradtours.HotelSeason.HotelSeasonId AND gradtours.HotelRates.HotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId INNER JOIN
                         gradtours.Rate ON gradtours.Rate.RateId = gradtours.HotelRates.RateId AND gradtours.Rate.VendorId = gradtours.HotelRoomCategory2Vendor.VendorId INNER JOIN
                         gradtours.RateSetup ON gradtours.RateSetup.RateSetupId = gradtours.Rate.RateSetupId AND 
                         gradtours.RateSetup.HotelRoomCategory2VendorId = gradtours.HotelRoomCategory2Vendor.HotelRoomCategory2VendorId LEFT OUTER JOIN
                         gradtours.RateSetup2DayOfWeek ON gradtours.RateSetup2DayOfWeek.RateSetupId = gradtours.RateSetup.RateSetupId INNER JOIN
                         gradtours.Vendor2AccomodationRoomCategoryRoomType ON 
                         gradtours.Vendor2AccomodationRoomCategoryRoomType.Vendor2AccomodationRoomCategoryRoomTypeId = gradtours.HotelRates.Vendor2AccomodationRoomCategoryRoomTypeId AND 
                         gradtours.Vendor2AccomodationRoomCategoryRoomType.HotelRoomCategory2VendorId = gradtours.HotelRoomCategory2Vendor.HotelRoomCategory2VendorId INNER JOIN
                         gradtours.AccomodationRoomCategory2RoomType ON 
                         gradtours.AccomodationRoomCategory2RoomType.AccomodationRoomCategory2RoomTypeId = gradtours.Vendor2AccomodationRoomCategoryRoomType.AccomodationRoomCategory2RoomTypeId INNER JOIN
                         gradtours.HotelRoomType ON gradtours.HotelRoomType.HotelRoomTypeId = gradtours.AccomodationRoomCategory2RoomType.RoomTypeId
WHERE        (gradtours.HotelRoomCategory.Deleted IS NULL OR
                         gradtours.HotelRoomCategory.Deleted = 0) AND (gradtours.HotelRoomCategory2Vendor.Deleted IS NULL OR
                         gradtours.HotelRoomCategory2Vendor.Deleted = 0) AND (gradtours.HotelSeason.Deleted IS NULL OR
                         gradtours.HotelSeason.Deleted = 0) AND (gradtours.HotelSeasonDates.Deleted IS NULL OR
                         gradtours.HotelSeasonDates.Deleted = 0) AND (gradtours.HotelRates.Deleted IS NULL OR
                         gradtours.HotelRates.Deleted = 0) AND (gradtours.Rate.Deleted IS NULL OR
                         gradtours.Rate.Deleted = 0) AND (gradtours.Vendor2AccomodationRoomCategoryRoomType.Deleted IS NULL OR
                         gradtours.Vendor2AccomodationRoomCategoryRoomType.Deleted = 0) AND (gradtours.AccomodationRoomCategory2RoomType.Deleted IS NULL OR
                         gradtours.AccomodationRoomCategory2RoomType.Deleted = 0) AND (gradtours.Hotel2Vendor.IsDescriptionOnly = 0) AND (gradtours.RateSetup2DayOfWeek.RateSetupId IS NULL) AND 
                         (gradtours.HotelRoomType.HotelRoomTypeId = 3) OR
                         (gradtours.HotelRoomCategory.Deleted IS NULL OR
                         gradtours.HotelRoomCategory.Deleted = 0) AND (gradtours.HotelRoomCategory2Vendor.Deleted IS NULL OR
                         gradtours.HotelRoomCategory2Vendor.Deleted = 0) AND (gradtours.HotelSeason.Deleted IS NULL OR
                         gradtours.HotelSeason.Deleted = 0) AND (gradtours.HotelSeasonDates.Deleted IS NULL OR
                         gradtours.HotelSeasonDates.Deleted = 0) AND (gradtours.HotelRates.Deleted IS NULL OR
                         gradtours.HotelRates.Deleted = 0) AND (gradtours.Rate.Deleted IS NULL OR
                         gradtours.Rate.Deleted = 0) AND (gradtours.Vendor2AccomodationRoomCategoryRoomType.Deleted IS NULL OR
                         gradtours.Vendor2AccomodationRoomCategoryRoomType.Deleted = 0) AND (gradtours.AccomodationRoomCategory2RoomType.Deleted IS NULL OR
                         gradtours.AccomodationRoomCategory2RoomType.Deleted = 0) AND (gradtours.Hotel2Vendor.IsDescriptionOnly = 0) AND (gradtours.RateSetup2DayOfWeek.DayOfWeekId = 2) AND 
                         (gradtours.HotelRoomType.HotelRoomTypeId = 3)

|||bi_vw_LeadAssignmentExpiredLeads
^^^CREATE VIEW [gradtours].[bi_vw_LeadAssignmentExpiredLeads]  
AS 
select  LeadAssignment_QuoteAgentId, ClientRequestId, IsExpired, max(DateCreated) as DateCreated  from Leads_Dashboard 
where LeadAssignment_QuoteAgentId != 439 and IsExpired = 1
group by LeadAssignment_QuoteAgentId, clientrequestid,IsExpired

|||bi_vw_LeadAssignmentTransactionDetail
^^^CREATE VIEW [gradtours].[bi_vw_LeadAssignmentTransactionDetail]  
AS 
Select top 1 with ties 
 ld.LeadAssignmentId,ld.ClientRequestId,ld.QuoteAgentActionId,ld.TemplateItineraryId,ld.LocaleId,ld.COAAllocationId,ld.QuoteAgentActionTypeId
,ld.CompletedDate,ld.AssignedById,ld.AssignedToId,ld.ParentLeadAssignmentId,ld.ClaimedTime,ld.IsProcessed
,ld.DateCreated,ld.LeadAssignment_QuoteAgentId,ld.CurrentItineraryId,ld.ClientId,ld.ClientTypeId,ld.Parent_QuoteAgentId,
 case when Deleted = 0 and ClientTypeId in (1,5) and ((SELECT count(clientid) FROM trip_grouptraveler WHERE clientid = ld.ClientId) +  (Select count(MainContactClientId) from Trip where MainContactClientId = ld.ClientId)) <= 0  
 then 1 else 0 end as DirectLead,
 case when Deleted = 0 and ((SELECT count(clientid) FROM trip_grouptraveler WHERE clientid = ld.ClientId) +  (Select count(MainContactClientId) from Trip where MainContactClientId = ld.ClientId)) > 0  
 then 1 else 0 end as RepeatLead,
 case when Deleted = 0 and ClientTypeId in (3,4) and ((SELECT count(clientid) FROM trip_grouptraveler WHERE clientid = ld.ClientId) +  (Select count(MainContactClientId) from Trip where MainContactClientId = ld.ClientId)) <= 0  
 then 1 else 0 end as AgentLead,
   case when ld.AssignedById = 439 and /*ld.IsExpired = 0 and ld.IsInOpenPool = 0 and*/ isnull(ld.Parent_IsExpired,0) = 0 and isnull(ld.Parent_IsInOpenPool,0) = 0 /*and                            
     ld.ClaimedTime is null*/ and ld.ParentLeadAssignmentId=0 then 1 else 0 end as AssignedThroughQueue,
 case when /*ld.ClaimedTime is null and*/ ((ld.IsExpired = 1 or isnull(ld.Parent_IsExpired,1) = 1) or (ld.IsInOpenPool = 1 or isnull(ld.Parent_IsInOpenPool,1) = 1)) and 
     ld.Parent_QuoteAgentId = 439  then 1 else 0 end as TakenFromPool, 
     case when  ld.ParentLeadAssignmentId is not null and ld.IsInOpenPool = 0 and (isnull(ld.Parent_QuoteAgentId,0) != 439 and ld.AssignedById != 439) and 
     (select top 1 qa.QuoteAgentId from quoteagent qa inner join Employee e on qa.EmployeeId = e.EmployeeId
        inner join ktuser ku on e.KTUserId = ku.KTUserId
        inner join KTUser2KTUserGroup k2kg on k2kg.KTUserId = ku.KTUserId
        where qa.QuoteAgentId =ld.AssignedById and k2kg.KTUserGroupId in (78,96) ) is not null then 1 else 0 end as AssignedByDirector,
       
       case when ld.IsInOpenPool = 0 and (isnull(ld.Parent_QuoteAgentId,0) != 439 and ld.AssignedById != 439) and (ld.Parent_QuoteAgentId!=ld.AssignedToId or ld.AssignedById != ld.AssignedToId) and
     (select top 1 qa.QuoteAgentId from quoteagent qa inner join Employee e on qa.EmployeeId = e.EmployeeId
        inner join ktuser ku on e.KTUserId = ku.KTUserId
        inner join KTUser2KTUserGroup k2kg on k2kg.KTUserId = ku.KTUserId
        where qa.QuoteAgentId =ld.AssignedById and k2kg.KTUserGroupId in (78,96) ) is null then 1 else 0 end as AssignedByOther,
       
       case when ld.IsInOpenPool = 0 and isnull(ld.Parent_QuoteAgentId,0) != 439 and (ld.Parent_QuoteAgentId =ld.AssignedToId or ld.AssignedById = ld.AssignedToId) and ld.AssignedToId != 439
       then 1 else 0 end as LeadsCreatedbySelf,
      
	  (case when ld.ClaimedTime is null and ld.IsProcessed=1 and ld.IsExpired=0 then 1 else 0 end) as LeadDeleted
from leads_dashboard ld 
order by row_number() over (partition by clientrequestid order by DateCreated desc)

|||bi_vw_LocaleTree
^^^CREATE VIEW [gradtours].[bi_vw_LocaleTree]
AS
	select locale.localeid, locale.Name, localeType.localeTypeId, localeType.localeTypeName, 
		parent.localeid as parentLocaleId, parent.Name as parentName, parentType.localeTypeId as parentLocaleTypeId, parentType.localeTypeName as parentLocaleTypeName
	from LocaleTree t
	inner join locale on locale.localeid = t.localeid and locale.localetypeid = t.localetypeid
	inner join locale parent on parent.localeid = t.parentlocaleid and parent.localetypeid = t.parentlocaletypeid
	inner join localeType on localeType.localeTypeId = locale.localetypeid
	inner join localeType parentType on parentType.localeTypeId = parent.localetypeid
	where locale.deleted = 0
	and parent.deleted = 0

|||bi_vw_QuoteAgent
^^^CREATE VIEW [gradtours].[bi_vw_QuoteAgent]
AS
SELECT 
a.QuoteAgentId, a.Name, a.Email, a.AirAgent, A.OutsideSalesAgent, a.IsManager, e.EmployeeId, e.StartDate, coa.CoaAllocationId, coa.Name as AllocationName
FROM QuoteAgent a
INNER JOIN Employee e on e.EmployeeId = a.EmployeeId
LEFT JOIN CoaAllocation coa on coa.CoaAllocationId = a.DefaultCoaAllocationId
WHERE (a.Deleted is null OR a.Deleted = 0)
--AND (a.Inactive is null or a.Inactive = 0) 
AND (e.Deleted is null OR e.Deleted = 0) 

|||bi_vw_RateFreshness
^^^CREATE view [gradtours].[bi_vw_RateFreshness]  as
(select distinct g2v.vendorId
, v.vendordisplayname, l.name as Region, coa.Name as Locale, c.name as Currency, 'Ground' as Servicetype, g2v.groundid as ActivityId, g.name as ServiceName,
max(ah.DateCreated) as LastRateEditDate, g.DateCreated as VendorCreatedDate, g.LastModified as VendorLastModifiedDate,
DATEDIFF(day, COALESCE(max(ah.DateCreated), g.DateCreated, g.LastModified), getdate()) as Age, cog.cost
from ground2vendor g2v inner join ground g on g2v.groundid=g.groundid
inner join vendor v on g2v.vendorid = v.vendorid
left join locale l on v.localeId=l.localeId
left join coaallocation coa on v.coaallocationId=coa.coaallocationId
left join currency c on v.defaultCurrencyId =c.currencyId
left join ActivityHistoryBatch ahb on ahb.vendorId=g2v.vendorId and ahb.ActivityId = g2v.groundid and ahb.ActivityType=2
left join ActivityHistory ah on ah.ActivityHistoryBatchId=ahb.ActivityHistoryBatchId and ah.ActualActivityServiceType in (2,3) and ah.OldValue <> ah.NewValue
left join (select sum(is2c.cost) as cost, g.groundId, iss.vendorId as COGs, iss.vendorId from Ground2Vehicle g2v inner join ground g on g2v.groundid=g.groundid inner join itineraryservice iss on iss.globalserviceid=g2v.Ground2VehicleId
inner join itineraryday idd on iss.itinerarydayid=idd.itinerarydayid
inner join itineraryservice2cost is2c on is2c.itineraryserviceid=iss.itineraryserviceid
inner join trip t on idd.itineraryid = t.computed_itineraryid
where isnull(g2v.deleted,0)=0 and isnull(g.deleted,0) =0 and isnull(iss.deleted,0)=0 and isnull(idd.deleted,0)=0 and isnull(is2c.deleted,0)=0 and
t.cancelled =0 and t.TripStartDate > '2018-08-31'
group by g.groundId, iss.vendorId) cog on cog.groundid=g.groundId and cog.vendorId=g2v.vendorId
where g.isactive = 1 and isnull(g.deleted, 0)=0
and v.vendorid not in (571,752)
group by g2v.vendorId, v.vendordisplayname, l.name, coa.name, c.name, g2v.groundid, g.name, g.datecreated, g.lastmodified, cog.cost)
union all
(select distinct h2v.vendorId, v.vendordisplayname,  l.name as Region, coa.Name as Locale, c.name as Currency, 'Hotel' as Servicetype, h2v.hotelid as ActivityId, h.name as ServiceName,
max(ah.DateCreated) as LastRateEditDate, h.DateCreated as VendorCreatedDate, h.LastModifieddate as VendorLastModifiedDate,
DATEDIFF(day, COALESCE(max(ah.DateCreated), h.DateCreated, h.LastModifieddate), getdate()) as Age, cog.cost
from hotel2vendor h2v inner join hotel h on h2v.hotelid=h.hotelid
inner join vendor v on h2v.vendorid = v.vendorid
left join locale l on v.localeId=l.localeId
left join coaallocation coa on v.coaallocationId=coa.coaallocationId
left join currency c on v.defaultCurrencyId =c.currencyId
left join ActivityHistoryBatch ahb on ahb.vendorId=h2v.vendorId and ahb.ActivityId = h2v.hotelid and ahb.ActivityType=1
left join ActivityHistory ah on ah.ActivityHistoryBatchId=ahb.ActivityHistoryBatchId  and ah.ActualActivityServiceType in (2,3) and ah.OldValue <> ah.NewValue
left join (select sum(is2c.cost) as cost, h.hotelId, iss.vendorId as COGs, iss.vendorId from hotelroomcategory hrc inner join hotel h on hrc.hotelid=h.hotelid 
inner join itineraryservice iss on iss.globalserviceid=hrc.hotelroomcategoryid
inner join itineraryday idd on iss.itinerarydayid=idd.itinerarydayid
inner join itineraryservice2cost is2c on is2c.itineraryserviceid=iss.itineraryserviceid
inner join trip t on idd.itineraryid = t.computed_itineraryid
where isnull(hrc.deleted,0)=0 and isnull(h.deleted,0) =0 and isnull(iss.deleted,0)=0 and isnull(idd.deleted,0)=0 and isnull(is2c.deleted,0)=0 and
t.cancelled =0 and t.TripStartDate > '2018-08-31'
group by h.hotelId, iss.vendorId) cog on cog.hotelid=h.hotelId and cog.vendorId=h2v.vendorId
where h.isactive = 1 and isnull(h.deleted,0)=0
and v.vendorid not in (571,752)
group by h2v.vendorid,v.vendordisplayname, l.name, coa.name, c.name, h2v.hotelid, h.name, h.datecreated, h.lastmodifieddate,cog.cost)
union all
(select distinct a2v.vendorId, v.vendordisplayname, l.name as Region, coa.Name as Locale, c.name as Currency, 'Transportation' as Servicetype, a2v.airid as ActivityId, a.name as ServiceName,
max(ah.DateCreated) as LastRateEditDate, a.DateCreated as VendorCreatedDate, a.LastModified as VendorLastModifiedDate,
DATEDIFF(day, COALESCE(max(ah.DateCreated), a.DateCreated, a.LastModified), getdate()) as Age, cog.cost
from air2vendor a2v inner join air a on a2v.airid=a.airid
inner join vendor v on a2v.vendorid = v.vendorid
left join locale l on v.localeId=l.localeId
left join coaallocation coa on v.coaallocationId=coa.coaallocationId
left join currency c on v.defaultCurrencyId =c.currencyId
left join ActivityHistoryBatch ahb on ahb.vendorId=a2v.vendorId and ahb.ActivityId = a2v.airid and ahb.ActivityType=3
left join ActivityHistory ah on ah.ActivityHistoryBatchId=ahb.ActivityHistoryBatchId  and ah.ActualActivityServiceType in (2,3) and ah.OldValue <> ah.NewValue
left join (select sum(is2c.cost) as cost, a.airId, iss.vendorId as COGs, iss.vendorId from transportcategory tc inner join air a on tc.airid=a.airid 
inner join itineraryservice iss on iss.globalserviceid=tc.transportcategoryid
inner join itineraryday idd on iss.itinerarydayid=idd.itinerarydayid
inner join itineraryservice2cost is2c on is2c.itineraryserviceid=iss.itineraryserviceid
inner join trip t on idd.itineraryid = t.computed_itineraryid
where isnull(tc.deleted,0)=0 and isnull(a.deleted,0) =0 and isnull(iss.deleted,0)=0 and isnull(idd.deleted,0)=0 and isnull(is2c.deleted,0)=0 and
t.cancelled =0 and t.TripStartDate > '2018-08-31'
group by a.airId, iss.vendorId) cog on cog.airid=a.airId and cog.vendorId=a2v.vendorId
where a.isactive = 1 and isnull(a.deleted,0)=0
and v.vendorid not in (571,752)
group by a2v.vendorid,v.vendordisplayname, l.name, coa.name, c.name, a2v.airid, a.name, a.datecreated, a.lastmodified,cog.cost)
---35625

|||bi_vw_RevenueAllocation
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_RevenueAllocation] where 
CREATE VIEW [gradtours].[bi_vw_RevenueAllocation]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name as ProductItemName,
		i.ServiceId,
		v.VendorId,
		v.ParentId as ParentVendorId,
		v.VendorName as VendorName,
		v.VendorTypeId,
		t.salescoaallocationid as TripCoaAllocationId,
		r.coaallocationid as RevCoaAllocationId,
		i.coaallocationid as ProductItemCoaAllocationId,
		v.coaallocationid as VendorCoaAllocationId,
		r.CurrencyId,
		SUM(r.Amount) as Amount,
		SUM(r.AmountUSD) as AmountUSD,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel,
		CASE 
			WHEN 
				r.ProductItemId is not null and p.ProductTypeId = 1
			THEN
				--get locale from itinerary service, ug
				(select isnull(s.sourcelocaleid,v.localeid) from itineraryservice s
					inner join vendors v on v.vendorid = s.vendorid
					where s.itineraryserviceid = substring(i.systemofrecordid, 7, len(i.systemofrecordid)))
			
			WHEN 
				r.ProductItemId is not null and p.ProductTypeId <> 1
			THEN 
				v.LocaleId
			ELSE
				--get locale associated with allocation for revenue
				(select top 1 localeid from coaallocation2locale where coaallocationid = r.coaallocationid order by localeid desc)
		END as LocaleId
	FROM
		TripLedger tl
		inner join ItineraryServiceRevenueAllocation r on r.TripLedgerId = tl.TripLedgerId
		inner join Product p on p.ProductId = tl.ProductId
		inner join Trip t on t.TripId = p.TripId
		left join ProductItem i on i.ProductItemId = r.ProductItemId
		left join Vendors v on v.VendorId = i.VendorId
	WHERE t.CompanyId in (1,8)
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.SystemOfRecordId,
		i.Name,
		i.ServiceId,
		v.VendorId,
		v.ParentId,
		v.VendorName,
		v.VendorTypeId,
		v.LocaleId,
		t.salescoaallocationid,
		i.coaallocationid, 
		v.coaallocationid, 
		r.coaallocationid,
		r.CurrencyId,
		r.productItemId

|||bi_vw_SalesActivity
^^^--set statistics io on
--set statistics time on
--select top 1000 * from [bi_vw_SalesActivity] where productitemid is null 
CREATE VIEW [gradtours].[bi_vw_SalesActivity]
AS
SELECT
qaa.QuoteAgentActionId,
qaa.ParentQuoteAgentActionId,
qaa.QuoteAgentId,
qaa.QuoteAgentActionTypeId,
qaat.Name AS QuoteAgentActionTypeName,
CASE WHEN qaa.QuoteAgentActionTypeId = 2
	THEN 1 ELSE 0
END as KPI_FirstQuote,
CASE WHEN qaa.QuoteAgentActionTypeId in (37,50,51)
	THEN 1 ELSE 0
END as KPI_FollowUpPhone,
CASE WHEN qaa.QuoteAgentActionTypeId = 36
	THEN 1 ELSE 0
END as KPI_FollowUpEmail,
CASE WHEN qaa.QuoteAgentActionTypeId in (38,39,16)
	THEN 1 ELSE 0
END as KPI_EmailPhoneRequote,
CASE WHEN qaa.QuoteAgentActionTypeId in (36,37,50,51,38,39,16)
	THEN 1 ELSE 0
END as KPI_PreSaleActivity,
CASE WHEN qaa.QuoteAgentActionTypeId in (40,33,8,9,42,34,25,43,47)  
	THEN 1 ELSE 0
END as KPI_PostSaleActivity,
qaa.DateCreated,
qaa.FollowUpDate,
qaa.CompletedDate,
qaa.CurrentItineraryId,
c.ClientId,
c.ClientTypeId,
q.SalesCoaallocationId,
CASE 
	WHEN 
		(q.ItineraryId is not null and (select touragentid from itineraryquote where itineraryid = q.itineraryid) is not null)
		OR
		c.ClientTypeId in (3,4)
	THEN
		'AGENT'
ELSE
	CASE 
		WHEN
			(select COUNT(*)
				from
					Trip t2 
				where
					t2.MainContactClientId = c.ClientId
					and t2.BookedDate < qaa.DateCreated) = 0
		THEN 
			'DIRECT'
		ELSE
			'REPEAT'
		END
END as Channel
FROM QuoteAgentAction qaa
INNER JOIN QuoteAgentActionType qaat ON qaat.QuoteAgentActionTypeId = qaa.QuoteAgentActionTypeId
INNER JOIN Client c ON c.ClientId = qaa.ClientId
LEFT JOIN Itinerary q ON q.itineraryid = qaa.CurrentItineraryId
WHERE (qaa.Deleted is null OR qaa.Deleted = 0)

|||bi_vw_SalesFirstQuote
^^^--set statistics io on
--set statistics time on
CREATE VIEW [gradtours].[bi_vw_SalesFirstQuote]
AS
SELECT
qaa.QuoteAgentActionId,
qaa.QuoteAgentId,
qaa.QuoteAgentActionTypeId,
qaat.Name AS QuoteAgentActionTypeName,
qaa.DateCreated,
qaa.FollowUpDate,
qaa.CompletedDate,
qaa.CurrentItineraryId,
c.ClientId,
c.ClientTypeId,
q.SalesCoaallocationId,
CASE 
WHEN 
c.ClientTypeId in (3,4)
THEN
'AGENT'
ELSE
CASE 
WHEN
(select COUNT(*) from Trip 
where MainContactClientId = c.ClientId) = 0
THEN 
'DIRECT'
WHEN
(select COUNT(*) from Trip 
where MainContactClientId = c.ClientId) > 0
THEN 'REPEAT'
END
END as Channel
FROM QuoteAgentAction qaa
INNER JOIN QuoteAgentActionType qaat ON qaat.QuoteAgentActionTypeId = qaa.QuoteAgentActionTypeId
INNER JOIN Client c ON c.ClientId = qaa.ClientId
LEFT JOIN Itinerary q ON q.itineraryid = qaa.CurrentItineraryId
WHERE qaa.QuoteAgentActionTypeId = 2
AND (qaa.Deleted is null OR qaa.Deleted = 0)

|||bi_vw_SalesFirstQuoteWithRevenueCost
^^^CREATE VIEW [gradtours].[bi_vw_SalesFirstQuoteWithRevenueCost]  
AS 
SELECT qaa.QuoteAgentActionId,qaa.QuoteAgentId,qaa.QuoteAgentActionTypeId,qaat.Name AS QuoteAgentActionTypeName,qaa.DateCreated,qaa.FollowUpDate,qaa.CompletedDate,    
 qaa.CurrentItineraryId,c.ClientId,c.ClientTypeId,i.SalesCoaallocationId,  
 CASE WHEN c.ClientTypeId in (3,4) THEN  'AGENT'  ELSE    
 CASE WHEN  (select COUNT(*) from Trip  where MainContactClientId = c.ClientId) = 0  THEN   'DIRECT'  WHEN  (select COUNT(*) from Trip   where MainContactClientId = c.ClientId) > 0  THEN 'REPEAT'  END  END as Channel    
 ,iq.quotedprice as QuotedRevenue,case when s2camount.Cost is null then iq.quotedprice * (1-iq.QuotedMargin) else (iq.quotedprice - s2camount.Cost)* (1-iq.QuotedMargin) end as QuotedCost  
 ,iq.CommissionableAmount as QuotedCoAm, iq.QuotedMargin  
FROM QuoteAgentAction qaa    
INNER JOIN QuoteAgentActionType qaat ON qaa.QuoteAgentActionTypeId is not null and qaat.QuoteAgentActionTypeId = qaa.QuoteAgentActionTypeId 
INNER JOIN Client c ON c.ClientId = qaa.ClientId    
LEFT JOIN Itinerary i ON qaa.CurrentItineraryId  is not null and i.itineraryid = qaa.CurrentItineraryId    
LEFT JOIN ItineraryQuote iq ON i.itineraryid = iq.ItineraryId    
OUTER APPLY (select top 1 i2c.cost from ItineraryService iss inner join ItineraryDay idd on iss.ItineraryDayId = idd.ItineraryDayId   
 inner join ItineraryService2cost i2c on iss.ItineraryService2CostId_QuotedCost is not null and iss.ItineraryService2CostId_QuotedCost = i2c.ItineraryService2costId  
 where itineraryid=i.ItineraryId and serviceid=9 and iss.GlobalServiceId =2 ) s2camount  
WHERE qaa.QuoteAgentActionTypeId = 2 AND (qaa.Deleted is null OR qaa.Deleted = 0)  and iq.Deleted =0  

|||bi_vw_SalesOperations
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_SalesOperations] 
CREATE VIEW [gradtours].[bi_vw_SalesOperations]
AS
	SELECT 
		t.SalesCoaAllocationId,
		t.QuoteAgentId,
		t.TripId,
		t.TripReference,
		t.Cancelled,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		
		(select isnull(sum(PaymentAmount),0) from ClientRefund r2
			inner join ProductItem i2 on r2.ProductItemId = i2.ProductItemId
			where i2.IsCancelled = 0 
			and r2.TripId = t.TripId) as ClientRefundPayment,
		(select isnull(sum(FTCAmount),0) from ClientRefund r2
			inner join ProductItem i2 on r2.ProductItemId = i2.ProductItemId
			where i2.IsCancelled = 0 
			and r2.TripId = t.TripId) as ClientRefundFTC,
		(select count(*) from TripFeedback where TripId = t.TripId and RecommendKT >= 0 and RecommendKT <= 6) as NumNPSDetractors,
		(select count(*) from TripFeedback where TripId = t.TripId and RecommendKT >= 9) as NumNPSPromoters,
		(select count(*) from TripFeedback where TripId = t.TripId and RecommendKT >= 0) as NumNPSScores
	FROM Trip t
		
		--inner join TripFeedback f on f.TripId = t.TripId
	group by 
		t.SalesCoaAllocationId,
		t.QuoteAgentId,
		t.TripId,
		t.Cancelled,
		t.TripReference,
		t.BookedDate,
		t.TripStartDate
		/*
		f.RecommendKT, 
		f.QualityTour,
		f.QualityAccommodation,
		f.QualityDMC,
		f.RecommendSales
		*/

|||bi_vw_TransportBookedService
^^^--set statistics io on
--set statistics time on
-- select * from bi_vw_TransportBookedService where itineraryid = 1304955
-- select * from bi_vw_TransportBookedService where tripid = 431728
-- select * from bi_vw_TransportBookedService where transportid = 7162
CREATE VIEW [gradtours].[bi_vw_TransportBookedService]
AS
	SELECT 
             
	ItineraryTrip.ItineraryId, 
	ItineraryTrip.BookedDate, 
	ItineraryTrip.ItineraryReference, 
	(select TripId from Trip where CompanyId = 1 and Computed_ItineraryId = ItineraryTrip.ItineraryId) as TripId,
	ItineraryQuote.ItineraryStartDate, 
	ItineraryService.ItineraryServiceId, 
	ItineraryService.SourceLocaleId as LocaleId, 
	ItineraryService.CustomServiceName as ServiceName, 
	ItineraryService.IsCustomService, 
	ItineraryService.UseCustomCost, 
	ItineraryService2Cost.Cost, 
	ItineraryService2Cost.Cost_CurrencyId, 
	(select symbol from Currency where CurrencyId = ItineraryService2Cost.Cost_CurrencyId) as TMTCostCurrency,
	ItineraryService2Cost.ConvertedCost, 
	ItineraryService2Cost.ConvertedCost_CurrencyId,
	(select symbol from Currency where CurrencyId = ItineraryService2Cost.ConvertedCost_CurrencyId) as TMTConvertedCostCurrency,
	ItineraryService.Markup, 
	ItineraryQuote.ItineraryStartDate + (ItineraryDay.Day - 1) AS ServiceStartDate, 
	Vendors.VendorId, 
	Vendors.VendorName, 
	IsNull(Vendors.ParentId, Vendors.VendorId) as VendorParentId, 
	Air.AirId as TransportId, 
	Air.Name as TransportName,
	TransportCategory.TransportCategoryId,
	TransportCategory.Name as TransportCategoryName,
	TransportCategory.TransportCapacity
      FROM
		ItineraryTrip 
		inner join ItineraryQuote on ItineraryQuote.ItineraryId = ItineraryTrip.ItineraryId
		inner join ItineraryDay on ItineraryDay.ItineraryId = ItineraryQuote.ItineraryId 
		inner join ItineraryService on ItineraryService.ItineraryDayId = ItineraryDay.ItineraryDayId
		inner join ItineraryService2Booking on ItineraryService2Booking.ItineraryServiceId = ItineraryService.ItineraryServiceId
		inner join BookingStatus on BookingStatus.BookingStatusId = ItineraryService2Booking.BookingStatusId
		inner join Vendors on Vendors.VendorId = ItineraryService.VendorId
		inner join ItineraryService2Cost on ItineraryService.ItineraryService2CostId_QuotedCost = gradtours.ItineraryService2Cost.ItineraryService2CostId and gradtours.ItineraryService2Cost.Deleted = 0 
		
		left join TransportCategory ON TransportCategory.TransportCategoryId = ItineraryService.GlobalServiceId 
		left join Air on Air.AirId = TransportCategory.AirId
      WHERE 
		ItineraryService.ServiceId = 3
		and BookingStatus.IncludedWhenCalculatingCost = 1

|||bi_vw_TransportVendorRate
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_TransportVendorRate] 
CREATE VIEW [gradtours].[bi_vw_TransportVendorRate]
AS
	SELECT 
            Air.AirId as TransportId, 
			Air.Name as TransportName, 
			Air.Description, 
			Air.SourceLocaleId, 
			Air.DestinationLocaleId, 
			Air.IsActive,
			Vendors.VendorId, 
			IsNull(Vendors.ParentId, Vendors.VendorId) as VendorParentId, 
			Vendors.VendorDisplayName, 
			AirSeasonDates.SeasonStartDate, 
			AirSeasonDates.SeasonEndDate, 
			TransportCategory.TransportCategoryId,
			TransportCategory.Name as TransportCategoryName, 
			TransportCategory.TransportCapacity, 
			RateType.Name as RateTypeName,
			Rate.PerPerson as RatePerPerson, 
			Rate.PerVehicle as RatePerVehicle, 
			Rate.Flat as RateFlat, 
			(select top 1 Flat from Rate2RateRange rrr
				inner join RateRange rr on rrr.RateRangeId = rr.RateRangeId
				where rrr.RateId = Rate.RateId and rr.Minimum = 1 
				and (rrr.Deleted is null or rrr.Deleted = 0) and (rr.Deleted is null or rr.Deleted = 0)) as RateRangeSingleFlat,
			AirSeason.CurrencyId, Currency.Symbol as Currency 
      FROM 
              
        Air
		INNER JOIN Air2Vendor ON Air2Vendor.AirId = Air.AirId
		INNER JOIN TransportCategory on TransportCategory.AirId = Air.AirId
		INNER JOIN AirSeason ON AirSeason.AirId = Air.AirId AND AirSeason.VendorId = Air2Vendor.VendorId 
		INNER JOIN AirSeasonDates ON AirSeasonDates.AirSeasonId = AirSeason.AirSeasonId
		INNER JOIN AirRates ON AirRates.AirId = Air.AirId and AirRates.AirSeasonId = AirSeason.AirSeasonId and AirRates.TransportCategoryId = TransportCategory.TransportCategoryId
		INNER JOIN Rate ON Rate.RateId = AirRates.RateId and Rate.VendorId = Air2Vendor.VendorId 
		INNER JOIN RateType ON Rate.RateTypeId = RateType.RateTypeId
		
		INNER JOIN Vendors on Vendors.VendorId = Air2Vendor.VendorId
		INNER JOIN Currency ON AirSeason.CurrencyId = Currency.CurrencyId
      where 
		(AirSeasonDates.Deleted is null or AirSeasonDates.Deleted = 0)
		AND (AirSeason.Deleted is null or AirSeason.Deleted = 0)
		AND (AirRates.Deleted is null or AirRates.Deleted = 0)
		AND (TransportCategory.Deleted is null or TransportCategory.Deleted = 0)
		AND (Air2Vendor.Deleted is null or Air2Vendor.Deleted = 0)
		AND (Rate.Deleted is null or Rate.Deleted = 0)
		--and Air.AirId = 12345
		--and AirSeasonDates.SeasonEndDate = '2013-02-28 00:00:00.000'

|||bi_vw_TravelAgent
^^^CREATE VIEW [gradtours].[bi_vw_TravelAgent]
AS
SELECT   
ta.TourAgentId,  
ta.createddate,
TourAgentName = rtrim(ta.FirstName) + ' ' + rtrim(ta.LastName), 
ConsortiumId = gradtours.fn_GetTravelAgencyConsortiumByTourAgent(ta.TourAgentId),  
ConsortiumName = (select TravelAgencyName from TravelAgency  where TravelAgencyId = gradtours.fn_GetTravelAgencyConsortiumByTourAgent(ta.TourAgentId)),  
tag.TravelAgencyId,  
tag.TravelAgencyName,  
tag.Address1, 
tag.Address2,
tag.City,
tag.State,
tag.PostalCode,
tag.Country,
tag.Email,
tag.Phone,
tag.Vip, 
 
qa.QuoteAgentId,  
qa.Name as QuoteAgentName 
FROM  TourAgent ta	
inner join TravelAgency tag		on tag.TravelAgencyId = ta.TravelAgencyId  
left join QuoteAgent qa on qa.QuoteAgentId = ta.QuoteAgentId 
where ta.deleted = 0
and tag.deleted = 0

|||bi_vw_TravelerInvoice
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_TravelerInvoice] where productid = 48921 order by postingdate
CREATE VIEW [gradtours].[bi_vw_TravelerInvoice]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid as TripCoaAllocationId,
		/*
		(select c2.parentcoaallocationid
			from coaallocationtree c2
			where c2.coaallocationid =t.salescoaallocationid
			and level = (select max(level) from coaallocationtree c3 where c3.coaallocationid = t.salescoaallocationid) - 3) --region
		 as TripRegionCoaAllocationId,
		(select c2.parentcoaallocationid
			from coaallocationtree c2
			where c2.coaallocationid =t.salescoaallocationid
			and level = (select max(level) from coaallocationtree c3 where c3.coaallocationid = t.salescoaallocationid) - 4) --subregion
		 as TripSubRegionCoaAllocationId,
		 */
		p.coaallocationid as ProductCoaAllocationId,
		i.CurrencyId,
		SUM(i.Amount) as Amount,
		SUM(i.AmountUSD) as AmountUSD,
		i.DueDate,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel
	FROM
		TripLedger tl
		inner join TravelerInvoices i on i.TripLedgerId = tl.TripLedgerId
		inner join Traveler tt on tt.travelerId = i.TravelerId
		inner join Product p on p.ProductId = tl.ProductId
		inner join Trip t on t.TripId = p.TripId
	WHERE t.CompanyId in (1,8)
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid,
		p.coaallocationid,
		i.CurrencyId,
		i.DueDate

|||bi_vw_TravelerPayment
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_TravelerPayment] where productid = 48921 order by postingdate
CREATE VIEW [gradtours].[bi_vw_TravelerPayment]
AS
	SELECT 
		
		tp.DateCreated,
		tp.PaymentDate,
		tp.TravelerId,
		tp.ClientId,
		tp.InvoiceTypeId,
		tp.Amount,
		tp.CurrencyId,
		tp.SourceAmount,
		tp.SourceCurrencyId,
		tp.AmountUSD,
		tp.COAID,
		tp.Reference,
		tp.Memo,
		tp.RecordedPaymentTypeId,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		p.coaallocationid as ProductCoaAllocationId,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		t.salescoaallocationid as TripCoaAllocationId
	FROM
		TravelerPaymentAllocation tp
		inner join Product p on p.ProductId = tp.ProductId
		inner join Trip t on t.TripId = p.TripId
	WHERE t.CompanyId in (1,8)

|||bi_vw_Trip
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_Trip]
CREATE VIEW [gradtours].[bi_vw_Trip]
AS
	SELECT 
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.TripName as TripName,
		t.QuoteAgentId as TripQuoteAgentId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.salescoaallocationid as TripCoaAllocationId,
		c.ClientId,
		c.FirstName as ClientFirstName,
		c.LastName as ClientLastName,
		c.Phone as ClientPhone,
		c.AlternatePhone as ClientAlternatePhone,
		c.Email as ClientEmail,
		c.Address1 as ClientAddress1,
		c.Address2 as ClientAddress2,
		c.City as ClientCity,
		c.PostalCode as ClientPostalCode,
		c.Province as ClientProvince,
		c.Country as ClientCountry,
		c.DateOfBirth as ClientDateOfBirth,
		a.TourAgentId,
		a.FirstName as AgentFirstName,
		a.LastName as AgentLastName,
		a.Phone as AgentPhone,
		a.Fax as AgentFax, 
		a.Email as AgentEmail,
		aa.Address1 as AgentAddress1,
		aa.Address2 as AgentAddress2, 
		aa.City as AgentCity,
		aa.PostalCode as AgentPostalCode,
		aa.State as AgentProvince,
		aa.Country as AgentCountry,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel
	FROM
		Trip t 
		inner join Client c on c.ClientId = t.MainContactClientId
		left join TourAgent a on a.TourAgentId = t.TourAgentId
		left join TravelAgency aa on aa.TravelAgencyId = a.TravelAgencyId
	WHERE t.CompanyId in (1,8)

|||bi_vw_TripCountryLocale
^^^CREATE VIEW [gradtours].[bi_vw_TripCountryLocale]
AS
	SELECT 
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate, 
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		t.salescoaallocationid as TripCoaAllocationId,
		
		 (select top 1 loc.LocaleId             
			from            
			ItineraryService iserv            
			INNER JOIN ItineraryDay id on iserv.itinerarydayid = id.itinerarydayid            
			INNER JOIN ItineraryService2Booking iserv2book ON iserv2book.ItineraryServiceId = iserv.ItineraryServiceId   
			INNER JOIN LocaleTree tree on tree.LocaleId =  iserv.SourceLocaleId and tree.parentlocaletypeid = 4 --country        
			INNER JOIN Locale loc  on tree.ParentLocaleId = loc.LocaleId          
			WHERE            			   
			ID.ItineraryId = t.Computed_ItineraryId
			AND (ID.Deleted = 0 or ID.Deleted is null)      
			AND loc.Deleted = 0          
			AND (iserv.deleted is null or iserv.deleted = 0)            
			--AND (iserv2book.bookingStatusId is null or iserv2book.bookingStatusId >= 1 AND iserv2book.bookingStatusId <=4)            
			AND SourceLocaleId not in (11, 40, 122, 1559)   -- global locales 
			Order by    
			iserv2book.bookingStatusId, ID.[Day], iserv.timeofdayid,iserv.DisplayOrder ) 
		 as TripCountryLocaleId
	FROM
		Trip t
	WHERE t.CompanyId in (1,8)

|||bi_vw_TripCountryLocale_2
^^^CREATE VIEW [gradtours].[bi_vw_TripCountryLocale_2]
AS
	SELECT
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		t.salescoaallocationid as TripCoaAllocationId,
		
		 (select top 1 loc.LocaleId             
			from            
			ItineraryService iserv            
			INNER JOIN ItineraryDay id on iserv.itinerarydayid = id.itinerarydayid            
			INNER JOIN ItineraryService2Booking iserv2book ON iserv2book.ItineraryServiceId = iserv.ItineraryServiceId   
			INNER JOIN LocaleTree tree on tree.LocaleId =  iserv.SourceLocaleId and tree.parentlocaletypeid = 4 --country        
			INNER JOIN Locale loc  on tree.ParentLocaleId = loc.LocaleId          
			WHERE            
			ID.ItineraryId = t.Computed_ItineraryId   
			AND (ID.Deleted = 0 or ID.Deleted is null)      
			AND loc.Deleted = 0          
			AND (iserv.deleted is null or iserv.deleted = 0)            
			--AND (iserv2book.bookingStatusId is null or iserv2book.bookingStatusId >= 1 AND iserv2book.bookingStatusId <=4)            
			AND SourceLocaleId not in (11, 40, 122, 1559)   -- global locales 
			Order by    
			iserv2book.bookingStatusId, ID.[Day], iserv.timeofdayid,iserv.DisplayOrder ) 
		 as TripCountryLocaleId,
		 t.Computed_ItineraryId AS ItineraryId
	FROM
		Trip t
	WHERE t.CompanyId in (1,8)

|||bi_vw_Vendor
^^^CREATE VIEW [gradtours].[bi_vw_Vendor]
AS
select v.CompanyId, v.ParentId, v.VendorId, v.VendorName, v.VendorDisplayName, 
v.Address, v.Address2, v.City, v.Province, v.Country, v.PostalCode, v.Contact, v.Phone, v.Email, 
v.Inactive, v.VendorTypeId, v.LocaleId, v.CoaAllocationId,
c.CurrencyId, c.Symbol as CurrencyCode
from Vendors v
inner join Currency c on c.CurrencyId = v.DefaultCurrencyId
where v.Deleted = 0
and v.CompanyId in (1,8)

|||bi_vw_VendorCost
^^^--set statistics io on
--set statistics time on
--select top 1000 * from [bi_vw_VendorCost] where productitemid is null 
CREATE VIEW [gradtours].[bi_vw_VendorCost]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.NumberOfDays,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name as ProductItemName,
		i.ServiceId,
		
		v.VendorId,
		v.ParentId as ParentVendorId,
		v.VendorName as VendorName,
		v.VendorTypeId,
		t.salescoaallocationid as TripCoaAllocationId,
		i.coaallocationid as ProductItemCoaAllocationId,
		v.coaallocationid as VendorCoaAllocationId,
		vpos.CurrencyId,
		SUM(vpos.Amount) as Amount,
		SUM(vpos.AmountUSD) as AmountUSD,
		sum(i.QuotedCost) as QuotedCostAmount,
		sum(i.QuotedCostUSD) as QuotedCostUSDAmount,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel,
		CASE 
			WHEN 
				p.ProductTypeId <> 1
			THEN
				v.LocaleId
			ELSE
				--get locale from itinerary service, ug
				(select isnull(s2.sourcelocaleid,v.localeid) from itineraryservice s2 WITH(INDEX(PK_ItineraryService)) -- SK: we are trying to prevent index spool to be used, it is slow due to TempDB load
					where s2.itineraryserviceid = substring(i.systemofrecordid, 7, len(i.systemofrecordid)))
		END as LocaleId
		
	FROM
		TripLedger tl
		inner join VendorPurchaseOrders vpo on vpo.TripLedgerId = tl.TripLedgerId
		inner join VendorPurchaseOrderServices vpos on vpos.VendorPurchaseOrderId = vpo.VendorPurchaseOrderId
		inner join ProductItem i on i.ProductItemId = vpos.ProductItemId
		inner join Product p on p.ProductId = i.ProductId
		inner join Trip t on t.TripId = p.TripId
		inner join Vendors v on v.VendorId = vpo.VendorId
	WHERE t.CompanyId in (1,8)
		
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.NumberOfDays,
		t.DateCancelled,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name,
		i.ServiceId,
		i.SystemOfRecordId,
		v.VendorId,
		v.ParentId,
		v.VendorName,
		v.VendorTypeId,
		v.LocaleId,
		t.salescoaallocationid,
		i.coaallocationid, 
		v.coaallocationid, 
		vpos.CurrencyId

|||bi_vw_VendorPayment
^^^--set statistics io on
--set statistics time on
--select * from [bi_vw_VendorPayment]
CREATE VIEW [gradtours].[bi_vw_VendorPayment]
AS
	SELECT 
		pa.DateCreated,
		pa.PaymentDate,
		pa.CurrencyId,
		pa.Amount,
		pa.AmountUSD,
		pa.SourceCurrencyId,
		pa.SourceAmount,
		pa.COAID,
		pa.Reference,
		pa.Memo,
		
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.NumberOfDays,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		
		v.VendorId,
		v.ParentId as ParentVendorId,
		v.VendorName as VendorName,
		v.VendorTypeId,
		t.salescoaallocationid as TripCoaAllocationId,
		v.coaallocationid as VendorCoaAllocationId
	FROM
		VendorPaymentAllocation pa
		inner join VendorPurchaseOrders vpo on vpo.VendorPurchaseOrderId = pa.VendorPurchaseOrderId
		inner join Vendors v on v.VendorId = vpo.VendorId
		inner join Product p on p.ProductId = vpo.ProductId
		inner join Trip t on t.TripId = p.TripId
		
	WHERE t.CompanyId in (1,8)

|||bi_vw_VendorServiceMarkupSummary
^^^-- =============================================
-- Author:		Sergey Kikot
-- Create date: 2018-09-11
-- Description:	Power BI version of the Vendor Markup Summary TMT view
-- =============================================
CREATE VIEW [gradtours].[bi_vw_VendorServiceMarkupSummary]
AS
	-- SK: because as of 2018-9-11 we don't have the exact requirements, just a plain output is produced, will be more tailored in future revisions
	SELECT *
	FROM
		VendorServiceMarkupSummary

|||bi_vw_VPOQuote
^^^--set statistics io on
--set statistics time on
CREATE VIEW [gradtours].[bi_vw_VPOQuote]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.NumberOfDays,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name as ProductItemName,
		i.ServiceId,
		vpoVendor.VendorId,
		vpoVendor.ParentId as ParentVendorId,
		vpoVendor.VendorName as VendorName,
		vpoVendor.VendorTypeId,
		t.salescoaallocationid as TripCoaAllocationId,
		i.coaallocationid as ProductItemCoaAllocationId,
		vpoVendor.coaallocationid as VendorCoaAllocationId,
		MIN(vpos.CurrencyId) as CurrencyId,
		SUM(vpos.Amount) as Amount,
		SUM(vpos.AmountUSD) as AmountUSD,
		CASE 
			WHEN t.TourAgentId > 0
			THEN 'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel,
		CASE 
			WHEN  p.ProductTypeId <> 1
			THEN vpoVendor.LocaleId
			ELSE --get locale from itinerary service, ug
				(select isnull(s2.sourcelocaleid,vpoVendor.localeid) from itineraryservice s2
					where s2.itineraryserviceid = substring(i.systemofrecordid, 7, len(i.systemofrecordid)))
		END as LocaleId,
		
		CASE 
			WHEN  tl.QuoteAgentId = 282
			THEN 1
			ELSE 0
			END as IsVPOQuoteAgent,
		CASE 
			WHEN i.serviceid = 15
			THEN 1
			ELSE 0
			END as IsVPOAutoAdjustment,
		CASE 
			WHEN (piVendor.VendorId = 6574 or piVendor.ParentId = 6574)
			THEN 1
			ELSE 0
			END as IsDynamicHotel
	FROM
		TripLedger tl
		inner join VendorPurchaseOrders vpo on vpo.TripLedgerId = tl.TripLedgerId
		inner join VendorPurchaseOrderServices vpos on vpos.VendorPurchaseOrderId = vpo.VendorPurchaseOrderId
		inner join ProductItem i on i.ProductItemId = vpos.ProductItemId
		inner join Product p on p.ProductId = i.ProductId
		inner join Trip t on t.TripId = p.TripId
		inner join Vendors vpoVendor on vpoVendor.VendorId = vpo.VendorId
		inner join Vendors piVendor on piVendor.VendorId = i.VendorId
	WHERE t.CompanyId in (1,8)
		
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.NumberOfDays,
		t.DateCancelled,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name,
		i.ServiceId,
		i.SystemOfRecordId,
		vpoVendor.VendorId,
		vpoVendor.ParentId,
		vpoVendor.VendorName,
		vpoVendor.VendorTypeId,
		vpoVendor.LocaleId,
		piVendor.VendorId,
		piVendor.ParentId,
		t.salescoaallocationid,
		i.coaallocationid, 
		vpoVendor.coaallocationid, 
		vpos.CurrencyId

|||ClientQuoteRequestActions
^^^CREATE VIEW [gradtours].[ClientQuoteRequestActions]
AS
SELECT     gradtours.LeadAssignment.LeadAssignmentId, gradtours.ClientRequest.ClientRequestId, gradtours.quoteagentaction.QuoteAgentActionId, 
                      gradtours.ClientRequest.TemplateItineraryId, gradtours.ClientRequest.LocaleId, gradtours.ClientRequest.COAAllocationId, 
gradtours.LeadAssignment.ClaimedTime, 
                      gradtours.LeadAssignment.IsProcessed, gradtours.ClientRequest.Deleted, gradtours.Client.ClientId, gradtours.Client.FirstName, 
gradtours.Client.LastName, 
                      gradtours.Client.ClientTypeId, gradtours.Client.PreferredContactId, gradtours.Client.CompanyBrandId, 
gradtours.ClientRequest.ClientRequestTypeId, 
                      gradtours.ClientRequest.DateCreated, gradtours.quoteagentaction.QuoteAgentId, gradtours.LeadAssignment.IsInOpenPool, 
                      gradtours.quoteagentaction.QuoteAgentActionTypeId
FROM         gradtours.Client INNER JOIN
                      gradtours.ClientRequest ON gradtours.Client.ClientId = gradtours.ClientRequest.ClientId LEFT OUTER JOIN
                      gradtours.quoteagentaction ON gradtours.ClientRequest.ClientRequestId = gradtours.quoteagentaction.ClientRequestId LEFT OUTER JOIN
                      gradtours.LeadAssignment ON gradtours.ClientRequest.ClientRequestId = gradtours.LeadAssignment.ClientRequestId
WHERE     (gradtours.LeadAssignment.IsProcessed = 0)

|||Dean_VPOS
^^^create view [gradtours].[Dean_VPOS] as 
select vendorpurchaseorders.*, itineraryserviceid, amount, currencyid, amountUSD from 
vendorpurchaseorders inner join vendorpurchaseorderservices on vendorpurchaseorderservices.vendorpurchaseorderid = vendorpurchaseorders.vendorpurchaseorderid

|||DevDocs_StatsView
^^^CREATE VIEW [gradtours].[DevDocs_StatsView]
AS
SELECT     dev, devid, SUM(CASE WHEN [version] = 1 THEN 1 ELSE 0 END) AS adds, SUM(CASE WHEN [version] > 1 THEN 1 ELSE 0 END) AS edits, 
                      SUM(CASE WHEN [version] = 1 THEN DATALENGTH(doc) / 8 ELSE 0 END) AS wordcount
FROM         gradtours.devdocs_content
GROUP BY dev, devid

|||DynamicHotel_DMC_Rate
^^^CREATE VIEW [gradtours].[DynamicHotel_DMC_Rate]
AS
SELECT        gradtours.Hotel.HotelId, gradtours.Hotel.gHotelId, gradtours.Hotel.Name AS HotelName, gradtours.Hotel.Description AS HotelDescription, gradtours.Hotel.LocaleId AS HotelLocaleId, gradtours.Hotel.IsActive AS HotelIsActive, 
                         gradtours.Hotel.Preferred AS HotelIsPreferred, gradtours.vendors.vendorId, ISNULL(gradtours.vendors.ParentId, gradtours.vendors.vendorId) AS VendorParentId, gradtours.vendors.vendorName, 
                         gradtours.HotelRoomCategory.HotelRoomCategoryId, gradtours.HotelRoomCategory.gHotelRoomId, gradtours.HotelRoomCategory.Name AS HotelRoomCategoryName, 
                         gradtours.HotelRoomCategory.Description AS HotelRoomCategoryDescription, gradtours.HotelRoomType.Name AS HotelRoomTypeName, gradtours.HotelSeasonDates.SeasonStartDate, 
                         gradtours.HotelSeasonDates.SeasonEndDate, gradtours.Rate.RateTypeId, gradtours.Rate.Flat, gradtours.Hotel2Vendor.IsDescriptionOnly, gradtours.Hotel2Vendor.IsActive AS HotelVendorIsActive, 
                         gradtours.HotelRoomType.HotelRoomTypeId, gradtours.vendors.DefaultCurrencyId, gradtours.Currency.Symbol, gradtours.Currency.Name
FROM            gradtours.Hotel INNER JOIN
                         gradtours.HotelRoomCategory ON gradtours.HotelRoomCategory.HotelId = gradtours.Hotel.HotelId INNER JOIN
                         gradtours.HotelRoomCategory2Vendor ON gradtours.HotelRoomCategory2Vendor.HotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId INNER JOIN
                         gradtours.Hotel2Vendor ON gradtours.Hotel2Vendor.VendorId = gradtours.HotelRoomCategory2Vendor.VendorId AND gradtours.Hotel2Vendor.HotelId = gradtours.Hotel.HotelId INNER JOIN
                         gradtours.vendors ON gradtours.vendors.vendorId = gradtours.HotelRoomCategory2Vendor.VendorId INNER JOIN
                         gradtours.HotelSeason ON gradtours.HotelSeason.HotelId = gradtours.Hotel.HotelId AND gradtours.HotelSeason.VendorId = gradtours.HotelRoomCategory2Vendor.VendorId INNER JOIN
                         gradtours.HotelSeasonDates ON gradtours.HotelSeasonDates.HotelSeasonId = gradtours.HotelSeason.HotelSeasonId INNER JOIN
                         gradtours.HotelRates ON gradtours.HotelRates.HotelSeasonId = gradtours.HotelSeason.HotelSeasonId AND gradtours.HotelRates.HotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId INNER JOIN
                         gradtours.Rate ON gradtours.Rate.RateId = gradtours.HotelRates.RateId AND gradtours.Rate.VendorId = gradtours.HotelRoomCategory2Vendor.VendorId INNER JOIN
                         gradtours.RateSetup ON gradtours.RateSetup.RateSetupId = gradtours.Rate.RateSetupId AND 
                         gradtours.RateSetup.HotelRoomCategory2VendorId = gradtours.HotelRoomCategory2Vendor.HotelRoomCategory2VendorId LEFT OUTER JOIN
                         gradtours.RateSetup2DayOfWeek ON gradtours.RateSetup2DayOfWeek.RateSetupId = gradtours.RateSetup.RateSetupId INNER JOIN
                         gradtours.Vendor2AccomodationRoomCategoryRoomType ON 
                         gradtours.Vendor2AccomodationRoomCategoryRoomType.Vendor2AccomodationRoomCategoryRoomTypeId = gradtours.HotelRates.Vendor2AccomodationRoomCategoryRoomTypeId AND 
                         gradtours.Vendor2AccomodationRoomCategoryRoomType.HotelRoomCategory2VendorId = gradtours.HotelRoomCategory2Vendor.HotelRoomCategory2VendorId INNER JOIN
                         gradtours.AccomodationRoomCategory2RoomType ON 
                         gradtours.AccomodationRoomCategory2RoomType.AccomodationRoomCategory2RoomTypeId = gradtours.Vendor2AccomodationRoomCategoryRoomType.AccomodationRoomCategory2RoomTypeId INNER JOIN
                         gradtours.HotelRoomType ON gradtours.HotelRoomType.HotelRoomTypeId = gradtours.AccomodationRoomCategory2RoomType.RoomTypeId INNER JOIN
                         gradtours.Currency ON gradtours.vendors.DefaultCurrencyId = gradtours.Currency.CurrencyId AND gradtours.HotelSeason.CurrencyId = gradtours.Currency.CurrencyId
WHERE        (gradtours.HotelRoomCategory.Deleted IS NULL OR
                         gradtours.HotelRoomCategory.Deleted = 0) AND (gradtours.HotelRoomCategory2Vendor.Deleted IS NULL OR
                         gradtours.HotelRoomCategory2Vendor.Deleted = 0) AND (gradtours.HotelSeason.Deleted IS NULL OR
                         gradtours.HotelSeason.Deleted = 0) AND (gradtours.HotelSeasonDates.Deleted IS NULL OR
                         gradtours.HotelSeasonDates.Deleted = 0) AND (gradtours.HotelRates.Deleted IS NULL OR
                         gradtours.HotelRates.Deleted = 0) AND (gradtours.Rate.Deleted IS NULL OR
                         gradtours.Rate.Deleted = 0) AND (gradtours.Vendor2AccomodationRoomCategoryRoomType.Deleted IS NULL OR
                         gradtours.Vendor2AccomodationRoomCategoryRoomType.Deleted = 0) AND (gradtours.AccomodationRoomCategory2RoomType.Deleted IS NULL OR
                         gradtours.AccomodationRoomCategory2RoomType.Deleted = 0) AND (gradtours.Hotel2Vendor.IsDescriptionOnly = 0) AND (gradtours.RateSetup2DayOfWeek.RateSetupId IS NULL) OR
                         (gradtours.HotelRoomCategory.Deleted IS NULL OR
                         gradtours.HotelRoomCategory.Deleted = 0) AND (gradtours.HotelRoomCategory2Vendor.Deleted IS NULL OR
                         gradtours.HotelRoomCategory2Vendor.Deleted = 0) AND (gradtours.HotelSeason.Deleted IS NULL OR
                         gradtours.HotelSeason.Deleted = 0) AND (gradtours.HotelSeasonDates.Deleted IS NULL OR
                         gradtours.HotelSeasonDates.Deleted = 0) AND (gradtours.HotelRates.Deleted IS NULL OR
                         gradtours.HotelRates.Deleted = 0) AND (gradtours.Rate.Deleted IS NULL OR
                         gradtours.Rate.Deleted = 0) AND (gradtours.Vendor2AccomodationRoomCategoryRoomType.Deleted IS NULL OR
                         gradtours.Vendor2AccomodationRoomCategoryRoomType.Deleted = 0) AND (gradtours.AccomodationRoomCategory2RoomType.Deleted IS NULL OR
                         gradtours.AccomodationRoomCategory2RoomType.Deleted = 0) AND (gradtours.Hotel2Vendor.IsDescriptionOnly = 0) AND (gradtours.RateSetup2DayOfWeek.DayOfWeekId = 2)

|||Finance_ItineraryServiceAirfareSummary
^^^CREATE VIEW [gradtours].[Finance_ItineraryServiceAirfareSummary]
AS
	SELECT 
	ProductId
	, ProductTypeId
	, TripId
	, companyid
	, QuoteAgentId
	, dateofsale
	, billeddate
	, sum(isnull(revenueusd,0)) as revenueusd
	, sum(isnull(costusd,0)) as costusd
	FROM Finance_ProductItemSummary
	WHERE ProductTypeId = 2
	group by 
	ProductId
	, ProductTypeId
	, TripId
	, companyid
	, QuoteAgentId
	, dateofsale
	, billeddate

|||Finance_ItineraryServiceInsuranceSummary
^^^CREATE VIEW [gradtours].[Finance_ItineraryServiceInsuranceSummary]
AS
	SELECT 
	ProductId
	, ProductTypeId
	, TripId
	, companyid
	, QuoteAgentId
	, dateofsale
	, billeddate
	, sum(isnull(revenueusd,0)) as revenueusd
	, sum(isnull(costusd,0)) as costusd
	FROM Finance_ProductItemSummary
	WHERE ProductTypeId = 3
	group by 
	ProductId
	, ProductTypeId
	, TripId
	, companyid
	, QuoteAgentId
	, dateofsale
	, billeddate

|||Finance_ItineraryServiceInsuranceSummary_TravInv
^^^CREATE VIEW [gradtours].[Finance_ItineraryServiceInsuranceSummary_TravInv]
AS
	SELECT 
	ProductId
	, ProductTypeId
	, TripId
	, companyid
	, QuoteAgentId
	, PostingDate as dateofsale
	, billeddate
	, sum(isnull(revenueusd,0)) as revenueusd
	, sum(isnull(costusd,0)) as costusd
	FROM Finance_ProductItemSummary_TravInv
	WHERE ProductTypeId = 3
	group by 
	ProductId
	, ProductTypeId
	, TripId
	, companyid
	, QuoteAgentId
	, PostingDate
	, billeddate

|||Finance_PaymentsDue_ByTraveler
^^^CREATE VIEW [gradtours].[Finance_PaymentsDue_ByTraveler] AS
select i1.TravelerId, i1.InvoiceTypeId, i1.CurrencyId as PaymentDue_CurrencyId, i1.DueDate,
 case when CumulativeAmount - isnull(PaymentAmount,0) < 0 then 0
  when CumulativeAmount - isnull(PaymentAmount,0) > Amount then Amount
 else CumulativeAmount - isnull(PaymentAmount,0) end 
	as PaymentDue 
from Finance_PaymentsDue_CumulativeGroupedInvoiceAmountsByTraveler i1
	full outer join Finance_PaymentsDue_GroupedPaymentsByTraveler p on i1.travelerid = p.travelerid and i1.currencyid = p.currencyid and i1.invoicetypeid = p.invoicetypeid 
 and case when i1.CumulativeAmount - isnull(PaymentAmount,0) > 0 then i1.CumulativeAmount - isnull(PaymentAmount,0) else 0 end <> 0

|||Finance_PaymentsDue_CumulativeGroupedInvoiceAmountsByItinerary
^^^-- =============================================        
-- Author:  Dean Cummins        
-- Create date: 02-Mar-2012
-- Description: Gets the cumulative invoice amounts by itinerary. For [Traveler_GetPaymentsDue]
-- =============================================    
CREATE VIEW [gradtours].[Finance_PaymentsDue_CumulativeGroupedInvoiceAmountsByItinerary] AS
select i1.invoicetypeid,i1.itineraryid, i1.duedate, i1.currencyid, i1.Amount as Amount, i1.AmountUSD as AmountUSD, sum(i2.Amount) as CumulativeAmount, sum(i2.AmountUSD) as CumulativeAmountUSD
from Finance_PaymentsDue_GroupedInvoiceAmountsByItinerary i1
	inner join Finance_PaymentsDue_GroupedInvoiceAmountsByItinerary i2 on i1.itineraryid = i2.itineraryid and i1.currencyid = i2.currencyid and i1.invoicetypeid = i2.invoicetypeid and i1.duedate >= i2.duedate	
group by i1.invoicetypeid,i1.currencyid, i1.itineraryid, i1.duedate, i1.Amount, i1.AmountUSD
having sum(i1.amount) <> 0

|||Finance_PaymentsDue_CumulativeGroupedInvoiceAmountsByTraveler
^^^-- =============================================        
-- Author:  Dean Cummins        
-- Create date: 02-Mar-2012
-- Description: Gets the cumulative invoice amounts by traveler. For [Traveler_GetPaymentsDue]
-- =============================================   
CREATE VIEW [gradtours].[Finance_PaymentsDue_CumulativeGroupedInvoiceAmountsByTraveler] AS
select i1.invoicetypeid,i1.travelerid, i1.duedate, i1.currencyid, i1.Amount as Amount, i1.AmountUSD as AmountUSD, 
	sum(i2.Amount) 
		- isnull((select sum(amount) from Finance_PaymentsDue_GroupedInvoiceAmountsByTraveler ineg inner join travelerinvoicetype on ineg.invoicetypeid = travelerinvoicetype.invoicetypeid where ineg.amount < 0 and ineg.travelerid = i1.travelerid and ineg.currencyid = i1.currencyid and parentinvoicetypeid =  i1.invoicetypeid),0)
		as CumulativeAmount, 
	sum(i2.AmountUSD) 
		- isnull((select sum(amountUSD) from Finance_PaymentsDue_GroupedInvoiceAmountsByTraveler ineg inner join travelerinvoicetype on ineg.invoicetypeid = travelerinvoicetype.invoicetypeid where ineg.amount < 0 and ineg.travelerid = i1.travelerid and ineg.currencyid = i1.currencyid and parentinvoicetypeid =  i1.invoicetypeid),0)
		as CumulativeAmountUSD
from Finance_PaymentsDue_GroupedInvoiceAmountsByTraveler i1
	inner join Finance_PaymentsDue_GroupedInvoiceAmountsByTraveler i2 on i1.travelerid = i2.travelerid and i1.currencyid = i2.currencyid and i1.invoicetypeid = i2.invoicetypeid and i1.duedate >= i2.duedate	
where i1.amount > 0
group by i1.invoicetypeid,i1.currencyid, i1.travelerid, i1.duedate, i1.Amount, i1.AmountUSD
--having sum(i1.amount) <> 0 

|||Finance_PaymentsDue_GroupedInvoiceAmountsByItinerary
^^^-- =============================================        
-- Author:  Dean Cummins        
-- Create date: 02-Mar-2012
-- Description: Gets the grouped invoice amounts by itinerary. For [Traveler_GetPaymentsDue]
-- =============================================   
CREATE VIEW [gradtours].[Finance_PaymentsDue_GroupedInvoiceAmountsByItinerary] AS
select t1.tripitineraryid as itineraryid,  parentinvoicetypeid as invoicetypeid,  i1.duedate, i1.currencyid, sum(i1.Amount) as Amount, sum(i1.AmountUSD) as AmountUSD
from travelerinvoices i1 inner join traveler t1 on i1.travelerid = t1.travelerid
inner join travelerinvoicetype on i1.invoicetypeid = travelerinvoicetype.invoicetypeid
group by parentinvoicetypeid, i1.currencyid, t1.tripitineraryid, i1.duedate

|||Finance_PaymentsDue_GroupedInvoiceAmountsByTraveler
^^^-- =============================================        
-- Author:  Dean Cummins        
-- Create date: 02-Mar-2012
-- Description: Gets the grouped invoice amounts by traveler. For [Traveler_GetPaymentsDue]
-- =============================================   
CREATE VIEW [gradtours].[Finance_PaymentsDue_GroupedInvoiceAmountsByTraveler] AS
select t1.travelerid, parentinvoicetypeid as invoicetypeid,  i1.duedate, i1.currencyid, sum(i1.Amount) as Amount, sum(i1.AmountUSD) as AmountUSD
from travelerinvoices i1 inner join traveler t1 on i1.travelerid = t1.travelerid 
inner join travelerinvoicetype on i1.invoicetypeid = travelerinvoicetype.invoicetypeid
group by parentinvoicetypeid, i1.currencyid, t1.travelerid, i1.duedate

|||Finance_PaymentsDue_GroupedPaymentsByItinerary
^^^-- =============================================        
-- Author:  Dean Cummins        
-- Create date: 02-Mar-2012
-- Description: Gets the payments by itinerary. For [Traveler_GetPaymentsDue]
-- =============================================   
CREATE VIEW [gradtours].[Finance_PaymentsDue_GroupedPaymentsByItinerary] AS
select traveler.tripitineraryid as itineraryid, parentinvoicetypeid as invoicetypeid, currencyid, sum(amount) as PaymentAmount, sum(amountusd) as PaymentAmountUSD
from TravelerPaymentAllocation with(nolock)
	inner join traveler with(nolock) on TravelerPaymentAllocation.travelerid = traveler.travelerid
inner join travelerinvoicetype on TravelerPaymentAllocation.invoicetypeid = travelerinvoicetype.invoicetypeid
group by traveler.tripitineraryid, parentinvoicetypeid, currencyid

|||Finance_PaymentsDue_GroupedPaymentsByTraveler
^^^-- =============================================        
-- Author:  Dean Cummins        
-- Create date: 02-Mar-2012
-- Description: Gets the payments by traveler. For [Traveler_GetPaymentsDue]
-- =============================================   
CREATE VIEW [gradtours].[Finance_PaymentsDue_GroupedPaymentsByTraveler] AS
select traveler.tripitineraryid as itineraryid, parentinvoicetypeid as invoicetypeid, TravelerPaymentAllocation.travelerid, currencyid, sum(amount) as PaymentAmount, sum(amountusd) as PaymentAmountUSD
from TravelerPaymentAllocation with(nolock)
	inner join traveler with(nolock) on TravelerPaymentAllocation.travelerid = traveler.travelerid
inner join travelerinvoicetype on TravelerPaymentAllocation.invoicetypeid = travelerinvoicetype.invoicetypeid
group by traveler.tripitineraryid, parentinvoicetypeid, TravelerPaymentAllocation.travelerid, currencyid

|||Finance_ProductItemSummary
^^^---------------------------------------------------------
-- This view is a generic source by product types for
-- finance reports
---------------------------------------------------------
CREATE VIEW [gradtours].[Finance_ProductItemSummary]
AS
			SELECT
		p.ProductId
		, p.ProductTypeId
		, t.TripId
		, t.companyid
		, t.QuoteAgentId
		, cast(p.Bookeddate as date) as dateofsale
		, cast(i.billeddate as date) as billeddate
		, sum(i.amountusd) as revenueusd 
		, null as costusd
		
	FROM
		Trip t
		INNER JOIN Product p ON t.TripId = p.TripId
		INNER JOIN TravelerInvoices i on i.productid = p.productid
	WHERE
		p.IsArchived = 0
	
	group by p.ProductId
		, p.ProductTypeId
		, t.TripId, t.companyid
		, t.QuoteAgentId
		, cast(p.Bookeddate as date), cast(i.billeddate as date)
	union all
		SELECT
		p.ProductId
		, p.ProductTypeId
		, t.TripId
		, t.companyid
		, t.QuoteAgentId
		, cast(p.Bookeddate as date) as dateofsale
		, cast(po.billeddate as date) as billeddate
		, null as revenueusd 
		, sum(pos.amountusd) AS costUSD
		
	FROM
		Trip t
		INNER JOIN Product p ON t.TripId = p.TripId
		INNER JOIN Vendorpurchaseorders po on po.productid = p.productid
		inner join vendorPurchaseOrderServices pos on pos.vendorpurchaseorderid = po.vendorpurchaseorderid
		inner join productitem pi on pi.productitemid = pos.productitemid
	WHERE
		p.IsArchived = 0
		and pi.productitemtype = 1
	group by p.ProductId
		, p.ProductTypeId
		, t.TripId, t.companyid
		, t.QuoteAgentId, cast(p.Bookeddate as date), cast(po.billeddate as date)
;

|||Finance_ProductItemSummary_TravInv
^^^CREATE VIEW [gradtours].[Finance_ProductItemSummary_TravInv]
AS
			SELECT
	    tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		cast(p.Bookeddate as date) as Bookeddate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		cast(i.billeddate as date) as billeddate,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId,
		t.BookedDate as TropBookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid,
		p.coaallocationid,
		i.CurrencyId,
		cast(i.DueDate as date) as DueDate,
		sum(i.amountusd) as revenueusd, 
		null as costusd
		
	FROM
		TripLedger tl
		inner join TravelerInvoices i on i.TripLedgerId = tl.TripLedgerId
		inner join Traveler tt on tt.travelerId = i.TravelerId
		inner join Product p on p.ProductId = tl.ProductId
		inner join Trip t on t.TripId = p.TripId
	WHERE
		t.DateCancelled is NULL
	
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		cast(p.Bookeddate as date),
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		cast(i.billeddate as date),
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid,
		p.coaallocationid,
		i.CurrencyId,
		cast(i.DueDate as date)
;

|||Finance_Receivables
^^^CREATE VIEW [gradtours].[Finance_Receivables]      
AS      
  
select tripitineraryid as itineraryid, 1 as invoicetypeid, SUM(amount) as amount, currencyid, SUM(sourceamount) as sourceamount, sourcecurrencyid, SUM(amountUSD) as amountUSD, coaid, paymentdate, reference,     
memo, RegisterTransactionid, recordedpaymenttypeid, itineraryhistorybatchid      
 ,(select Amount from Register where Register.RegisterTransactionId = TravelerPaymentAllocation.RegisterTransactionId and COAID = 58) as feeAmount      
 ,(select SourceAmount from Register where Register.RegisterTransactionId = TravelerPaymentAllocation.RegisterTransactionId and COAID = 58) as feeSourceAmount      
 ,(select AmountUSD from Register where Register.RegisterTransactionId = TravelerPaymentAllocation.RegisterTransactionId and COAID = 58) as feeAmountUSD      
 , (select distinct companyid from Register where register.RegisterTransactionId = TravelerPaymentAllocation.RegisterTransactionId) as CompanyId      
from TravelerPaymentAllocation inner join traveler on TravelerPaymentAllocation.TravelerId = traveler.travelerid      
group by tripitineraryid, currencyid, sourcecurrencyid, coaid, paymentdate, reference, memo, RegisterTransactionid, recordedpaymenttypeid, itineraryhistorybatchid      

|||finance_receivables_modified
^^^  CREATE view [gradtours].[finance_receivables_modified] as
  select tripitineraryid as itineraryid, SUM(amount) as amount, currencyid,  SUM(amountUSD) as amountUSD, coaid, paymentdate, reference,     
memo, recordedpaymenttypeid,null as itineraryhistorybatchid, null as registertransactionid, null as feeamount, null as   feeSourceAmount, null as  feeAmountUSD, null as companyid   
 --,(select Amount from Register where Register.RegisterTransactionId = travelerpayments.RegisterTransactionId and COAID = 58) as feeAmount      
 --,(select SourceAmount from Register where Register.RegisterTransactionId = travelerpayments.RegisterTransactionId and COAID = 58) as feeSourceAmount      
 --,(select AmountUSD from Register where Register.RegisterTransactionId = travelerpayments.RegisterTransactionId and COAID = 58) as feeAmountUSD      
 --, (select distinct companyid from Register where register.RegisterTransactionId = travelerpayments.RegisterTransactionId) as CompanyId      
from TravelerPaymentAllocation inner join traveler on TravelerPaymentAllocation.TravelerId = traveler.travelerid      
group by tripitineraryid, currencyid, coaid, paymentdate, reference, memo, recordedpaymenttypeid  

|||Finance_VendorTripCostByIS
^^^CREATE VIEW [gradtours].[Finance_VendorTripCostByIS] AS  
SELECT     SUM(ISNULL(ActualCost,0)) AS ActualCost, vendorid,  ItineraryId  
FROM         ItineraryTrip_VendorCostSummary  
GROUP BY VendorId, ItineraryId  

|||Finance_VendorTripCostByPI
^^^CREATE VIEW [gradtours].[Finance_VendorTripCostByPI] AS  
select pi.VendorId, SUM(pi.ActualCost) as ActualCost, pi.Currency, SUM(pi.ActualCostUSD) as ActualCostUSD, p.ProductId
from product p
inner join productitem pi on pi.productid = p.productid
group by pi.VendorId, pi.Currency, p.ProductId

|||Finance_VendorTripCostByVPO
^^^CREATE VIEW [gradtours].[Finance_VendorTripCostByVPO] AS  
SELECT     o.VendorId, SUM(isnull(s.Amount,0)) AS vpoAmount, o.ItineraryId  
FROM         VendorPurchaseOrders AS o INNER JOIN  
                      VendorPurchaseOrderServices AS s ON s.VendorPurchaseOrderId = o.VendorPurchaseOrderId   
GROUP BY o.VendorId, o.ItineraryId

|||FinanceViewRevenueAllocation
^^^--set statistics io on
--set statistics time on
--select * from [FinanceViewRevenueAllocation] where vendortypeid = 2 and companyid = 1 order by postingdate
--select top 1000 * from [FinanceViewRevenueAllocation] where RevCoaAllocationId is not null and ProductItemCoaAllocationId is not null
CREATE VIEW [gradtours].[FinanceViewRevenueAllocation]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		i.ProductItemId,
		i.ProductItemType,
		i.Name as ProductItemName,
		i.ServiceId,
		v.VendorId,
		v.ParentId as ParentVendorId,
		v.VendorName as VendorName,
		v.VendorTypeId,
		t.salescoaallocationid as TripCoaAllocationId,
		r.coaallocationid as RevCoaAllocationId,
		i.coaallocationid as ProductItemCoaAllocationId,
		v.coaallocationid as VendorCoaAllocationId,
		r.CurrencyId,
		SUM(r.Amount) as Amount,
		SUM(r.AmountUSD) as AmountUSD
	FROM
		TripLedger tl
		inner join ItineraryServiceRevenueAllocation r on r.TripLedgerId = tl.TripLedgerId
		inner join Product p on p.ProductId = tl.ProductId
		inner join Trip t on t.TripId = p.TripId
		left join ProductItem i on i.ProductItemId = r.ProductItemId
		left join Vendors v on v.VendorId = i.VendorId
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		i.ProductItemId,
		i.ProductItemType,
		i.Name,
		i.ServiceId,
		v.VendorId,
		v.ParentId,
		v.VendorName,
		v.VendorTypeId,
		t.salescoaallocationid,
		i.coaallocationid, 
		v.coaallocationid, 
		r.coaallocationid,
		r.CurrencyId

|||FinanceViewTravelerInvoice
^^^--select top 10 * from TravelerPaymentAllocation order by 1 desc
--set statistics io on
--set statistics time on
--select * from [FinanceViewTravelerInvoice] where productid = 48921 order by postingdate
--select * from [FinanceViewTravelerInvoice] where tripid = 400708
CREATE VIEW [gradtours].[FinanceViewTravelerInvoice]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid as TripCoaAllocationId,
		(select c2.parentcoaallocationid
			from coaallocationtree c2
			where c2.coaallocationid =t.salescoaallocationid
			and level = (select max(level) from coaallocationtree c3 where c3.coaallocationid = t.salescoaallocationid) - 3) --region
		 as TripRegionCoaAllocationId,
		(select c2.parentcoaallocationid
			from coaallocationtree c2
			where c2.coaallocationid =t.salescoaallocationid
			and level = (select max(level) from coaallocationtree c3 where c3.coaallocationid = t.salescoaallocationid) - 4) --subregion
		 as TripSubRegionCoaAllocationId,
		
		p.coaallocationid as ProductCoaAllocationId,
		i.CurrencyId,
		SUM(i.Amount) as Amount,
		SUM(i.AmountUSD) as AmountUSD,
		i.DueDate,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel
	FROM
		TripLedger tl
		inner join TravelerInvoices i on i.TripLedgerId = tl.TripLedgerId
		inner join Traveler tt on tt.travelerId = i.TravelerId
		inner join Product p on p.ProductId = tl.ProductId
		inner join Trip t on t.TripId = p.TripId
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid,
		t.SystemOfRecordId,
		p.coaallocationid,
		i.CurrencyId,
		i.DueDate

|||FinanceViewVendorCost
^^^--set statistics io on
--set statistics time on
--select top 1000 * from [FinanceViewVendorCost] where productitemid is null 
CREATE VIEW [gradtours].[FinanceViewVendorCost]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name as ProductItemName,
		i.ServiceId,
		
		v.VendorId,
		v.ParentId as ParentVendorId,
		v.VendorName as VendorName,
		v.VendorTypeId,
		t.salescoaallocationid as TripCoaAllocationId,
		i.coaallocationid as ProductItemCoaAllocationId,
		v.coaallocationid as VendorCoaAllocationId,
		vpos.CurrencyId,
		SUM(vpos.Amount) as Amount,
		SUM(vpos.AmountUSD) as AmountUSD,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip 
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel
	FROM
		TripLedger tl
		inner join VendorPurchaseOrders vpo on vpo.TripLedgerId = tl.TripLedgerId
		inner join VendorPurchaseOrderServices vpos on vpos.VendorPurchaseOrderId = vpo.VendorPurchaseOrderId
		inner join ProductItem i on i.ProductItemId = vpos.ProductItemId
		inner join Product p on p.ProductId = i.ProductId
		inner join Trip t on t.TripId = p.TripId
		inner join Vendors v on v.VendorId = vpo.VendorId
		
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name,
		i.ServiceId,
		v.VendorId,
		v.ParentId,
		v.VendorName,
		v.VendorTypeId,
		t.salescoaallocationid,
		i.coaallocationid, 
		v.coaallocationid, 
		vpos.CurrencyId

|||GlobalGround
^^^CREATE VIEW [gradtours].[GlobalGround]
AS
SELECT     gradtours.Ground.GroundId AS gGroundId, gradtours.Ground.GroundId, gradtours.Ground.LocationId, gradtours.Ground.Name AS GroundName, 
                      1 AS PerferredDetailsProvider, gradtours.Ground.Deleted, gradtours.ActivityType.Name AS ActivityTypeName, gradtours.Ground.LocaleId, 
                      gradtours.Locale.Name AS LocaleName, gradtours.Category.Name AS CategoryName, gradtours.ActivityType.DisplayName AS ActivityTypeDisplayName,
					  gradtours.Ground.SimpleName as SimpleServiceName
FROM         gradtours.Ground INNER JOIN
                      gradtours.ActivityType ON gradtours.Ground.ActivityTypeId = gradtours.ActivityType.ActivityTypeId AND 
                      gradtours.Ground.ActivityTypeId = gradtours.ActivityType.ActivityTypeId INNER JOIN
                      gradtours.Locale ON gradtours.Ground.LocaleId = gradtours.Locale.LocaleId INNER JOIN
                      gradtours.Category ON gradtours.Ground.CategoryId = gradtours.Category.CategoryId AND gradtours.Ground.CategoryId = gradtours.Category.CategoryId

|||GlobalGround_Beta
^^^CREATE VIEW [gradtours].[GlobalGround_Beta]
WITH SCHEMABINDING
AS
SELECT     GroundId AS gGroundId, GroundId, LocationId, Name AS GroundName, 1 AS PerferredDetailsProvider, Deleted
FROM         gradtours.Ground

|||GlobalGroundVehicle
^^^CREATE VIEW [gradtours].[GlobalGroundVehicle]  
AS  
SELECT     gradtours.Ground2Vehicle.Ground2VehicleId AS gGroundVehicleId, gradtours.Ground2Vehicle.GroundId AS gGroundId,   
                      CASE WHEN [VehicleName] LIKE 'No vehicle' THEN 'True' ELSE 'False' END AS NotAVehicle, gradtours.Ground2Vehicle.VehicleName,   
                      gradtours.Ground2Vehicle.VehicleCapacity AS Capacity, ISNULL(gradtours.Ground2Vehicle.Deleted, 0) AS deleted, gradtours.Ground2Vehicle.TimeOfDayId,   
                      gradtours.TimeOfDay.Name AS TimeOfDayName  , gradtours.Ground2Vehicle.Capacity_new AS Capacity_new
FROM         gradtours.Ground2Vehicle INNER JOIN  
                      gradtours.TimeOfDay ON gradtours.Ground2Vehicle.TimeOfDayId = gradtours.TimeOfDay.TimeOfDayId  

|||GlobalGroundVehicle_Beta
^^^CREATE VIEW [gradtours].[GlobalGroundVehicle_Beta]
WITH SCHEMABINDING
AS
SELECT     Ground2VehicleId AS gGroundVehicleId, GroundId AS gGroundId, CASE WHEN [VehicleName] LIKE 'No vehicle' THEN 'True' ELSE 'False' END AS NotAVehicle, 
                      VehicleName, VehicleCapacity AS Capacity, ISNULL(Deleted, 0) AS deleted
FROM         gradtours.Ground2Vehicle

|||GlobalGroundVehicles_AllDetails
^^^CREATE VIEW [gradtours].[GlobalGroundVehicles_AllDetails]
AS
SELECT     gradtours.GlobalGroundVehicleVendor.gGroundVehicleId, gradtours.vendors.vendorId, gradtours.vendors.vendordisplayname, gradtours.vendors.ProviderId, 
                      gradtours.GlobalGround.GroundName, gradtours.GlobalGroundVehicleVendor.VehicleName, gradtours.GlobalGroundVehicleVendor.Capacity, 
                      gradtours.GlobalGround.PerferredDetailsProvider, gradtours.GlobalGround.gGroundId, gradtours.GlobalGroundVehicleVendor.ProviderServiceId, 
                      gradtours.GlobalGroundVehicleVendor.NotAVehicle, gradtours.GlobalGround.Deleted | ISNULL(gradtours.vendors.deleted, 0) 
                      | gradtours.GlobalGroundVehicleVendor.deleted AS deleted, gradtours.vwGroundRates.MaxPerVehicleRate, gradtours.vwGroundRates.MaxPerPersonRate, 
                      gradtours.vwGroundRates.Rate_CurrencyId, gradtours.vwGroundRates.RateTypeId, gradtours.vwGroundRates.MaximumRange, 
                      gradtours.vwGroundRates.MinimumRange, gradtours.vwGroundRates.Flat, gradtours.GlobalGroundVehicleVendor.TimeOfDayName, 
                      gradtours.GlobalGroundVehicleVendor.LocaleId, gradtours.GlobalGroundVehicleVendor.LocaleName, gradtours.GlobalGround.CategoryName, 
                      gradtours.GlobalGround.ActivityTypeName, ISNULL(gradtours.GlobalGroundVehicleVendor.IsDescriptionOnly, 0) AS IsDescriptionOnly
FROM         gradtours.GlobalGround LEFT OUTER JOIN
                      gradtours.GlobalGroundVehicleVendor ON gradtours.GlobalGround.gGroundId = gradtours.GlobalGroundVehicleVendor.GroundId LEFT OUTER JOIN
                      gradtours.vwGroundRates ON gradtours.vwGroundRates.Ground2VehicleId = gradtours.GlobalGroundVehicleVendor.gGroundVehicleId LEFT OUTER JOIN
                      gradtours.vendors ON gradtours.GlobalGroundVehicleVendor.vendorId = gradtours.vendors.vendorId

|||GlobalGroundVehicleVendor
^^^CREATE VIEW  [gradtours].[GlobalGroundVehicleVendor]
AS  
SELECT     gradtours.Ground.GroundId, gradtours.Ground2Vehicle.Ground2VehicleId AS gGroundVehicleId, gradtours.vendors.vendorId, CONVERT(varchar(50), 
                      gradtours.Ground2Vehicle.Ground2VehicleId) AS ProviderServiceId, ISNULL(gradtours.Ground.Deleted, 0) | ISNULL(gradtours.Ground2Vehicle.Deleted, 0) 
                      | ISNULL(gradtours.vendors.deleted, 0) | ISNULL(gradtours.Ground2Vendor.Deleted, 0) AS deleted, gradtours.Ground2Vehicle.VehicleName, 
                      gradtours.Ground2Vehicle.VehicleCapacity AS Capacity, 
                      CASE WHEN gradtours.Ground2Vehicle.VehicleName LIKE 'No vehicle' THEN 'True' ELSE 'False' END AS NotAVehicle, gradtours.Currency.Symbol, 
                      gradtours.vendors.vendorName, gradtours.TimeOfDay.Name AS TimeOfDayName, gradtours.Ground.LocaleId, gradtours.Locale.Name AS LocaleName, 
                      gradtours.Ground2Vendor.IsDescriptionOnly,gradtours.Ground2Vendor.IsActive
FROM         gradtours.Ground INNER JOIN
                      gradtours.Ground2Vendor ON gradtours.Ground.GroundId = gradtours.Ground2Vendor.GroundId INNER JOIN
                      gradtours.vendors INNER JOIN
                      gradtours.Vendor2RateType INNER JOIN
                      gradtours.Ground2Vehicle ON gradtours.Vendor2RateType.Vendor2RateTypeId = gradtours.Ground2Vehicle.Vendor2RateTypeId ON 
                      gradtours.vendors.vendorId = gradtours.Vendor2RateType.VendorId INNER JOIN
                      gradtours.Currency ON gradtours.vendors.DefaultCurrencyId = gradtours.Currency.CurrencyId INNER JOIN
                      gradtours.TimeOfDay ON gradtours.Ground2Vehicle.TimeOfDayId = gradtours.TimeOfDay.TimeOfDayId ON 
                      gradtours.Ground2Vendor.VendorId = gradtours.vendors.vendorId AND gradtours.Ground.GroundId = gradtours.Ground2Vehicle.GroundId LEFT OUTER JOIN
                      gradtours.Locale ON gradtours.Ground.LocaleId = gradtours.Locale.LocaleId

|||GlobalGroundVehicleVendor_Backup
^^^CREATE VIEW [gradtours].[GlobalGroundVehicleVendor_Backup]
AS
SELECT     gradtours.Ground.GroundId, gradtours.Ground2Vehicle.Ground2VehicleId AS gGroundVehicleId, gradtours.vendors.vendorId, CONVERT(varchar(50), 
                      gradtours.Ground2Vehicle.Ground2VehicleId) AS ProviderServiceId, ISNULL(gradtours.Ground.Deleted, 0) | ISNULL(gradtours.Ground2Vehicle.Deleted, 0) 
                      | gradtours.Vendor2RateType.Deleted | ISNULL(gradtours.Ground2Vendor.Deleted, 0) | ISNULL(gradtours.vendors.deleted, 0) AS deleted, 
                      gradtours.Ground2Vehicle.VehicleName, gradtours.Ground2Vehicle.VehicleCapacity AS Capacity, 
                      CASE WHEN gradtours.Ground2Vehicle.VehicleName LIKE 'No vehicle' THEN 'True' ELSE 'False' END AS NotAVehicle, gradtours.Currency.Symbol, 
                      gradtours.vendors.vendorName
FROM         gradtours.Currency INNER JOIN
                      gradtours.Vendor2RateType INNER JOIN
                      gradtours.vendors INNER JOIN
                      gradtours.Ground2Vendor ON gradtours.vendors.vendorId = gradtours.Ground2Vendor.VendorId ON 
                      gradtours.Vendor2RateType.VendorId = gradtours.vendors.vendorId ON gradtours.Currency.CurrencyId = gradtours.vendors.DefaultCurrencyId INNER JOIN
                      gradtours.Ground2Vehicle ON gradtours.Ground2Vehicle.Vendor2RateTypeId = gradtours.Vendor2RateType.Vendor2RateTypeId RIGHT OUTER JOIN
                      gradtours.Ground ON gradtours.Ground2Vendor.GroundId = gradtours.Ground.GroundId AND gradtours.Ground2Vehicle.GroundId = gradtours.Ground.GroundId

|||GlobalGroundVehicleVendor_WithGround2Vendor
^^^CREATE VIEW [gradtours].[GlobalGroundVehicleVendor_WithGround2Vendor]
AS
SELECT     gradtours.Ground.GroundId, gradtours.Ground2Vehicle.Ground2VehicleId AS gGroundVehicleId, gradtours.vendors.vendorId, CONVERT(varchar(50), 
                      gradtours.Ground2Vehicle.Ground2VehicleId) AS ProviderServiceId, ISNULL(gradtours.Ground.Deleted, 0) | ISNULL(gradtours.Ground2Vehicle.Deleted, 0) 
                      | gradtours.Vendor2RateType.Deleted | ISNULL(gradtours.Ground2Vendor.Deleted, 0) | ISNULL(gradtours.vendors.deleted, 0) AS deleted, 
                      gradtours.Ground2Vehicle.VehicleName, gradtours.Ground2Vehicle.VehicleCapacity AS Capacity, 
                      CASE WHEN gradtours.Ground2Vehicle.VehicleName LIKE 'No vehicle' THEN 'True' ELSE 'False' END AS NotAVehicle, gradtours.Currency.Symbol, 
                      gradtours.vendors.vendorName, gradtours.TimeOfDay.Name AS TimeOfDayName
FROM         gradtours.vendors INNER JOIN
                      gradtours.Ground2Vendor ON gradtours.vendors.vendorId = gradtours.Ground2Vendor.VendorId INNER JOIN
                      gradtours.Vendor2RateType INNER JOIN
                      gradtours.Ground2Vehicle ON gradtours.Vendor2RateType.Vendor2RateTypeId = gradtours.Ground2Vehicle.Vendor2RateTypeId ON 
                      gradtours.vendors.vendorId = gradtours.Vendor2RateType.VendorId INNER JOIN
                      gradtours.Currency ON gradtours.vendors.DefaultCurrencyId = gradtours.Currency.CurrencyId INNER JOIN
                      gradtours.TimeOfDay ON gradtours.Ground2Vehicle.TimeOfDayId = gradtours.TimeOfDay.TimeOfDayId RIGHT OUTER JOIN
                      gradtours.Ground ON gradtours.Ground2Vendor.GroundId = gradtours.Ground.GroundId AND gradtours.Ground2Vehicle.GroundId = gradtours.Ground.GroundId

|||GlobalHotelRooms_AllDetails
^^^CREATE VIEW [gradtours].[GlobalHotelRooms_AllDetails]
AS
SELECT     gradtours.vendors.ProviderId, gradtours.vendors.vendorId, gradtours.vendors.vendordisplayname, gradtours.GlobalHotelRoom.RoomName, 
                      gradtours.GlobalHotel.Name AS HotelName, gradtours.GlobalHotel.gHotelId, gradtours.GlobalHotelRoom.gHotelRoomId, 
                      gradtours.GlobalHotel.PerferredDetailsProvider, gradtours.vendors.DefaultCurrencyId, gradtours.vwMinmaxhotelrate.Rate_CurrencyId, 
                      gradtours.vwMinmaxhotelrate.minRate, gradtours.vwMinmaxhotelrate.maxrate, gradtours.GlobalHotelRoomVendor.providerServiceId, gradtours.GlobalHotel.LocaleId, 
                      gradtours.Locale.Name AS LocaleName, gradtours.Category.Display AS CategoryName, ISNULL(gradtours.GlobalHotelRoomVendor.IsDescriptionOnly, 0) 
                      AS IsDescriptionOnly, gradtours.GlobalHotel.IncludedFeatures, gradtours.Locale.IsGlobal AS localeisglobal, gradtours.vwMinmaxhotelrate.IsTriple, 
                      gradtours.GlobalHotel.IsActive
FROM         gradtours.GlobalHotel INNER JOIN
                      gradtours.Locale ON gradtours.GlobalHotel.LocaleId = gradtours.Locale.LocaleId INNER JOIN
                      gradtours.Category ON gradtours.GlobalHotel.CategoryId = gradtours.Category.CategoryId RIGHT OUTER JOIN
                      gradtours.GlobalHotelRoom ON gradtours.GlobalHotel.gHotelId = gradtours.GlobalHotelRoom.gHotelId LEFT OUTER JOIN
                      gradtours.vendors INNER JOIN
                      gradtours.GlobalHotelRoomVendor ON gradtours.vendors.vendorId = gradtours.GlobalHotelRoomVendor.VendorId ON 
                      gradtours.GlobalHotelRoom.gHotelRoomId = gradtours.GlobalHotelRoomVendor.gHotelRoomId LEFT OUTER JOIN
                      gradtours.vwMinmaxhotelrate ON gradtours.vendors.vendorId = gradtours.vwMinmaxhotelrate.VendorId AND 
                      gradtours.GlobalHotelRoomVendor.gHotelRoomId = gradtours.vwMinmaxhotelrate.gHotelRoomId
WHERE     (gradtours.GlobalHotelRoomVendor.Deleted = 0 OR
                      gradtours.GlobalHotelRoomVendor.Deleted IS NULL) AND (gradtours.GlobalHotelRoom.Deleted = 0 OR
                      gradtours.GlobalHotelRoom.Deleted IS NULL) AND (gradtours.GlobalHotel.Deleted = 0 OR
                      gradtours.GlobalHotel.Deleted IS NULL) AND (gradtours.vendors.deleted = 0 OR
                      gradtours.vendors.deleted IS NULL) AND (gradtours.GlobalHotel.IsActive = 1)

|||GlobalService_Ground
^^^-- =============================================
/****** Object:  View [gradtours].[GlobalService_Ground] 
Script Date: 2024-07-09 11:01:33 AM ******/
/****** Updated By: Tamal Kanti Dey.  ********/
/****** Note: Rate_CurrencyId is linked to vendors DefaultCurrencyId ******/
-- =============================================
CREATE       VIEW [gradtours].[GlobalService_Ground]
AS
SELECT gradtours.ServiceDescription.GlobalServiceId,
					  (CASE WHEN DATEDIFF(DAY, gradtours.ServiceDescription.DateCreated, SYSDATETIME()) > 30 THEN gradtours.ServiceDescription.QuoteServiceName ELSE CONCAT(gradtours.ServiceDescription.QuoteServiceName, ' [New]') END) AS GlobalServiceName, 
                      gradtours.ServiceDescription.SourceLocaleId, gradtours.ServiceDescription.SourceLocaleName, gradtours.ServiceDescription.DestinationLocaleId, 
                      gradtours.ServiceDescription.DestinationLocaleName, gradtours.ServiceDescription.ActivityTypeName, gradtours.ServiceDescription.CategoryName, 
                      gradtours.ServiceDescription.IsDescriptionOnly, CONVERT(VARCHAR(50), gradtours.ServiceDescription.GlobalServiceId) AS providerserviceid, 
                      gradtours.vendors.vendorId, ISNULL(gradtours.Ground.Deleted, 0) | gradtours.ServiceDescription.Deleted | ISNULL(gradtours.Ground2Vehicle.Deleted, 0) AS deleted, 
                      gradtours.vendors.vendordisplayname, gradtours.vendors.ProviderId, gradtours.vendors.ApplyArbitrageFee, gradtours.vendors.HideInDropdown, 
					  gradtours.vwGroundRates.MaxPerVehicleRate, gradtours.vwGroundRates.MaxPerPersonRate, 
                      gradtours.vendors.DefaultCurrencyId as Rate_CurrencyId, gradtours.vwGroundRates.RateTypeId, gradtours.vwGroundRates.MaximumRange, 
                      gradtours.vwGroundRates.MinimumRange, gradtours.vwGroundRates.Flat, gradtours.ServiceDescription.ServiceId, gradtours.ServiceDescription.ClientServiceName, 
                      gradtours.Ground2Vehicle.VehicleCapacity AS Capacity, gradtours.ServiceDescription.ActivityTypeDisplayName, gradtours.ServiceDescription.SimpleServiceName, 
                      l0.IsGlobal AS SourceLocaleIsGlobal, l1.IsGlobal AS DestinationLocaleIsGlobal, gradtours.ServiceDescription.IsCustom, gradtours.ServiceDescription.IsActive, 
                      gradtours.ServiceDescription.IsCustomServiceDescription, gradtours.Ground2Vehicle.GroundId, gradtours.ServiceDescription.Preferred, 
                      gradtours.ServiceDescription.PreferredId, gradtours.Ground2Vehicle.IsRateOnRequest, gradtours.ServiceDescription.DateCreated
FROM         gradtours.ServiceDescription INNER JOIN
                      gradtours.vendors ON gradtours.ServiceDescription.VendorId = gradtours.vendors.vendorId INNER JOIN
                      gradtours.Ground2Vehicle ON gradtours.ServiceDescription.GlobalServiceId = gradtours.Ground2Vehicle.Ground2VehicleId INNER JOIN
                      gradtours.Ground ON gradtours.Ground2Vehicle.GroundId = gradtours.Ground.GroundId LEFT OUTER JOIN
                      gradtours.vwGroundRates ON gradtours.vwGroundRates.Ground2VehicleId = gradtours.ServiceDescription.GlobalServiceId LEFT OUTER JOIN
                      gradtours.Locale AS l0 WITH (NOLOCK) ON l0.LocaleId = ISNULL(gradtours.ServiceDescription.SourceLocaleId, 1559) LEFT OUTER JOIN
                      gradtours.Locale AS l1 WITH (NOLOCK) ON l1.LocaleId = ISNULL(gradtours.ServiceDescription.DestinationLocaleId, 1559)
WHERE     (gradtours.ServiceDescription.ServiceId = 2) AND (gradtours.ServiceDescription.IsCustom = 0) AND (gradtours.ServiceDescription.IsCustomServiceDescription = 0)

|||GlobalService_Hotel
^^^CREATE     VIEW [gradtours].[GlobalService_Hotel]
AS
SELECT gradtours.ServiceDescription.GlobalServiceId,
	   (CASE WHEN DATEDIFF(DAY, gradtours.ServiceDescription.DateCreated, SYSDATETIME()) > 30 THEN gradtours.ServiceDescription.QuoteServiceName ELSE CONCAT(gradtours.ServiceDescription.QuoteServiceName, ' [New]') END) AS GlobalServiceName, 
                      gradtours.ServiceDescription.SourceLocaleId, gradtours.ServiceDescription.SourceLocaleName, gradtours.ServiceDescription.DestinationLocaleId, 
                      gradtours.ServiceDescription.DestinationLocaleName, gradtours.ServiceDescription.ActivityTypeName, gradtours.ServiceDescription.CategoryName, 
                      gradtours.ServiceDescription.IsDescriptionOnly, gradtours.ServiceDescription.ProviderServiceId, gradtours.vendors.vendorId, 
                      gradtours.ServiceDescription.Deleted | ~ gradtours.ServiceDescription.IsActive AS deleted, gradtours.vendors.vendordisplayname, 
					  gradtours.vendors.ProviderId, gradtours.vendors.ApplyArbitrageFee, gradtours.vendors.HideInDropdown, 
                      gradtours.vwMinmaxhotelrate.Rate_CurrencyId, gradtours.vwMinmaxhotelrate.minRate, gradtours.vwMinmaxhotelrate.maxrate, 
                      gradtours.ServiceDescription.ServiceId, gradtours.ServiceDescription.ClientServiceName, gradtours.ServiceDescription.SimpleServiceName, 
                      gradtours.ServiceDescription.ActivityTypeDisplayName, gradtours.ServiceDescription.Preferred,
                          (SELECT     IsGlobal
                            FROM          gradtours.Locale
                            WHERE      (LocaleId = ISNULL(gradtours.ServiceDescription.SourceLocaleId, 1559))) AS SourceLocaleIsGlobal,
                          (SELECT     IsGlobal
                            FROM          gradtours.Locale AS Locale_1
                            WHERE      (LocaleId = ISNULL(gradtours.ServiceDescription.DestinationLocaleId, 1559))) AS DestinationLocaleIsGlobal, gradtours.ServiceDescription.IsCustom, 
                      gradtours.ServiceDescription.IsActive, gradtours.ServiceDescription.IsCustomServiceDescription, gradtours.vwMinmaxhotelrate.IsTriple, 
                      gradtours.ServiceDescription.ServiceDescriptionId, gradtours.ServiceDescription.PreferredId, isnull(gradtours.vwMinmaxhotelrate.IsRateOnRequest,0) as IsRateOnRequest
FROM         gradtours.vendors INNER JOIN
                      gradtours.ServiceDescription ON gradtours.vendors.vendorId = gradtours.ServiceDescription.VendorId LEFT OUTER JOIN
                      gradtours.vwMinmaxhotelrate ON gradtours.ServiceDescription.GlobalServiceId = gradtours.vwMinmaxhotelrate.gHotelRoomId AND 
                      gradtours.vwMinmaxhotelrate.VendorId = gradtours.ServiceDescription.VendorId
WHERE     (gradtours.ServiceDescription.ServiceId = 1) AND (gradtours.ServiceDescription.IsCustom = 0) AND (gradtours.ServiceDescription.IsCustomServiceDescription = 0)

|||GlobalService_Hotel_Hints
^^^CREATE   VIEW [gradtours].[GlobalService_Hotel_Hints]
AS
SELECT     sd.GlobalServiceId, sd.QuoteServiceName AS GlobalServiceName, sd.SourceLocaleId, sd.SourceLocaleName, sd.DestinationLocaleId, sd.DestinationLocaleName, 
                      sd.ActivityTypeName, sd.CategoryName, sd.IsDescriptionOnly, sd.ProviderServiceId, gradtours.vendors.vendorId, sd.Deleted, 
					  gradtours.vendors.vendordisplayname, gradtours.vendors.ApplyArbitrageFee, gradtours.vendors.HideInDropdown, 
                      gradtours.vendors.ProviderId, hr.Rate_CurrencyId, hr.minRate, hr.maxrate, sd.ServiceId, sd.ClientServiceName, sd.SimpleServiceName, sd.ActivityTypeDisplayName, 
                      sd.Preferred,
                          (SELECT     IsGlobal
                            FROM          gradtours.Locale
                            WHERE      (LocaleId = ISNULL(sd.SourceLocaleId, 1559))) AS SourceLocaleIsGlobal,
                          (SELECT     IsGlobal
                            FROM          gradtours.Locale AS Locale_1
                            WHERE      (LocaleId = ISNULL(sd.DestinationLocaleId, 1559))) AS DestinationLocaleIsGlobal, sd.IsCustom, sd.IsActive, sd.IsCustomServiceDescription, hr.IsTriple, 
                      sd.ServiceDescriptionId, sd.PreferredId
FROM         gradtours.vendors INNER JOIN
                      gradtours.ServiceDescription AS sd WITH (INDEX (IX_ServiceDescription_SourceLocaleId))ON 
                      gradtours.vendors.vendorId = sd.VendorId LEFT OUTER JOIN
                      gradtours.vwMinmaxhotelrate_Hints AS hr ON sd.GlobalServiceId = hr.gHotelRoomId AND hr.VendorId = sd.VendorId
WHERE     (sd.ServiceId = 1) AND (sd.IsCustom = 0) AND (sd.IsCustomServiceDescription = 0)

|||GlobalService_Transport
^^^CREATE     VIEW [gradtours].[GlobalService_Transport]
AS
SELECT gradtours.ServiceDescription.GlobalServiceId, 
		(CASE WHEN DATEDIFF(DAY, gradtours.ServiceDescription.DateCreated, SYSDATETIME()) > 30 THEN gradtours.ServiceDescription.QuoteServiceName ELSE CONCAT(gradtours.ServiceDescription.QuoteServiceName, ' [New]') END) AS GlobalServiceName,
                      gradtours.ServiceDescription.SourceLocaleId, gradtours.ServiceDescription.SourceLocaleName, gradtours.ServiceDescription.DestinationLocaleId, 
                      gradtours.ServiceDescription.DestinationLocaleName, gradtours.ServiceDescription.ActivityTypeName, gradtours.ServiceDescription.CategoryName, 
                      gradtours.ServiceDescription.IsDescriptionOnly, CONVERT(varchar(50), gradtours.ServiceDescription.GlobalServiceId) AS providerserviceid, 
                      gradtours.vendors.vendorId, ISNULL(gradtours.TransportCategory.Deleted, 0) | ISNULL(gradtours.vendors.deleted, 0) 
                      | gradtours.ServiceDescription.Deleted AS deleted, gradtours.vendors.vendordisplayname, gradtours.vendors.ProviderId, gradtours.vendors.ApplyArbitrageFee, 
					  gradtours.vendors.HideInDropdown, gradtours.vwTransportRates.PerPerson, 
                      gradtours.vwTransportRates.PerVehicle, gradtours.vwTransportRates.Flat, gradtours.vwTransportRates.MinimumRange, gradtours.vwTransportRates.MaximumRange,
                       gradtours.vwTransportRates.CurrencyId, gradtours.vwTransportRates.RateTypeId, gradtours.ServiceDescription.ServiceId, 
                      gradtours.ServiceDescription.ClientServiceName, gradtours.TransportCategory.TransportCapacity AS Capacity, 
                      gradtours.ServiceDescription.ActivityTypeDisplayName, gradtours.ServiceDescription.SimpleServiceName, gradtours.ServiceDescription.Preferred,
                          (SELECT     IsGlobal
                            FROM          gradtours.Locale
                            WHERE      (LocaleId = ISNULL(gradtours.ServiceDescription.SourceLocaleId, 1559))) AS SourceLocaleIsGlobal,
                          (SELECT     IsGlobal
                            FROM          gradtours.Locale AS Locale_1
                            WHERE      (LocaleId = ISNULL(gradtours.ServiceDescription.DestinationLocaleId, 1559))) AS DestinationLocaleIsGlobal, gradtours.ServiceDescription.IsCustom, 
                      gradtours.ServiceDescription.IsActive, gradtours.ServiceDescription.IsCustomServiceDescription, gradtours.ServiceDescription.PreferredId, gradtours.TransportCategory.IsRateOnRequest
FROM         gradtours.ServiceDescription INNER JOIN
                      gradtours.TransportCategory ON gradtours.ServiceDescription.GlobalServiceId = gradtours.TransportCategory.TransportCategoryId INNER JOIN
                      gradtours.vendors ON gradtours.ServiceDescription.VendorId = gradtours.vendors.vendorId LEFT OUTER JOIN
                      gradtours.vwTransportRates ON gradtours.vwTransportRates.transportCategoryId = gradtours.ServiceDescription.GlobalServiceId
WHERE     (gradtours.ServiceDescription.ServiceId = 3) AND (gradtours.ServiceDescription.IsCustom = 0) AND (gradtours.ServiceDescription.IsCustomServiceDescription = 0)

|||GlobalTransport
^^^CREATE VIEW [gradtours].[GlobalTransport]
AS
SELECT     gradtours.Air.Name AS TransportName, gradtours.Air.AirId AS gTransportId, 1 AS transportTypeId, SourceLocaleTable.CustomCode AS sourceIsoCountryCode, 
                      DestinationLocaleTable.CustomCode AS destinationIsoCountryCode, RTRIM(SourceLocaleTable.Prefix) AS sourceKTCountryCode, gradtours.Air.Alerts, 
                      RTRIM(DestinationLocaleTable.Prefix) AS destinationKTCountryCode, ISNULL(gradtours.Air.Deleted, 0) AS Deleted, gradtours.Air.ActivityTypeId, gradtours.Air.Code, 
                      gradtours.Air.Name, gradtours.Air.Duration, gradtours.Air.SourceLocaleId, gradtours.Air.DestinationLocaleId, SourceLocaleTable.Name AS sourceLocaleName, 
                      DestinationLocaleTable.Name AS destinationLocaleName, gradtours.Category.Display AS CategoryName, gradtours.ActivityType.Name AS ActivityTypeName, 
                      gradtours.ActivityType.DisplayName AS ActivityTypeDisplayName
FROM         gradtours.Air INNER JOIN
                      gradtours.Locale AS SourceLocaleTable ON gradtours.Air.SourceLocaleId = SourceLocaleTable.LocaleId INNER JOIN
                      gradtours.Locale AS DestinationLocaleTable ON gradtours.Air.DestinationLocaleId = DestinationLocaleTable.LocaleId INNER JOIN
                      gradtours.Category ON gradtours.Air.CategoryId = gradtours.Category.CategoryId INNER JOIN
                      gradtours.ActivityType ON gradtours.Air.ActivityTypeId = gradtours.ActivityType.ActivityTypeId

|||GlobalTransport_
^^^CREATE VIEW [gradtours].[GlobalTransport_]
AS
SELECT     gradtours.Air.SourceLocationId, gradtours.Air.DestinationLocationId, gradtours.Air.Description AS TransportName, gradtours.Air.AirId AS gTransportId, 
                      1 AS transportTypeId, gradtours.Country.ISOCountryCode AS sourceIsoCountryCode, Country_1.ISOCountryCode AS destinationIsoCountryCode, 
                      gradtours.Location.Name AS sourceLocationName, Location_1.Name AS destinationLocationName, RTRIM(gradtours.Country.Prefix) + RTRIM(gradtours.Region.Prefix) 
                      AS sourceKTCountryCode, gradtours.Air.Alerts, RTRIM(Region_1.Prefix) + RTRIM(Country_1.Prefix) AS destinationKTCountryCode, ISNULL(gradtours.Air.Deleted, 0) 
                      AS Deleted
FROM         gradtours.Air INNER JOIN
                      gradtours.Country INNER JOIN
                      gradtours.Location ON gradtours.Country.CountryId = gradtours.Location.CountryId ON gradtours.Air.SourceLocationId = gradtours.Location.LocationId INNER JOIN
                      gradtours.Location AS Location_1 INNER JOIN
                      gradtours.Country AS Country_1 ON Location_1.CountryId = Country_1.CountryId ON gradtours.Air.DestinationLocationId = Location_1.LocationId INNER JOIN
                      gradtours.Region ON gradtours.Country.RegionId = gradtours.Region.RegionId INNER JOIN
                      gradtours.Region AS Region_1 ON Country_1.RegionId = Region_1.RegionId
WHERE     (ISNULL(gradtours.Air.Deleted, 0) = 0)

|||GlobalTransport_AllDetails
^^^CREATE VIEW [gradtours].[GlobalTransport_AllDetails]
AS
SELECT     gradtours.GlobalTransport.gTransportId, gradtours.GlobalTransport.sourceIsoCountryCode, gradtours.GlobalTransport.destinationIsoCountryCode, 
                      gradtours.GlobalTransport.destinationKTCountryCode, gradtours.GlobalTransport.Alerts, gradtours.GlobalTransport.sourceKTCountryCode, 
                      gradtours.GlobalTransport.TransportName, gradtours.GlobalTransportCategoryVendor.gTransportCategoryId, 
                      gradtours.GlobalTransportCategoryVendor.providerServiceId, gradtours.GlobalTransportCategoryVendor.ProviderId, 
                      gradtours.GlobalTransportCategoryVendor.VendorId, gradtours.GlobalTransportCategoryVendor.vendordisplayname, 
                      gradtours.GlobalTransportCategoryVendor.Name AS TransportCategoryName, gradtours.vwTransportRates.PerPerson, gradtours.vwTransportRates.PerVehicle, 
                      gradtours.vwTransportRates.Flat, gradtours.vwTransportRates.MinimumRange, gradtours.vwTransportRates.MaximumRange, 
                      gradtours.vwTransportRates.CurrencyId, gradtours.vwTransportRates.RateTypeId, 
                      gradtours.GlobalTransport.Deleted | gradtours.GlobalTransportCategoryVendor.Deleted AS deleted, gradtours.GlobalTransportCategoryVendor.Capacity, 
                      gradtours.GlobalTransportCategoryVendor.Symbol, gradtours.GlobalTransportCategoryVendor.IsDescriptionOnly, 
                      gradtours.GlobalTransportCategoryVendor.TimeOfDayName, gradtours.GlobalTransport.SourceLocaleId, gradtours.GlobalTransport.DestinationLocaleId, 
                      gradtours.GlobalTransport.sourceLocaleName, gradtours.GlobalTransport.destinationLocaleName, gradtours.GlobalTransport.CategoryName, 
                      gradtours.GlobalTransport.ActivityTypeName, gradtours.GlobalTransportCategoryVendor.NotAVehicle
FROM         gradtours.GlobalTransportCategoryVendor LEFT OUTER JOIN
                      gradtours.vwTransportRates ON 
                      gradtours.GlobalTransportCategoryVendor.gTransportCategoryId = gradtours.vwTransportRates.transportCategoryId RIGHT OUTER JOIN
                      gradtours.GlobalTransport ON gradtours.GlobalTransportCategoryVendor.AirId = gradtours.GlobalTransport.gTransportId

|||GlobalTransport_AllDetails_
^^^CREATE VIEW [gradtours].[GlobalTransport_AllDetails_]
AS
SELECT     gradtours.GlobalTransport.gTransportId, gradtours.GlobalTransportOption.gTransportOptionId, gradtours.GlobalTransportOptionCategory.gTransportOptionCategoryId, 
                      gradtours.vendors.vendorId, gradtours.GlobalTransportOptionCategoryVendor.ProviderServiceId, gradtours.GlobalTransport.SourceLocationId, 
                      gradtours.GlobalTransport.DestinationLocationId, gradtours.GlobalTransport.TransportName, gradtours.GlobalTransportOption.DepartTime, 
                      gradtours.GlobalTransportOption.Duration, gradtours.GlobalTransportOption.TransportCode, gradtours.GlobalTransportOption.StopOver, 
                      gradtours.vendors.vendordisplayname, gradtours.GlobalTransportOptionCategory.TransportCategoryName, gradtours.GlobalTransport.sourceIsoCountryCode, 
                      gradtours.GlobalTransport.destinationIsoCountryCode, gradtours.GlobalTransport.sourceLocationName, gradtours.GlobalTransport.destinationLocationName, 
                      gradtours.vendors.ProviderId, gradtours.GlobalTransport.Alerts, gradtours.GlobalTransport.sourceKTCountryCode, 
                      gradtours.GlobalTransport.destinationKTCountryCode
FROM         gradtours.vendors INNER JOIN
                      gradtours.GlobalTransportOptionCategoryVendor ON gradtours.vendors.vendorId = gradtours.GlobalTransportOptionCategoryVendor.VendorId INNER JOIN
                      gradtours.GlobalTransport INNER JOIN
                      gradtours.GlobalTransportOption ON gradtours.GlobalTransport.gTransportId = gradtours.GlobalTransportOption.gTransportId INNER JOIN
                      gradtours.GlobalTransportOptionCategory ON gradtours.GlobalTransportOption.gTransportOptionId = gradtours.GlobalTransportOptionCategory.gTransportOptionId ON 
                      gradtours.GlobalTransportOptionCategoryVendor.gTransportOptionCategoryId = gradtours.GlobalTransportOptionCategory.gTransportOptionCategoryId

|||GlobalTransportCategory
^^^CREATE VIEW [gradtours].[GlobalTransportCategory]  
AS  
SELECT     gradtours.GlobalTransport.gTransportId, gradtours.TransportCategory.TransportCategoryId AS gTransportCategoryId, gradtours.TransportCategory.Deleted,   
                      gradtours.TransportCategory.Name AS TransportCategoryName, gradtours.TimeOfDay.Name AS TimeOfDayName,   
                      CASE WHEN gradtours.TransportCategory.Name LIKE 'No vehicle' THEN 'True' ELSE 'False' END AS NotAVehicle, gradtours.TransportCategory.TransportCapacity,   
                      gradtours.TransportCategory.TimeOfDayId, gradtours.TransportCategory.Capacity_new
FROM         gradtours.GlobalTransport INNER JOIN  
                      gradtours.TransportCategory ON gradtours.GlobalTransport.gTransportId = gradtours.TransportCategory.AirId INNER JOIN  
                      gradtours.TimeOfDay ON gradtours.TransportCategory.TimeOfDayId = gradtours.TimeOfDay.TimeOfDayId  

|||GlobalTransportCategory_
^^^CREATE VIEW [gradtours].[GlobalTransportCategory_]
AS
SELECT     gradtours.GlobalTransport.gTransportId, gradtours.TransportCategory.TransportCategoryId AS gTransportCategoryId, gradtours.TransportCategory.Deleted, 
                      gradtours.TransportCategory.Name
FROM         gradtours.GlobalTransport INNER JOIN
                      gradtours.TransportCategory ON gradtours.GlobalTransport.gTransportId = gradtours.TransportCategory.AirId

|||GlobalTransportCategoryVendor
^^^CREATE VIEW [gradtours].[GlobalTransportCategoryVendor]
AS
SELECT     gradtours.Air2Vendor.VendorId, gradtours.TransportCategory.TransportCategoryId AS gTransportCategoryId, 
                      gradtours.TransportCategory.TransportCategoryId AS providerServiceId, ISNULL(gradtours.Air.Deleted, 0) | ISNULL(gradtours.Air2Vendor.Deleted, 0) 
                      | gradtours.Vendor2RateType.Deleted | gradtours.TransportCategory.Deleted | ISNULL(gradtours.vendors.deleted, 0) AS Deleted, gradtours.Air.AirId, 
                      gradtours.vendors.vendorName, gradtours.Currency.Symbol, gradtours.TransportCategory.Name, gradtours.vendors.ProviderId, 
                      gradtours.vendors.vendordisplayname, gradtours.TransportCategory.TransportCapacity AS Capacity, gradtours.TransportCategory.TimeOfDayId, 
                      gradtours.TimeOfDay.Name AS TimeOfDayName, gradtours.Air.SourceLocaleId, gradtours.Air.DestinationLocaleId, ISNULL(gradtours.Air2Vendor.IsDescriptionOnly, 0) 
                      AS IsDescriptionOnly, CASE WHEN gradtours.TransportCategory.Name LIKE 'No vehicle' THEN 'True' ELSE 'False' END AS NotAVehicle
FROM         gradtours.TransportCategory INNER JOIN
                      gradtours.Vendor2RateType ON gradtours.TransportCategory.Vendor2RateTypeId = gradtours.Vendor2RateType.Vendor2RateTypeId INNER JOIN
                      gradtours.Air2Vendor ON gradtours.Vendor2RateType.VendorId = gradtours.Air2Vendor.VendorId INNER JOIN
                      gradtours.vendors ON gradtours.Vendor2RateType.VendorId = gradtours.vendors.vendorId INNER JOIN
                      gradtours.Currency ON gradtours.vendors.DefaultCurrencyId = gradtours.Currency.CurrencyId INNER JOIN
                      gradtours.TimeOfDay ON gradtours.TransportCategory.TimeOfDayId = gradtours.TimeOfDay.TimeOfDayId RIGHT OUTER JOIN
                      gradtours.Air ON gradtours.TransportCategory.AirId = gradtours.Air.AirId AND gradtours.Air2Vendor.AirId = gradtours.Air.AirId

|||GlobalTransportCategoryVendor_
^^^CREATE VIEW [gradtours].[GlobalTransportCategoryVendor_]
AS
SELECT     gradtours.GlobalTransportCategory.gTransportCategoryId, gradtours.Air2Vendor.VendorId, 
                      gradtours.GlobalTransportCategory.gTransportCategoryId AS providerServiceId, gradtours.GlobalTransportCategory.Deleted
FROM         gradtours.Air2Vendor INNER JOIN
                      gradtours.GlobalTransportCategory ON gradtours.Air2Vendor.AirId = gradtours.GlobalTransportCategory.gTransportId

|||GlobalTransportOption_
^^^CREATE VIEW [gradtours].[GlobalTransportOption_]
AS
SELECT     gradtours.AirAlternates.AirId AS gTransportId, gradtours.AirAlternates.AirAlternatesId AS gTransportOptionId, gradtours.AirAlternates.DepartTime, 
                      gradtours.AirAlternates.Duration, gradtours.AirAlternates.FlightNumber AS TransportCode, gradtours.AirAlternates.StopOver
FROM         gradtours.Air INNER JOIN
                      gradtours.AirAlternates ON gradtours.Air.AirId = gradtours.AirAlternates.AirId
WHERE     (gradtours.Air.Deleted IS NULL) OR
                      (gradtours.Air.Deleted = 0)

|||GlobalTransportOptionCategory_
^^^CREATE VIEW [gradtours].[GlobalTransportOptionCategory_]
AS
SELECT     gradtours.AirAlternates.AirAlternatesId AS gTransportOptionId, 
                      gradtours.AirAlternates2TransportCategory.AirAlternates2TransportCategoryId AS gTransportOptionCategoryId, 
                      gradtours.TransportCategory.Name AS TransportCategoryName
FROM         gradtours.AirAlternates INNER JOIN
                      gradtours.AirAlternates2TransportCategory ON gradtours.AirAlternates.AirAlternatesId = gradtours.AirAlternates2TransportCategory.AirAlternatesId INNER JOIN
                      gradtours.TransportCategory ON gradtours.AirAlternates2TransportCategory.TransportCategoryId = gradtours.TransportCategory.TransportCategoryId
WHERE     (gradtours.AirAlternates.Deleted = 0 OR
                      gradtours.AirAlternates.Deleted IS NULL) AND (gradtours.TransportCategory.Deleted = 0 OR
                      gradtours.TransportCategory.Deleted IS NULL)

|||GlobalTransportOptionCategory_AllCategories_
^^^CREATE VIEW [gradtours].[GlobalTransportOptionCategory_AllCategories_]
AS
SELECT     gradtours.AirAlternates.AirAlternatesId AS gTransportOptionId, 
                      gradtours.AirAlternates2TransportCategory.AirAlternates2TransportCategoryId AS gTransportOptionCategoryId, 
                      gradtours.TransportCategory.Name AS TransportCategoryName
FROM         gradtours.AirAlternates INNER JOIN
                      gradtours.AirAlternates2TransportCategory ON gradtours.AirAlternates.AirAlternatesId = gradtours.AirAlternates2TransportCategory.AirAlternatesId INNER JOIN
                      gradtours.TransportCategory ON gradtours.AirAlternates2TransportCategory.TransportCategoryId = gradtours.TransportCategory.TransportCategoryId
WHERE     (gradtours.AirAlternates.Deleted = 0 OR
                      gradtours.AirAlternates.Deleted IS NULL) AND (gradtours.TransportCategory.Deleted = 0 OR
                      gradtours.TransportCategory.Deleted IS NULL)

|||GlobalTransportOptionCategory_InclDeleted_
^^^CREATE VIEW [gradtours].[GlobalTransportOptionCategory_InclDeleted_]
AS
SELECT DISTINCT 
                      gradtours.AirAlternates.AirAlternatesId AS gTransportOptionId, 
                      gradtours.AirAlternates2TransportCategory.AirAlternates2TransportCategoryId AS gTransportOptionCategoryId, 
                      gradtours.TransportCategory.Name AS TransportCategoryName, (((CASE airratestypeid WHEN 1 THEN 1 ELSE 0 END & gradtours.AirAlternates.ShowEconomy) 
                      | (CASE airratestypeid WHEN 2 THEN 1 ELSE 0 END & gradtours.AirAlternates.ShowBusiness)) 
                      | (CASE airratestypeid WHEN 3 THEN 1 ELSE 0 END & gradtours.AirAlternates.ShowFirst) ^ 1) | (ISNULL(gradtours.AirAlternates.Deleted, 0) 
                      ^ ISNULL(gradtours.TransportCategory.Deleted, 0) ^ ISNULL(gradtours.Air.Deleted, 0)) AS Deleted
FROM         gradtours.AirAlternates INNER JOIN
                      gradtours.AirAlternates2TransportCategory ON gradtours.AirAlternates.AirAlternatesId = gradtours.AirAlternates2TransportCategory.AirAlternatesId INNER JOIN
                      gradtours.TransportCategory ON gradtours.AirAlternates2TransportCategory.TransportCategoryId = gradtours.TransportCategory.TransportCategoryId INNER JOIN
                      gradtours.Air ON gradtours.AirAlternates.AirId = gradtours.Air.AirId

|||GlobalTransportOptionCategoryVendor_
^^^CREATE VIEW [gradtours].[GlobalTransportOptionCategoryVendor_]
AS
SELECT     gradtours.AirAlternates2TransportCategory.AirAlternates2TransportCategoryId AS gTransportOptionCategoryId, gradtours.Air2Vendor.VendorId, 
                      gradtours.AirAlternates2TransportCategory.AirAlternates2TransportCategoryId AS ProviderServiceId
FROM         gradtours.Air2Vendor INNER JOIN
                      gradtours.AirAlternates INNER JOIN
                      gradtours.AirAlternates2TransportCategory ON gradtours.AirAlternates.AirAlternatesId = gradtours.AirAlternates2TransportCategory.AirAlternatesId ON 
                      gradtours.Air2Vendor.AirId = gradtours.AirAlternates.AirId

|||GroundRateVendors
^^^CREATE VIEW [gradtours].[GroundRateVendors]
AS
SELECT     gradtours.GlobalGroundVehicleVendor.gGroundVehicleId, gradtours.vendors.vendorId, gradtours.vendors.vendordisplayname, gradtours.vendors.ProviderId
FROM         gradtours.GlobalGroundVehicleVendor LEFT OUTER JOIN
                      gradtours.vendors ON gradtours.GlobalGroundVehicleVendor.vendorId = gradtours.vendors.vendorId

|||GroundServiceSeason
^^^CREATE VIEW [gradtours].[GroundServiceSeason]
AS  
SELECT     gradtours.Rate.RateId, gradtours.Rate.ServiceId, gradtours.Rate.RateTypeId, gradtours.Rate.PerPerson, gradtours.Rate.PerVehicle, gradtours.Rate.Flat, 
                      gradtours.Ground2Vendor.VendorId, gradtours.Ground2Vendor.ServiceRateTypeId, gradtours.GroundRates.GroundSeasonId AS SeasonId, 
                      ISNULL(gradtours.GroundRates.Deleted, 0) | gradtours.Rate.Deleted | ISNULL(gradtours.GroundSeason.Deleted, 0) | ISNULL(gradtours.Ground2Vendor.Deleted, 0) 
                      | ISNULL(gradtours.GroundSeasonDates.Deleted, 0) AS Deleted, gradtours.GroundSeasonDates.SeasonStartDate AS StartDate, 
                      gradtours.GroundSeasonDates.SeasonEndDate AS EndDate, gradtours.GroundSeason.Name, gradtours.GroundSeason.CurrencyId, 
                      gradtours.GroundRates.Ground2VehicleId AS GlobalServiceId, gradtours.GroundRates.Ground2VehicleId AS ProviderServiceId, NULL AS SubItemId, NULL 
                      AS RateStructureSetupId, gradtours.Rate.RateSetupId, NULL AS AdultCapacity, NULL AS MaxKidCapacity, NULL AS MaxKidAge
FROM         gradtours.GroundRates INNER JOIN
                      gradtours.GroundSeason ON gradtours.GroundRates.GroundSeasonId = gradtours.GroundSeason.GroundSeasonId AND 
                      gradtours.GroundRates.GroundId = gradtours.GroundSeason.GroundId INNER JOIN
                      gradtours.Rate ON gradtours.GroundRates.RateId = gradtours.Rate.RateId AND gradtours.GroundRates.RateId = gradtours.Rate.RateId INNER JOIN
                      gradtours.Ground2Vendor ON gradtours.GroundSeason.VendorId = gradtours.Ground2Vendor.VendorId AND 
                      gradtours.GroundSeason.GroundId = gradtours.Ground2Vendor.GroundId INNER JOIN
                      gradtours.GroundSeasonDates ON gradtours.GroundSeason.GroundSeasonId = gradtours.GroundSeasonDates.GroundSeasonId
WHERE     (gradtours.GroundRates.GroundRatesTypesId = 1)

|||GroundVendorVehicle
^^^CREATE VIEW [gradtours].[GroundVendorVehicle]
AS
SELECT     CASE gradtours.Ground.locationid WHEN 839 THEN ltrim(rtrim(gradtours.ground.name)) ELSE ltrim(rtrim(ActivityType.Name)) 
                      + ' - ' + LTRIM(RTRIM(gradtours.Region.Prefix)) + LTRIM(RTRIM(gradtours.Country.Prefix)) + '-' + LTRIM(RTRIM(gradtours.Location.Name)) 
                      + ': ' + LTRIM(RTRIM(gradtours.Ground.Name)) END AS link, gradtours.Ground.GroundId, gradtours.Ground.Name AS groundName, 
                      gradtours.GlobalGroundVehicleVendor.vendorName + ' (' + gradtours.GlobalGroundVehicleVendor.Symbol + ')' AS vendorName, 
                      gradtours.GlobalGroundVehicleVendor.VehicleName AS vehicleType, gradtours.GlobalGroundVehicleVendor.Capacity AS VehicleCapacity, gradtours.Ground.LocationId, 
                      gradtours.GlobalGroundVehicleVendor.gGroundVehicleId AS vId, gradtours.GlobalGroundVehicleVendor.gGroundVehicleId AS ground2vehicleId, 
                      gradtours.Ground.Markup, gradtours.Ground.IsDescriptionOnly, gradtours.GlobalGroundVehicleVendor.vendorId, 
                      ISNULL(gradtours.vwGroundRates.MaxPerVehicleRate, 0) AS PerVehicle, ISNULL(gradtours.vwGroundRates.MaxPerPersonRate, 0) AS PerPerson
FROM         gradtours.Location INNER JOIN
                      gradtours.Country ON gradtours.Location.CountryId = gradtours.Country.CountryId INNER JOIN
                      gradtours.Region ON gradtours.Country.RegionId = gradtours.Region.RegionId INNER JOIN
                      gradtours.Ground ON gradtours.Location.LocationId = gradtours.Ground.LocationId INNER JOIN
                      gradtours.GlobalGroundVehicleVendor ON gradtours.Ground.GroundId = gradtours.GlobalGroundVehicleVendor.GroundId INNER JOIN
                      gradtours.ActivityType ON gradtours.Ground.ActivityTypeId = gradtours.ActivityType.ActivityTypeId AND 
                      gradtours.Ground.ActivityTypeId = gradtours.ActivityType.ActivityTypeId LEFT OUTER JOIN
                      gradtours.vwGroundRates ON gradtours.GlobalGroundVehicleVendor.gGroundVehicleId = gradtours.vwGroundRates.Ground2VehicleId
WHERE     (gradtours.GlobalGroundVehicleVendor.deleted = 0)

|||GroupTraveler
^^^CREATE VIEW [gradtours].[GroupTraveler]
AS
	SELECT TOP (100) PERCENT
		t.travelerId
		, c.FirstName
		, c.MiddleName
		, c.LastName
		, c.DateOfBirth
		, c.Age
		, t.clientid
		, t.arrivalFlight
		, t.departFlight
		, g.GroupId
		, g.ItineraryId
		, t.VisasObtained
		, t.Release
		, t.Cancelled
		, g.IsDefault
		, g.ParentGroupId
		, c.Deleted | t.deleted | t2g.Deleted | g.Deleted AS deleted
		, t2g.TravelerOrder
		, g.GroupOrder
		, t.InCountryContactNo
		, t.QuotedTravelerId
		, t.ReleaseDate
		, t.tripid
		, t.TRAMSPassengerNum
		, t.SystemOfRecordId
		, t.ArrivalFlightSORId
		, t.DepartureFlightSORId
		, t.diet, t.mobility, t.health
		, t.Email
	FROM
		gradtours.[Group] g
		INNER JOIN gradtours.Traveler2Group t2g ON g.GroupId = t2g.GroupId
		RIGHT OUTER JOIN gradtours.traveler t
		INNER JOIN gradtours.Client c ON t.clientid = c.ClientId ON t2g.TravelerId = t.travelerId
	WHERE
		(c.Deleted | t.deleted | t2g.Deleted | g.Deleted = 0)

|||HotelRateVendors
^^^CREATE VIEW [gradtours].[HotelRateVendors]
AS
SELECT     gradtours.GlobalHotel.Name AS HotelName, gradtours.GlobalHotelRoom.RoomName, gradtours.GlobalHotelRoomVendor.VendorId, gradtours.vendors.vendorName, 
                      gradtours.GlobalProvider.ProviderId, gradtours.GlobalProvider.Name, gradtours.GlobalHotelRoomVendor.gHotelRoomId, gradtours.GlobalHotel.gHotelId, 
                      gradtours.GlobalHotelRoomVendor.gHotelRoomVendorId, gradtours.vendors.vendordisplayname
FROM         gradtours.GlobalHotel INNER JOIN
                      gradtours.GlobalHotelRoom ON gradtours.GlobalHotel.gHotelId = gradtours.GlobalHotelRoom.gHotelId INNER JOIN
                      gradtours.GlobalHotelRoomVendor ON gradtours.GlobalHotelRoom.gHotelRoomId = gradtours.GlobalHotelRoomVendor.gHotelRoomId INNER JOIN
                      gradtours.vendors ON gradtours.GlobalHotelRoomVendor.VendorId = gradtours.vendors.vendorId INNER JOIN
                      gradtours.GlobalProvider ON gradtours.vendors.ProviderId = gradtours.GlobalProvider.ProviderId

|||HotelRateVendors_NoGlobalId
^^^CREATE VIEW [gradtours].[HotelRateVendors_NoGlobalId]
AS
SELECT     gradtours.Hotel.Name AS HotelName, gradtours.HotelRoomCategory2Vendor.Name AS RoomName, gradtours.HotelRoomCategory2Vendor.VendorId, 
                      gradtours.vendors.vendorName, gradtours.GlobalProvider.ProviderId, gradtours.GlobalProvider.Name, NULL AS gHotelId, NULL AS gHotelRoomId, NULL 
                      AS gHotelRoomVendorId, gradtours.HotelRoomCategory2Vendor.HotelRoomCategoryId, gradtours.HotelRoomCategory2Vendor.HotelRoomCategory2VendorId, 
                      gradtours.vendors.vendordisplayname
FROM         gradtours.HotelRoomCategory INNER JOIN
                      gradtours.Hotel ON gradtours.HotelRoomCategory.HotelId = gradtours.Hotel.HotelId INNER JOIN
                      gradtours.vendors INNER JOIN
                      gradtours.GlobalProvider ON gradtours.vendors.ProviderId = gradtours.GlobalProvider.ProviderId INNER JOIN
                      gradtours.HotelRoomCategory2Vendor ON gradtours.vendors.vendorId = gradtours.HotelRoomCategory2Vendor.VendorId ON 
                      gradtours.HotelRoomCategory.HotelRoomCategoryId = gradtours.HotelRoomCategory2Vendor.HotelRoomCategoryId
WHERE     (gradtours.Hotel.Deleted = 0 OR
                      gradtours.Hotel.Deleted IS NULL) AND (gradtours.HotelRoomCategory.Deleted = 0 OR
                      gradtours.HotelRoomCategory.Deleted IS NULL) AND (gradtours.HotelRoomCategory2Vendor.Deleted = 0 OR
                      gradtours.HotelRoomCategory2Vendor.Deleted IS NULL) AND (gradtours.vendors.deleted = 0 OR
                      gradtours.vendors.deleted IS NULL)

|||HotelRoomCategory_MaxSeasonEndDate
^^^CREATE VIEW [gradtours].[HotelRoomCategory_MaxSeasonEndDate]
AS
SELECT     gradtours.HotelSeasonDates.HotelId, gradtours.HotelRates.HotelRoomCategoryId, MAX(gradtours.HotelSeasonDates.SeasonEndDate) AS Max_SeasonEndDate, 
                      ISNULL(gradtours.Hotel.IsDescriptionOnly, 0) AS IsDescriptionOnly
FROM         gradtours.HotelRates INNER JOIN
                      gradtours.HotelSeasonDates ON gradtours.HotelRates.HotelId = gradtours.HotelSeasonDates.HotelId AND 
                      gradtours.HotelRates.HotelSeasonId = gradtours.HotelSeasonDates.HotelSeasonId INNER JOIN
                      gradtours.Hotel ON gradtours.HotelRates.HotelId = gradtours.Hotel.HotelId AND gradtours.HotelSeasonDates.HotelId = gradtours.Hotel.HotelId
WHERE     (ISNULL(gradtours.HotelRates.Deleted, 0) | ISNULL(gradtours.HotelSeasonDates.Deleted, 0) = 0)
GROUP BY gradtours.HotelSeasonDates.HotelId, gradtours.HotelRates.HotelRoomCategoryId, ISNULL(gradtours.Hotel.IsDescriptionOnly, 0)

|||HotelRoomCategory_MaxSeasonEndDate_OLD
^^^CREATE VIEW [gradtours].[HotelRoomCategory_MaxSeasonEndDate_OLD]
AS
SELECT     TOP (100) PERCENT hr.HotelId, hr.HotelRoomCategoryId, MAX(hsd.SeasonEndDate) AS Max_SeasonEndDate, ISNULL(h.IsDescriptionOnly, 0) 
                      AS IsDescriptionOnly
FROM         gradtours.HotelRoomCategory AS hrc INNER JOIN
                      gradtours.HotelSeasonDates AS hsd ON hsd.HotelId = hrc.HotelId AND ISNULL(hsd.Deleted, 0) = 0 INNER JOIN
                      gradtours.HotelRates AS hr ON hr.HotelRoomCategoryId = hrc.HotelRoomCategoryId AND ISNULL(hr.Deleted, 0) = 0 INNER JOIN
                      gradtours.Hotel AS h ON h.HotelId = hrc.HotelId AND ISNULL(h.Deleted, 0) = 0
WHERE     (ISNULL(hrc.Deleted, 0) = 0)
GROUP BY hr.HotelId, hr.HotelRoomCategoryId, h.IsDescriptionOnly

|||HotelRooms_AllDetails
^^^CREATE VIEW [gradtours].[HotelRooms_AllDetails]
AS
SELECT     gradtours.vendors.ProviderId, gradtours.vendors.vendorId, gradtours.vendors.vendordisplayname, gradtours.HotelRoomCategory.Name AS RoomName, 
                      gradtours.Hotel.Name AS HotelName, NULL AS gHotelId, NULL AS gHotelRoomId, '1' AS PerferredDetailsProvider, gradtours.vendors.DefaultCurrencyId, 
                      gradtours.vwMinmaxhotelrate.Rate_CurrencyId, gradtours.vwMinmaxhotelrate.minRate, gradtours.vwMinmaxhotelrate.maxrate, 
                      gradtours.HotelRoomCategory.HotelRoomCategoryId AS ProviderServiceId, gradtours.Hotel.LocaleId, gradtours.Locale.Name AS LocaleName, 
                      gradtours.Category.Display AS CategoryName, ISNULL(gradtours.Hotel2Vendor.IsDescriptionOnly, 0) AS IsDescriptionOnly, 
                      gradtours.fn_GetAccomodationRoomCategoryMeals(gradtours.HotelRoomCategory.HotelRoomCategoryId) AS IncludedFeatures, 
                      gradtours.Locale.IsGlobal AS localeisglobal, gradtours.vwMinmaxhotelrate.IsTriple, gradtours.Hotel.IsActive
FROM         gradtours.HotelRoomCategory2Vendor INNER JOIN
                      gradtours.vwMinmaxhotelrate ON 
                      gradtours.HotelRoomCategory2Vendor.HotelRoomCategoryId = gradtours.vwMinmaxhotelrate.HotelRoomCategoryId FULL OUTER JOIN
                      gradtours.Locale INNER JOIN
                      gradtours.Hotel ON gradtours.Locale.LocaleId = gradtours.Hotel.LocaleId INNER JOIN
                      gradtours.Category ON gradtours.Hotel.CategoryId = gradtours.Category.CategoryId INNER JOIN
                      gradtours.Hotel2Vendor ON gradtours.Hotel.HotelId = gradtours.Hotel2Vendor.HotelId INNER JOIN
                      gradtours.vendors ON gradtours.Hotel2Vendor.VendorId = gradtours.vendors.vendorId LEFT OUTER JOIN
                      gradtours.HotelRoomCategory ON gradtours.Hotel.HotelId = gradtours.HotelRoomCategory.HotelId ON 
                      gradtours.vwMinmaxhotelrate.VendorId = gradtours.vendors.vendorId AND 
                      gradtours.HotelRoomCategory2Vendor.HotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId AND 
                      gradtours.HotelRoomCategory2Vendor.VendorId = gradtours.vendors.vendorId
WHERE     (gradtours.vendors.deleted = 0 OR
                      gradtours.vendors.deleted IS NULL) AND (gradtours.Hotel.IsActive = 1) AND (gradtours.Hotel.Deleted = 0 OR
                      gradtours.Hotel.Deleted IS NULL) AND (gradtours.HotelRoomCategory.Deleted = 0 OR
                      gradtours.HotelRoomCategory.Deleted IS NULL) AND (gradtours.Hotel2Vendor.Deleted = 0 OR
                      gradtours.Hotel2Vendor.Deleted IS NULL) AND (gradtours.HotelRoomCategory2Vendor.Deleted = 0 OR
                      gradtours.HotelRoomCategory2Vendor.Deleted IS NULL)

|||HotelServiceSeason
^^^CREATE VIEW [gradtours].[HotelServiceSeason]
AS
SELECT     gradtours.Hotel2Vendor.VendorId, gradtours.Hotel2Vendor.ServiceRateTypeId, gradtours.HotelSeasonDates.SeasonStartDate AS StartDate, 
                      gradtours.HotelSeasonDates.SeasonEndDate AS EndDate, gradtours.HotelSeason.Name, gradtours.HotelSeason.CurrencyId, gradtours.Rate.RateId, 
                      gradtours.Rate.RateTypeId, gradtours.Rate.PerPerson, gradtours.Rate.PerVehicle, gradtours.Rate.Flat, gradtours.Rate.ServiceId, 
                      gradtours.HotelRates.HotelSeasonId AS SeasonId, gradtours.HotelRates.HotelRoomCategoryId AS ProviderServiceId, 
                      gradtours.HotelRates.gHotelRoomId AS GlobalServiceId, ISNULL(gradtours.Hotel2Vendor.Deleted, 0) | ISNULL(gradtours.HotelSeason.Deleted, 0) 
                      | ISNULL(gradtours.HotelSeasonDates.Deleted, 0) | ISNULL(gradtours.Rate.Deleted, 0) | ISNULL(gradtours.HotelRates.Deleted, 0) 
                      | ISNULL(gradtours.RateSetup.Deleted, 0) AS Deleted, gradtours.HotelRoomCategory2Vendor.RateStructureSetupId, gradtours.Rate.RateSetupId, 
                      gradtours.AccomodationRoomCategory2RoomType.RoomTypeId AS SubItemId, gradtours.HotelRoomCategory.AdultCapacity, 
                      gradtours.HotelRoomCategory.MaxKidCapacity, gradtours.HotelRoomCategory.MaxKidAge
FROM         gradtours.HotelSeason INNER JOIN
                      gradtours.HotelRates ON gradtours.HotelSeason.HotelSeasonId = gradtours.HotelRates.HotelSeasonId INNER JOIN
                      gradtours.HotelSeasonDates ON gradtours.HotelSeason.HotelSeasonId = gradtours.HotelSeasonDates.HotelSeasonId AND 
                      gradtours.HotelSeason.HotelId = gradtours.HotelSeasonDates.HotelId INNER JOIN
                      gradtours.Rate ON gradtours.HotelRates.RateId = gradtours.Rate.RateId INNER JOIN
                      gradtours.Hotel2Vendor ON gradtours.HotelSeason.HotelId = gradtours.Hotel2Vendor.HotelId AND 
                      gradtours.HotelSeason.VendorId = gradtours.Hotel2Vendor.VendorId INNER JOIN
                      gradtours.Vendor2AccomodationRoomCategoryRoomType ON 
                      gradtours.HotelRates.Vendor2AccomodationRoomCategoryRoomTypeId = gradtours.Vendor2AccomodationRoomCategoryRoomType.Vendor2AccomodationRoomCategoryRoomTypeId
                       INNER JOIN
                      gradtours.HotelRoomCategory2Vendor ON 
                      gradtours.Vendor2AccomodationRoomCategoryRoomType.HotelRoomCategory2VendorId = gradtours.HotelRoomCategory2Vendor.HotelRoomCategory2VendorId AND 
                      gradtours.HotelSeason.VendorId = gradtours.HotelRoomCategory2Vendor.VendorId INNER JOIN
                      gradtours.AccomodationRoomCategory2RoomType ON 
                      gradtours.Vendor2AccomodationRoomCategoryRoomType.AccomodationRoomCategory2RoomTypeId = gradtours.AccomodationRoomCategory2RoomType.AccomodationRoomCategory2RoomTypeId
                       INNER JOIN
                      gradtours.HotelRoomCategory ON gradtours.HotelRates.HotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId AND 
                      gradtours.HotelRoomCategory2Vendor.HotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId AND 
                      gradtours.AccomodationRoomCategory2RoomType.AccomodationRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId INNER JOIN
                      gradtours.RateSetup ON gradtours.Rate.RateSetupId = gradtours.RateSetup.RateSetupId AND 
                      gradtours.HotelRoomCategory2Vendor.HotelRoomCategory2VendorId = gradtours.RateSetup.HotelRoomCategory2VendorId

|||ItineraryAllDetails
^^^CREATE   VIEW [gradtours].[ItineraryAllDetails]
AS
SELECT        i.ItineraryId, i.Name AS tripname, i.Name, i.Code, i.AirClassId, i.IsFeatured, i.FeatureOrder, i.LandingOrder, i.ItineraryCategoryId, i.FeatureText, i.FeatureTextProduct, i.Highlights, i.CompanyKT, i.CompanyTE, i.SearchHeader, 
                         i.NumberOfDays, i.Description, i.Comparison, NULL AS expr1, NULL AS expr2, NULL AS expr3, i.ItineraryClassId, i.ItineraryTypeId, i.Comments, i.IsActive, i.ActiveCode, i.Banner, i.Map, i.Photo1, i.Photo2, i.Photo3, i.MinDouble, 
                         i.MaxDouble, i.MapSmall, NULL AS expr4, i.YearMarkup, i.Banner_IsStock, i.Banner_IsOwned, i.Image_IsStock, i.Image_IsOwned, i.Months, i.AgentMargin, i.AgentGroupName, i.AgentSgl, i.AgentDbl, i.AgentTpl, i.AgentInfant, 
                         i.AgentKids2to12, i.AgentKids13to17, i.AgentStartDate, i.IsGPS, i.CopiedFromItineraryId, iq.ItineraryStartDate, iq.ItineraryRef, iq.QuoteAgentId, iq.QuoteDate, iq.QuotedPrice, iq.QuotedPerSingle, iq.QuotedPerDouble, 
                         iq.QuotedPerTwin, iq.QuotedPerTriple, iq.QuotedPerQuad, iq.QuotedKidsDiscounts, iq.QuotedPerPerson, iq.CurrencyId, iq.NumberOfPeople, iq.ItinerarySurcharge, iq.CopiedFromItineraryQuoteId, iq.Client2ItineraryId, iq.IsLocked, 
                         c2i.ClientId, c2i.CurrentItineraryId, c.ClientId AS contactclientid, c.FirstName AS contactfirstname, c.LastName AS contactlastname, c.Phone AS contactphone, c.Email AS contactemail, i.LastModified, i.DateCreated, 
                         iq.ItineraryMargin, iq.QuotedPriceWithoutDiscounts, iq.QuotedNotes, iq.QuotedGroupAllocation, iq.QuotedMargin, iq.HidePPRates, iq.PriceNotes, iq.TourAgentId, iq.GroupName, gradtours.ItineraryTrip.Cancelled, i.Markup, 
                         i.rewriteURL, i.ItineraryPriceOptionId, ISNULL(i.Double2People, 0) AS double2people, ISNULL(i.Double4People, 0) AS double4people, i.PriceDisplayText, i.LocaleId, i.IsNew, gradtours.ItineraryTrip.EmergencyContactInfo, 
                         i.TemplateTypeId, i.ZoomLevel, i.Max4People, i.Min2People, ISNULL(i.CompanyId, 1) AS companyid, ISNULL(i.Margin, 0) AS margin, i.GroupSize, i.IsGroupAmount, iq.HidePricingInfo, gradtours.ItineraryTrip.DeclinedFlight, 
                         gradtours.ItineraryTrip.DeclinedInsurance, gradtours.ItineraryTrip.MasterItineraryId, iq.ValidityDate, iq.BrandingTypeId, gradtours.ItineraryTrip.DateCancellationApproved, iq.MarketingQuoteDate, iq.MarketingQuoteInterval, 
                         iq.HideGroupPricing, iq.StateOfResidenceId, iq.InsuranceProductId, iq.AllowClientUpload, iq.QuotedInsurancePrice, iq.QuotedInsuranceMargin, iq.QuotedInsurancePriceCurrencyId, iq.CompanyBrandId, iq.DiscountPercentage, 
                         iq.MarkupPercentage, iq.ClientHidden, iq.ClientViewable, i.PaymentTermId, i.SalesCOAAllocationId, i.UseSalesCOAAllocationId, i.ArrivalAirport, i.PriceDisclaimer, i.MerchandisingBanner, ISNULL(iq.CallClientAboutQuote, 0) 
                         AS callclientaboutquote, iq.PurchaseRequestTime, iq.ItineraryQuoteId, iq.QuotedCost, iq.CommissionableAmount, i.IsOverrideApproved, i.TagId, iq.TravelersUnder60, iq.Travelers60AndOver, i.PrimaryCountryId
FROM            gradtours.ItineraryQuote AS iq INNER JOIN
                         gradtours.Client AS c INNER JOIN
                         gradtours.Client2Itinerary AS c2i ON c.ClientId = c2i.ClientId ON iq.Client2ItineraryId = c2i.Client2ItineraryId LEFT OUTER JOIN
                         gradtours.ItineraryTrip ON iq.ItineraryId = gradtours.ItineraryTrip.ItineraryId RIGHT OUTER JOIN
                         gradtours.Itinerary AS i ON iq.ItineraryId = i.ItineraryId
WHERE        (iq.Deleted = 0 OR
                         iq.Deleted IS NULL) AND (i.DeletedStrict = 0)

|||ItineraryAllDetails_IncludingDeleted
^^^CREATE VIEW [gradtours].[ItineraryAllDetails_IncludingDeleted]
AS
SELECT        i.ItineraryId, i.Name AS TripName, i.Name, i.Code, i.AirClassId, i.IsFeatured, i.FeatureOrder, i.LandingOrder, i.ItineraryCategoryId, i.FeatureText, i.FeatureTextProduct, i.Highlights, i.SearchHeader, i.NumberOfDays, i.Description, 
                         i.Comparison, i.Options, i.Includes, i.Excludes, i.ItineraryClassId, i.ItineraryTypeId, i.Comments, i.IsActive, i.ActiveCode, i.Banner, i.Map, i.Photo1, i.Photo2, i.Photo3, i.MinDouble, i.MaxDouble, i.MapSmall, i.Terms, 
                         i.YearMarkup, i.Banner_IsStock, i.Banner_IsOwned, i.Image_IsStock, i.Image_IsOwned, i.Months, i.AgentMargin, i.AgentGroupName, i.AgentSgl, i.AgentDbl, i.AgentTpl, i.AgentInfant, i.AgentKids2to12, i.AgentKids13to17, 
                         i.AgentStartDate, i.IsGPS, i.CopiedFromItineraryId, iq.ItineraryStartDate, iq.ItineraryRef, iq.QuoteAgentId, iq.QuoteDate, iq.QuotedPrice, iq.QuotedPerSingle, iq.QuotedPerDouble, iq.QuotedPerTwin, iq.QuotedPerTriple, 
                         iq.QuotedPerQuad, iq.QuotedKidsDiscounts, iq.QuotedPerPerson, iq.CurrencyId, iq.NumberOfPeople, iq.ItinerarySurcharge, iq.CopiedFromItineraryQuoteId, iq.Client2ItineraryId, iq.IsLocked, c2i.ClientId, c2i.CurrentItineraryId, 
                         c.ClientId AS ContactClientId, c.FirstName AS ContactFirstName, c.LastName AS ContactLastName, c.Phone AS ContactPhone, c.Email AS ContactEmail, i.LastModified, i.DateCreated, iq.ItineraryMargin, 
                         iq.QuotedPriceWithoutDiscounts, iq.QuotedNotes, iq.QuotedGroupAllocation, iq.QuotedMargin, iq.HidePPRates, iq.PriceNotes, iq.TourAgentId, iq.GroupName, gradtours.ItineraryTrip.Cancelled, i.Markup, i.rewriteURL, 
                         i.ItineraryPriceOptionId, ISNULL(i.Double2People, 0) AS Double2People, ISNULL(i.Double4People, 0) AS Double4People, i.PriceDisplayText, i.LocaleId, i.IsNew, gradtours.ItineraryTrip.EmergencyContactInfo, i.TemplateTypeId, 
                         i.ZoomLevel, i.Max4People, i.Min2People, ISNULL(i.CompanyId, 1) AS CompanyId, ISNULL(i.Margin, 0) AS Margin, i.IsGroupAmount, i.GroupSize, iq.HidePricingInfo, gradtours.ItineraryTrip.MasterItineraryId, 
                         gradtours.ItineraryTrip.DeclinedInsurance, gradtours.ItineraryTrip.DeclinedFlight, iq.ValidityDate, iq.BrandingTypeId, gradtours.ItineraryTrip.DateCancellationApproved, iq.MarketingQuoteDate, iq.MarketingQuoteInterval, 
                         iq.HideGroupPricing, iq.StateOfResidenceId, iq.InsuranceProductId, iq.AllowClientUpload, iq.QuotedInsurancePrice, iq.QuotedInsuranceMargin, iq.QuotedInsurancePriceCurrencyId, iq.CompanyBrandId, iq.DiscountPercentage, 
                         iq.MarkupPercentage, iq.ClientHidden, iq.ClientViewable, i.PaymentTermId, i.SalesCOAAllocationId, i.UseSalesCOAAllocationId, i.ArrivalAirport, i.PriceDisclaimer, i.MerchandisingBanner, iq.ItineraryQuoteId, 
                         ISNULL(iq.CallClientAboutQuote, 0) AS CallClientAboutQuote, iq.PurchaseRequestTime, iq.QuotedCost, i.TagId, iq.TravelersUnder60, iq.Travelers60AndOver
FROM            gradtours.ItineraryQuote AS iq INNER JOIN
                         gradtours.Client AS c INNER JOIN
                         gradtours.Client2Itinerary AS c2i ON c.ClientId = c2i.ClientId ON iq.Client2ItineraryId = c2i.Client2ItineraryId LEFT OUTER JOIN
                         gradtours.ItineraryTrip ON iq.ItineraryId = gradtours.ItineraryTrip.ItineraryId RIGHT OUTER JOIN
                         gradtours.Itinerary AS i ON iq.ItineraryId = i.ItineraryId

|||ItineraryCosts
^^^CREATE VIEW [gradtours].[ItineraryCosts]
AS
SELECT     gradtours.ItineraryService2Cost.Cost_CurrencyId AS QuotedCost_CurrencyId, SUM(gradtours.ItineraryService2Cost.Cost) AS QuotedCost, 
                      ItineraryService2ActualCost.Cost_CurrencyId AS ActualCost_CurrencyId, SUM(ItineraryService2ActualCost.Cost) AS ActualCost, gradtours.ItineraryDay.ItineraryId
FROM         gradtours.ItineraryService INNER JOIN
                      gradtours.ItineraryService2Cost ON gradtours.ItineraryService.ItineraryServiceId = gradtours.ItineraryService2Cost.ItineraryServiceId INNER JOIN
                      gradtours.ItineraryService2Booking ON gradtours.ItineraryService.ItineraryServiceId = gradtours.ItineraryService2Booking.ItineraryServiceId INNER JOIN
                      gradtours.ItineraryService2Cost AS ItineraryService2ActualCost ON 
                      gradtours.ItineraryService2Booking.ItineraryService2CostId = ItineraryService2ActualCost.ItineraryService2CostId INNER JOIN
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                      gradtours.bookingStatus ON gradtours.ItineraryService2Booking.BookingStatusId = gradtours.bookingStatus.bookingStatusId
WHERE     (gradtours.ItineraryService.Deleted = 0) AND (ISNULL(gradtours.ItineraryDay.Deleted, 0) = 0) AND (gradtours.bookingStatus.includedWhenCalculatingCost = 1)
GROUP BY gradtours.ItineraryService2Cost.Cost_CurrencyId, ItineraryService2ActualCost.Cost_CurrencyId, gradtours.ItineraryDay.ItineraryId

|||ItineraryService_AllDetails
^^^-- Just adding PromotionType to this view
CREATE   VIEW [gradtours].[ItineraryService_AllDetails] AS
SELECT        gradtours.vendors.vendordisplayname, gradtours.vendors.ProviderId, gradtours.vendors.ApplyArbitrageFee, gradtours.vendors.HideInDropdown, gradtours.ItineraryService.ItineraryServiceId, 
                         gradtours.ItineraryService.ItineraryDayId, gradtours.ItineraryService.ServiceId, gradtours.ItineraryService.CustomServiceName, gradtours.ItineraryService.ProviderServiceId, gradtours.ItineraryService.DisplayOrder, 
                         gradtours.ItineraryService.GlobalServiceId, gradtours.ItineraryService.VendorId, gradtours.ItineraryService.DateCreated, gradtours.ItineraryService.LastModified, gradtours.ItineraryService.ParentItineraryServiceId, 
                         gradtours.ItineraryService.Duration, gradtours.ItineraryService.DeletedStrict AS Deleted, gradtours.ItineraryService2Cost.Cost, gradtours.ItineraryService2Cost.PreCost, gradtours.ItineraryService2Cost.VpoThresholdCost, 
                         gradtours.ItineraryService2Cost.ConvertedCost, gradtours.ItineraryService2Cost.Cost_CurrencyId, gradtours.ItineraryService2Cost.ConvertedCost_CurrencyId, gradtours.ItineraryService.ConvertToVendorCustomCost, 
                         gradtours.ItineraryDay.Day, gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate + (gradtours.ItineraryDay.Day - 1) AS ServiceStartDate, gradtours.ItineraryService.TimeOfDayId, 
                         gradtours.ItineraryService.IsCustomGroupAllocation, gradtours.ItineraryService.QuotedGroupAllocation, gradtours.ItineraryQuote.QuotedGroupAllocation AS DefaultQuotedGroupAllocation, gradtours.Itinerary.ItineraryCategoryId, 
                         gradtours.ItineraryService.Markup, gradtours.ItineraryService.IsAlertDismissed, gradtours.ItineraryService.CopiedFromItineraryServiceId, gradtours.ItineraryService.IsAlternateForService, 
                         gradtours.ItineraryService.UseCustomCost, ISNULL(gradtours.ServiceDescription.SourceLocaleId, 1559) AS SourceLocaleId, ISNULL(gradtours.ServiceDescription.DestinationLocaleId, 1559) AS DestinationLocaleId, 
                         locale_Source.IsGlobal AS SourceLocaleIsGlobal, locale_Destination.IsGlobal AS DestinationLocaleIsGlobal, locale_Source.Name AS SourceLocaleName, locale_Destination.Name AS DestinationLocaleName, 
                         gradtours.ItineraryService.IsCustomService, gradtours.ItineraryService.ServiceDescriptionId, gradtours.ItineraryService.IsCommissionable, gradtours.ItineraryService.IsCustomServiceName, 
                         ISNULL(gradtours.ServiceDescription.QuoteServiceName, gradtours.ItineraryService.CustomServiceName) AS globalServiceName, gradtours.ServiceDescription.Alerts, gradtours.ItineraryService.IsCustomService AS iscustom, 
                         gradtours.ServiceDescription.ActivityTypeName, gradtours.ServiceDescription.ActivityTypeDisplayName, gradtours.ServiceDescription.SimpleServiceName, gradtours.ItineraryService.Comments, 
                         gradtours.ItineraryService.IsPackageService, gradtours.ItineraryService.PromotionType, gradtours.ServiceDescription.ClientServiceName, gradtours.ServiceDescription.ShowLocaleInfo, gradtours.ItineraryQuote.ItineraryStartDate, 
                         gradtours.ServiceDescription.ActivityTypeId
FROM            gradtours.ItineraryService INNER JOIN
                         gradtours.vendors WITH (FORCESEEK) ON gradtours.ItineraryService.VendorId = gradtours.vendors.vendorId INNER JOIN
                         gradtours.ItineraryDay WITH (FORCESEEK) ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                         gradtours.Itinerary ON gradtours.ItineraryDay.ItineraryId = gradtours.Itinerary.ItineraryId LEFT OUTER JOIN
                         gradtours.ItineraryQuote ON gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId AND gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId AND 
                         gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN
                         gradtours.ItineraryService2Cost ON gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = gradtours.ItineraryService2Cost.ItineraryService2CostId AND gradtours.ItineraryService2Cost.Deleted = 0 LEFT OUTER JOIN
                         gradtours.ServiceDescription ON gradtours.ServiceDescription.ServiceDescriptionId = gradtours.ItineraryService.ServiceDescriptionId LEFT OUTER JOIN
                             (SELECT        LocaleId, IsGlobal, Name
                               FROM            gradtours.Locale WITH (FORCESEEK)) AS locale_Source ON locale_Source.LocaleId = ISNULL(gradtours.ServiceDescription.SourceLocaleId, 1559) LEFT OUTER JOIN
                             (SELECT        LocaleId, IsGlobal, Name
                               FROM            gradtours.Locale WITH (FORCESEEK)) AS locale_Destination ON locale_Destination.LocaleId = ISNULL(gradtours.ServiceDescription.DestinationLocaleId, 1559)

|||ItineraryService_AllDetails_AllServiceTypes
^^^CREATE VIEW [gradtours].[ItineraryService_AllDetails_AllServiceTypes]
AS
SELECT     TOP (100) PERCENT vendordisplayname, ProviderId, ItineraryServiceId, ItineraryDayId, ServiceId, CustomServiceName, ProviderServiceId, DisplayOrder, 
                      GlobalServiceId, VendorId, DateCreated, LastModified, ParentItineraryServiceId, Duration, Cost, ConvertedCost, Cost_CurrencyId, ConvertedCost_CurrencyId, Day, 
                      ItineraryId, ServiceStartDate, TimeOfDayId, Deleted, Markup, IsCustomService AS IsCustom, IsCustomGroupAllocation, QuotedGroupAllocation, 
                      DefaultQuotedGroupAllocation, ItineraryCategoryId, IsAlertDismissed, CopiedFromItineraryServiceId, IsAlternateForService, UseCustomCost, SourceLocaleId, 
                      SourceLocaleName, DestinationLocaleId, DestinationLocaleName, ServiceDescriptionId, IsCommissionable, IsCustomServiceName, Alerts, globalServiceName, ActivityTypeId
FROM         gradtours.ItineraryService_AllDetails AS ItineraryService_AllDetails
WHERE     (ServiceId IN (1, 2, 3))

|||ItineraryService_AllDetails_Beta
^^^CREATE VIEW [gradtours].[ItineraryService_AllDetails_Beta]
WITH SCHEMABINDING
AS
SELECT     V.vendordisplayname, V.ProviderId, [IS].ItineraryServiceId, [IS].ItineraryDayId, 
                      [IS].ServiceId, [IS].CustomServiceName, [IS].ProviderServiceId, 
                      [IS].DisplayOrder, [IS].GlobalServiceId, [IS].VendorId, [IS].DateCreated, 
                      [IS].LastModified, [IS].ParentItineraryServiceId, [IS].Duration, [IS].Deleted, 
                      IS2C.Cost, IS2C.ConvertedCost, IS2C.Cost_CurrencyId, 
                      IS2C.ConvertedCost_CurrencyId, [ID].Day, [ID].ItineraryId, 
                      IQ.ItineraryStartDate + ([ID].Day - 1) AS ServiceStartDate, [IS].TimeOfDayId, 
                      [IS].QuotedGroupAllocation, IQ.QuotedGroupAllocation AS DefaultQuotedGroupAllocation, 
                      I.ItineraryCategoryId, [IS].Markup, [IS].IsAlertDismissed, 
                      [IS].CopiedFromItineraryServiceId, [IS].IsAlternateForService
FROM gradtours.ItineraryService  [IS]
INNER JOIN gradtours.vendors V
ON [IS].VendorId = V.vendorId 
INNER JOIN gradtours.ItineraryDay [ID]
ON [IS].ItineraryDayId = [ID].ItineraryDayId 
INNER JOIN gradtours.Itinerary I
ON [ID].ItineraryId = I.ItineraryId 
LEFT OUTER JOIN gradtours.ItineraryQuote IQ
ON I.ItineraryId = IQ.ItineraryId 
AND I.ItineraryId = IQ.ItineraryId 
AND [ID].ItineraryId = IQ.ItineraryId 
LEFT OUTER JOIN gradtours.ItineraryService2Cost IS2C
ON [IS].ItineraryService2CostId_QuotedCost = [IS2C].ItineraryService2CostId

|||ItineraryService_AllDetails_Dean
^^^CREATE VIEW [gradtours].[ItineraryService_AllDetails_Dean]  
AS  
SELECT     gradtours.vendors.vendordisplayname, gradtours.vendors.ProviderId, gradtours.ItineraryService.ItineraryServiceId, gradtours.ItineraryService.ItineraryDayId,   
                      gradtours.ItineraryService.ServiceId, gradtours.ItineraryService.CustomServiceName, gradtours.ItineraryService.ProviderServiceId,   
                      gradtours.ItineraryService.DisplayOrder, gradtours.ItineraryService.GlobalServiceId, gradtours.ItineraryService.VendorId, gradtours.ItineraryService.DateCreated,   
                      gradtours.ItineraryService.LastModified, gradtours.ItineraryService.ParentItineraryServiceId, gradtours.ItineraryService.Duration, gradtours.ItineraryService.Deleted,   
                      gradtours.ItineraryService2Cost.Cost, gradtours.ItineraryService2Cost.ConvertedCost, gradtours.ItineraryService2Cost.Cost_CurrencyId,   
                      gradtours.ItineraryService2Cost.ConvertedCost_CurrencyId, gradtours.ItineraryDay.Day, gradtours.ItineraryDay.ItineraryId,   
                      gradtours.ItineraryQuote.ItineraryStartDate + (gradtours.ItineraryDay.Day - 1) AS ServiceStartDate, gradtours.ItineraryService.TimeOfDayId,   
                      gradtours.ItineraryService.QuotedGroupAllocation, gradtours.ItineraryQuote.QuotedGroupAllocation AS DefaultQuotedGroupAllocation,   
                      gradtours.Itinerary.ItineraryCategoryId, gradtours.ItineraryService.Markup, gradtours.ItineraryService.IsAlertDismissed,   
                      gradtours.ItineraryService.CopiedFromItineraryServiceId, gradtours.ItineraryService.IsAlternateForService, gradtours.ItineraryService.UseCustomCost,   
					  isnull(ServiceDescription.SourceLocaleId,11) AS SourceLocaleId, isnull(ServiceDescription.DestinationLocaleId,11) as DestinationLocaleId,      
					  --gradtours.ItineraryService.SourceLocaleId, gradtours.ItineraryService.DestinationLocaleId,  
                          (SELECT     Name  
                            FROM          gradtours.Locale  
                            WHERE      (LocaleId = isnull(ServiceDescription.SourceLocaleId, 11))) AS SourceLocaleName,  
                          (SELECT     Name  
                            FROM          gradtours.Locale AS Locale_1  
                            WHERE      (LocaleId = isnull(ServiceDescription.DestinationLocaleId,11))) AS DestinationLocaleName, gradtours.ItineraryService.IsCustomService,   
                      gradtours.ItineraryService.ServiceDescriptionId, gradtours.ItineraryService.IsCommissionable, gradtours.ItineraryService.IsCustomServiceName,   
                      gradtours.ServiceDescription.QuoteServiceName AS globalServiceName, gradtours.ServiceDescription.Alerts,   
                      gradtours.ItineraryService.IsCustomService AS iscustom  
FROM         gradtours.ItineraryService INNER JOIN  
                      gradtours.vendors ON gradtours.ItineraryService.VendorId = gradtours.vendors.vendorId INNER JOIN  
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN  
                      gradtours.Itinerary ON gradtours.ItineraryDay.ItineraryId = gradtours.Itinerary.ItineraryId LEFT OUTER JOIN  
                      gradtours.ItineraryQuote ON gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId AND   
                      gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId AND gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN  
                      gradtours.ItineraryService2Cost ON   
                      gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = gradtours.ItineraryService2Cost.ItineraryService2CostId LEFT OUTER JOIN  
                      gradtours.ServiceDescription ON gradtours.ServiceDescription.ServiceDescriptionId = gradtours.ItineraryService.ServiceDescriptionId  

|||ItineraryService_AllDetails_Ground
^^^CREATE VIEW [gradtours].[ItineraryService_AllDetails_Ground]
AS
SELECT     CASE gradtours.GlobalGroundVehicle.VehicleName WHEN 'No Vehicle' THEN CASE gradtours.GlobalGround.ActivityTypeName WHEN 'Activity' THEN '' WHEN 'Other' THEN
                       '' ELSE gradtours.GlobalGround.ActivityTypeName + ' - ' END + replace(gradtours.GlobalGround.GroundName, '''', '`') 
                      ELSE CASE gradtours.GlobalGround.ActivityTypeName WHEN 'Activity' THEN '' WHEN 'Other' THEN '' ELSE gradtours.GlobalGround.ActivityTypeName + ' - ' END + replace(gradtours.GlobalGround.GroundName,
                       '''', '`') + ' (' + gradtours.GlobalGroundVehicle.VehicleName + isnull('(' + CONVERT(varchar(5), gradtours.GlobalGroundVehicle.Capacity) + ')', '') 
                      + ')' END AS GlobalServiceName, ItineraryService_AllDetails.vendordisplayname, ItineraryService_AllDetails.ProviderId, ItineraryService_AllDetails.ItineraryServiceId,
                       ItineraryService_AllDetails.ItineraryDayId, ItineraryService_AllDetails.ServiceId, ItineraryService_AllDetails.CustomServiceName, 
                      ItineraryService_AllDetails.ProviderServiceId, ItineraryService_AllDetails.DisplayOrder, ItineraryService_AllDetails.GlobalServiceId, 
                      ItineraryService_AllDetails.VendorId, ItineraryService_AllDetails.DateCreated, ItineraryService_AllDetails.LastModified, 
                      ItineraryService_AllDetails.ParentItineraryServiceId, ItineraryService_AllDetails.Duration, ItineraryService_AllDetails.Deleted, ItineraryService_AllDetails.Cost, 
                      ItineraryService_AllDetails.ConvertedCost, ItineraryService_AllDetails.Cost_CurrencyId, ItineraryService_AllDetails.ConvertedCost_CurrencyId, 
                      ItineraryService_AllDetails.Day, ItineraryService_AllDetails.ItineraryId, ItineraryService_AllDetails.ServiceStartDate, ItineraryService_AllDetails.TimeOfDayId, 
                      gradtours.Ground.Alerts, ItineraryService_AllDetails.Markup, gradtours.Ground.IsCustom, ItineraryService_AllDetails.QuotedGroupAllocation, 
                      ItineraryService_AllDetails.DefaultQuotedGroupAllocation, ItineraryService_AllDetails.ItineraryCategoryId, ItineraryService_AllDetails.IsAlertDismissed, 
                      ItineraryService_AllDetails.CopiedFromItineraryServiceId, ItineraryService_AllDetails.IsAlternateForService, ItineraryService_AllDetails.UseCustomCost, 
                      gradtours.Ground.GroundId, ItineraryService_AllDetails.DestinationLocaleId, ItineraryService_AllDetails.SourceLocaleId, 
                      ItineraryService_AllDetails.SourceLocaleName, ItineraryService_AllDetails.DestinationLocaleName, ItineraryService_AllDetails.IsCustomGroupAllocation, 
                      ItineraryService_AllDetails.SimpleServiceName, ItineraryService_AllDetails.ItineraryStartDate, ItineraryService_AllDetails.ActivityTypeId
FROM         gradtours.GlobalGround INNER JOIN
                      gradtours.GlobalGroundVehicle ON gradtours.GlobalGround.gGroundId = gradtours.GlobalGroundVehicle.gGroundId INNER JOIN
                      gradtours.ItineraryService_AllDetails AS ItineraryService_AllDetails ON 
                      gradtours.GlobalGroundVehicle.gGroundVehicleId = ItineraryService_AllDetails.GlobalServiceId INNER JOIN
                      gradtours.ItineraryDay ON ItineraryService_AllDetails.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                      gradtours.Ground ON gradtours.GlobalGround.gGroundId = gradtours.Ground.gGroundId
WHERE     (ItineraryService_AllDetails.ServiceId = 2) AND (gradtours.ItineraryDay.Deleted IS NULL OR
                      gradtours.ItineraryDay.Deleted <> 1)

|||ItineraryService_AllDetails_Ground_Beta
^^^CREATE   VIEW [gradtours].[ItineraryService_AllDetails_Ground_Beta]
WITH SCHEMABINDING
AS
SELECT     CASE GGV.VehicleName WHEN 'No Vehicle' THEN replace(GG.GroundName, '''', '`') 
						ELSE replace(GG.GroundName, '''', '`') + ' (' + GGV.VehicleName + isnull('(' + CONVERT(varchar(5), 
						GGV.Capacity) + ')', '') + ')' END AS GlobalServiceName, AD.vendordisplayname, 
						AD.ProviderId, AD.ItineraryServiceId, AD.ItineraryDayId, AD.ServiceId, 
						AD.CustomServiceName, AD.ProviderServiceId, AD.DisplayOrder, 
						AD.GlobalServiceId, AD.VendorId, AD.DateCreated, AD.LastModified, 
						AD.ParentItineraryServiceId, AD.Duration, AD.Deleted, AD.Cost, 
						AD.ConvertedCost, AD.Cost_CurrencyId, AD.ConvertedCost_CurrencyId, 
						AD.Day, AD.ItineraryId, AD.ServiceStartDate, GG.LocationId, 
						REPLACE(gradtours.Location.Name, '''', '`') AS LocationName, AD.TimeOfDayId, gradtours.Ground.Alerts, AD.Markup, 
						gradtours.Ground.IsCustom, AD.QuotedGroupAllocation, AD.DefaultQuotedGroupAllocation, 
						AD.ItineraryCategoryId, AD.IsAlertDismissed, AD.CopiedFromItineraryServiceId, 
						AD.IsAlternateForService
FROM         gradtours.GlobalGround_Beta GG 
INNER JOIN gradtours.GlobalGroundVehicle_Beta GGV 
ON GG.gGroundId = GGV.gGroundId 
INNER JOIN gradtours.ItineraryService_AllDetails_Beta AS AD 
ON GGV.gGroundVehicleId = AD.GlobalServiceId 
INNER JOIN gradtours.Location 
ON GG.LocationId = gradtours.Location.LocationId 
INNER JOIN gradtours.ItineraryDay 
ON AD.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId 
INNER JOIN gradtours.Ground 
ON gradtours.Location.LocationId = gradtours.Ground.LocationId 
AND GG.gGroundId = gradtours.Ground.gGroundId
WHERE     (AD.ServiceId = 2) 
AND (gradtours.ItineraryDay.Deleted IS NULL OR gradtours.ItineraryDay.Deleted <> 1)

|||ItineraryService_AllDetails_Hotel
^^^CREATE VIEW [gradtours].[ItineraryService_AllDetails_Hotel]
AS
SELECT     REPLACE(gradtours.GlobalHotel.Name, '''', '`') + CASE WHEN gradtours.GlobalHotel.includedFeatures IS NULL 
                      THEN '' ELSE ' (' + gradtours.GlobalHotel.includedFeatures + ')' END + CASE gradtours.GlobalHotelRoom.RoomName WHEN 'n/a' THEN '' ELSE ' (' + REPLACE(gradtours.GlobalHotelRoom.RoomName,
                       '''', '`') + ')' END AS globalServiceName, gradtours.ItineraryService_AllDetails.vendordisplayname, gradtours.ItineraryService_AllDetails.ProviderId, 
                      gradtours.ItineraryService_AllDetails.ItineraryServiceId, gradtours.ItineraryService_AllDetails.ItineraryDayId, gradtours.ItineraryService_AllDetails.ServiceId, 
                      gradtours.ItineraryService_AllDetails.CustomServiceName, gradtours.ItineraryService_AllDetails.ProviderServiceId, 
                      gradtours.ItineraryService_AllDetails.DisplayOrder, gradtours.ItineraryService_AllDetails.GlobalServiceId, gradtours.ItineraryService_AllDetails.VendorId, 
                      gradtours.ItineraryService_AllDetails.DateCreated, gradtours.ItineraryService_AllDetails.LastModified, gradtours.ItineraryService_AllDetails.ParentItineraryServiceId, 
                      gradtours.ItineraryService_AllDetails.Duration, gradtours.ItineraryService_AllDetails.Deleted, gradtours.ItineraryService_AllDetails.Cost, 
                      gradtours.ItineraryService_AllDetails.ConvertedCost, gradtours.ItineraryService_AllDetails.Cost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails.ConvertedCost_CurrencyId, gradtours.ItineraryService_AllDetails.Day, gradtours.ItineraryService_AllDetails.ItineraryId, 
                      gradtours.ItineraryService_AllDetails.ServiceStartDate, gradtours.ItineraryService_AllDetails.TimeOfDayId, gradtours.Hotel.BookingAlert AS Alerts, 
                      gradtours.ItineraryService_AllDetails.Markup, gradtours.Hotel.IsCustom, gradtours.ItineraryService_AllDetails.QuotedGroupAllocation, 
                      gradtours.ItineraryService_AllDetails.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails.ItineraryCategoryId, 
                      gradtours.ItineraryService_AllDetails.IsAlertDismissed, gradtours.ItineraryService_AllDetails.CopiedFromItineraryServiceId, 
                      gradtours.ItineraryService_AllDetails.IsAlternateForService, gradtours.ItineraryService_AllDetails.UseCustomCost, gradtours.Hotel.HotelId, 
                      gradtours.ItineraryService_AllDetails.DestinationLocaleName, gradtours.ItineraryService_AllDetails.SourceLocaleName, 
                      gradtours.ItineraryService_AllDetails.SourceLocaleId, gradtours.ItineraryService_AllDetails.DestinationLocaleId, 
                      gradtours.ItineraryService_AllDetails.IsCustomGroupAllocation, gradtours.ItineraryService_AllDetails.SimpleServiceName,
					  gradtours.ItineraryService_AllDetails.ItineraryStartDate, gradtours.ItineraryService_AllDetails.ActivityTypeId
FROM         gradtours.GlobalHotelRoom INNER JOIN
                      gradtours.GlobalHotel ON gradtours.GlobalHotelRoom.gHotelId = gradtours.GlobalHotel.gHotelId INNER JOIN
                      gradtours.ItineraryService_AllDetails ON gradtours.ItineraryService_AllDetails.GlobalServiceId = gradtours.GlobalHotelRoom.gHotelRoomId INNER JOIN
                      gradtours.ItineraryDay ON gradtours.ItineraryService_AllDetails.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                      gradtours.Hotel ON gradtours.GlobalHotel.gHotelId = gradtours.Hotel.gHotelId
WHERE     (gradtours.ItineraryService_AllDetails.ServiceId = 1) AND gradtours.ItineraryDay.DeletedStrict = 0 /*(gradtours.ItineraryDay.Deleted IS NULL OR gradtours.ItineraryDay.Deleted <> 1)*/

|||ItineraryService_AllDetails_Hotel_Beta
^^^-- create
CREATE   VIEW [gradtours].[ItineraryService_AllDetails_Hotel_Beta]
WITH SCHEMABINDING 
AS
SELECT     gradtours.ItineraryService_AllDetails_Beta.vendordisplayname, gradtours.ItineraryService_AllDetails_Beta.ProviderId, 
						gradtours.ItineraryService_AllDetails_Beta.ItineraryServiceId, gradtours.ItineraryService_AllDetails_Beta.ItineraryDayId, 
						gradtours.ItineraryService_AllDetails_Beta.ServiceId, gradtours.ItineraryService_AllDetails_Beta.CustomServiceName, 
						gradtours.ItineraryService_AllDetails_Beta.ProviderServiceId, gradtours.ItineraryService_AllDetails_Beta.DisplayOrder, 
						gradtours.ItineraryService_AllDetails_Beta.GlobalServiceId, gradtours.ItineraryService_AllDetails_Beta.VendorId, 
						gradtours.ItineraryService_AllDetails_Beta.DateCreated, gradtours.ItineraryService_AllDetails_Beta.LastModified, 
						gradtours.ItineraryService_AllDetails_Beta.ParentItineraryServiceId, gradtours.ItineraryService_AllDetails_Beta.Duration, 
						gradtours.ItineraryService_AllDetails_Beta.Deleted, gradtours.ItineraryService_AllDetails_Beta.Cost, gradtours.ItineraryService_AllDetails_Beta.ConvertedCost, 
						gradtours.ItineraryService_AllDetails_Beta.Cost_CurrencyId, gradtours.ItineraryService_AllDetails_Beta.ConvertedCost_CurrencyId, 
						gradtours.ItineraryService_AllDetails_Beta.Day, gradtours.ItineraryService_AllDetails_Beta.ItineraryId, gradtours.ItineraryService_AllDetails_Beta.ServiceStartDate, 
						REPLACE(gradtours.Location.Name, '''', '`') AS LocationName, gradtours.ItineraryService_AllDetails_Beta.TimeOfDayId, gradtours.Hotel.BookingAlert AS Alerts, 
						gradtours.ItineraryService_AllDetails_Beta.Markup, gradtours.Hotel.IsCustom, gradtours.ItineraryService_AllDetails_Beta.QuotedGroupAllocation, 
						gradtours.ItineraryService_AllDetails_Beta.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_Beta.ItineraryCategoryId, 
						gradtours.ItineraryService_AllDetails_Beta.IsAlertDismissed, gradtours.ItineraryService_AllDetails_Beta.CopiedFromItineraryServiceId, 
						gradtours.ItineraryService_AllDetails_Beta.IsAlternateForService
FROM         gradtours.Hotel INNER JOIN
						gradtours.Location ON gradtours.Hotel.LocationId = gradtours.Location.LocationId CROSS JOIN
						gradtours.GlobalHotelRoom INNER JOIN
						gradtours.ItineraryService_AllDetails_Beta ON gradtours.ItineraryService_AllDetails_Beta.GlobalServiceId = gradtours.GlobalHotelRoom.gHotelRoomId INNER JOIN
						gradtours.ItineraryDay ON gradtours.ItineraryService_AllDetails_Beta.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId
WHERE     (gradtours.ItineraryService_AllDetails_Beta.ServiceId = 1) AND (gradtours.ItineraryDay.Deleted IS NULL OR
						gradtours.ItineraryDay.Deleted <> 1)

|||ItineraryService_AllDetails_Hotel_NoGlobal
^^^CREATE VIEW [gradtours].[ItineraryService_AllDetails_Hotel_NoGlobal]
AS
SELECT     REPLACE(gradtours.Hotel.Name, '''', '`') + CASE WHEN gradtours.fn_GetAccomodationRoomCategoryMeals(gradtours.HotelRoomCategory.HotelRoomCategoryId) 
                      IS NULL THEN '' ELSE ' (' + gradtours.fn_GetAccomodationRoomCategoryMeals(gradtours.HotelRoomCategory.HotelRoomCategoryId) 
                      + ')' END + CASE gradtours.HotelRoomCategory.Name WHEN 'n/a' THEN '' ELSE ' (' + REPLACE(gradtours.HotelRoomCategory.Name, '''', '`') 
                      + ')' END AS globalServiceName, gradtours.ItineraryService_AllDetails.vendordisplayname, gradtours.ItineraryService_AllDetails.ProviderId, 
                      gradtours.ItineraryService_AllDetails.ItineraryServiceId, gradtours.ItineraryService_AllDetails.ItineraryDayId, gradtours.ItineraryService_AllDetails.ServiceId, 
                      gradtours.ItineraryService_AllDetails.CustomServiceName, gradtours.ItineraryService_AllDetails.ProviderServiceId, 
                      gradtours.ItineraryService_AllDetails.DisplayOrder, gradtours.ItineraryService_AllDetails.GlobalServiceId, gradtours.ItineraryService_AllDetails.VendorId, 
                      gradtours.ItineraryService_AllDetails.DateCreated, gradtours.ItineraryService_AllDetails.LastModified, gradtours.ItineraryService_AllDetails.ParentItineraryServiceId, 
                      gradtours.ItineraryService_AllDetails.Duration, gradtours.ItineraryService_AllDetails.Deleted, gradtours.ItineraryService_AllDetails.Cost, 
                      gradtours.ItineraryService_AllDetails.ConvertedCost, gradtours.ItineraryService_AllDetails.Cost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails.ConvertedCost_CurrencyId, gradtours.ItineraryService_AllDetails.Day, gradtours.ItineraryService_AllDetails.ItineraryId, 
                      gradtours.ItineraryService_AllDetails.ServiceStartDate, gradtours.ItineraryService_AllDetails.TimeOfDayId, gradtours.Hotel.BookingAlert AS Alerts, 
                      gradtours.ItineraryService_AllDetails.Markup, gradtours.Hotel.IsCustom, gradtours.ItineraryService_AllDetails.QuotedGroupAllocation, 
                      gradtours.ItineraryService_AllDetails.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails.ItineraryCategoryId, 
                      gradtours.ItineraryService_AllDetails.IsAlertDismissed, gradtours.ItineraryService_AllDetails.CopiedFromItineraryServiceId, 
                      gradtours.ItineraryService_AllDetails.IsAlternateForService, gradtours.ItineraryService_AllDetails.UseCustomCost, gradtours.Hotel.HotelId, 
                      gradtours.ItineraryService_AllDetails.DestinationLocaleName, gradtours.ItineraryService_AllDetails.SourceLocaleName, 
                      gradtours.ItineraryService_AllDetails.SourceLocaleId, gradtours.ItineraryService_AllDetails.DestinationLocaleId, 
                      gradtours.ItineraryService_AllDetails.IsCustomGroupAllocation, gradtours.ItineraryService_AllDetails.ActivityTypeId
FROM         gradtours.ItineraryService_AllDetails INNER JOIN
                      gradtours.ItineraryDay ON gradtours.ItineraryService_AllDetails.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                      gradtours.HotelRoomCategory ON gradtours.ItineraryService_AllDetails.ProviderServiceId = gradtours.HotelRoomCategory.HotelRoomCategoryId INNER JOIN
                      gradtours.Hotel ON gradtours.HotelRoomCategory.HotelId = gradtours.Hotel.HotelId
WHERE     (gradtours.ItineraryService_AllDetails.ServiceId = 1) AND (gradtours.ItineraryDay.Deleted IS NULL OR
                      gradtours.ItineraryDay.Deleted <> 1)

|||ItineraryService_AllDetails_Save
^^^CREATE VIEW [gradtours].[ItineraryService_AllDetails_Save]
AS
SELECT     gradtours.vendors.vendordisplayname, gradtours.vendors.ProviderId, gradtours.ItineraryService.ItineraryServiceId, gradtours.ItineraryService.ItineraryDayId, 
                      gradtours.ItineraryService.ServiceId, gradtours.ItineraryService.CustomServiceName, gradtours.ItineraryService.ProviderServiceId, 
                      gradtours.ItineraryService.DisplayOrder, gradtours.ItineraryService.GlobalServiceId, gradtours.ItineraryService.VendorId, gradtours.ItineraryService.DateCreated, 
                      gradtours.ItineraryService.LastModified, gradtours.ItineraryService.ParentItineraryServiceId, gradtours.ItineraryService.Duration, gradtours.ItineraryService.DeletedStrict AS Deleted, 
                      gradtours.ItineraryService2Cost.Cost, gradtours.ItineraryService2Cost.ConvertedCost, gradtours.ItineraryService2Cost.Cost_CurrencyId, 
                      gradtours.ItineraryService2Cost.ConvertedCost_CurrencyId, gradtours.ItineraryDay.Day, gradtours.ItineraryDay.ItineraryId, 
                      gradtours.ItineraryQuote.ItineraryStartDate + (gradtours.ItineraryDay.Day - 1) AS ServiceStartDate, gradtours.ItineraryService.TimeOfDayId, 
                      gradtours.ItineraryService.IsCustomGroupAllocation, gradtours.ItineraryService.QuotedGroupAllocation, 
                      gradtours.ItineraryQuote.QuotedGroupAllocation AS DefaultQuotedGroupAllocation, gradtours.Itinerary.ItineraryCategoryId, gradtours.ItineraryService.Markup, 
                      gradtours.ItineraryService.IsAlertDismissed, gradtours.ItineraryService.CopiedFromItineraryServiceId, gradtours.ItineraryService.IsAlternateForService, 
                      gradtours.ItineraryService.UseCustomCost, ISNULL(gradtours.ServiceDescription.SourceLocaleId, 1559) AS SourceLocaleId, 
                      ISNULL(gradtours.ServiceDescription.DestinationLocaleId, 1559) AS DestinationLocaleId,
                          (SELECT     IsGlobal
                            FROM          gradtours.Locale
                            WHERE      (LocaleId = ISNULL(gradtours.ServiceDescription.SourceLocaleId, 1559))) AS SourceLocaleIsGlobal,
                          (SELECT     IsGlobal
                            FROM          gradtours.Locale AS Locale_3
                            WHERE      (LocaleId = ISNULL(gradtours.ServiceDescription.DestinationLocaleId, 1559))) AS DestinationLocaleIsGlobal,
                          (SELECT     Name
                            FROM          gradtours.Locale AS Locale_2
                            WHERE      (LocaleId = ISNULL(gradtours.ServiceDescription.SourceLocaleId, 1559))) AS SourceLocaleName,
                          (SELECT     Name
                            FROM          gradtours.Locale AS Locale_1
                            WHERE      (LocaleId = ISNULL(gradtours.ServiceDescription.DestinationLocaleId, 1559))) AS DestinationLocaleName, gradtours.ItineraryService.IsCustomService, 
                      gradtours.ItineraryService.ServiceDescriptionId, gradtours.ItineraryService.IsCommissionable, gradtours.ItineraryService.IsCustomServiceName, 
                      ISNULL(gradtours.ServiceDescription.QuoteServiceName, gradtours.ItineraryService.CustomServiceName) AS globalServiceName, 
                      gradtours.ServiceDescription.Alerts, gradtours.ItineraryService.IsCustomService AS iscustom, gradtours.ServiceDescription.ActivityTypeName, 
                      gradtours.ServiceDescription.ActivityTypeDisplayName, gradtours.ServiceDescription.SimpleServiceName, gradtours.ItineraryService.Comments, 
                      gradtours.ItineraryService.IsPackageService, gradtours.ServiceDescription.ClientServiceName, gradtours.ServiceDescription.ShowLocaleInfo,
					  gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ServiceDescription.ActivityTypeId
FROM         gradtours.ItineraryService INNER JOIN
                      gradtours.vendors ON gradtours.ItineraryService.VendorId = gradtours.vendors.vendorId INNER JOIN
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                      gradtours.Itinerary ON gradtours.ItineraryDay.ItineraryId = gradtours.Itinerary.ItineraryId LEFT OUTER JOIN
                      gradtours.ItineraryQuote ON gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId AND 
                      gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId AND gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN
                      gradtours.ItineraryService2Cost ON gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = gradtours.ItineraryService2Cost.ItineraryService2CostId AND 
                      gradtours.ItineraryService2Cost.Deleted = 0 LEFT OUTER JOIN
                      gradtours.ServiceDescription ON gradtours.ServiceDescription.ServiceDescriptionId = gradtours.ItineraryService.ServiceDescriptionId

|||ItineraryService_AllDetails_Transport
^^^CREATE VIEW [gradtours].[ItineraryService_AllDetails_Transport]
AS
SELECT     gradtours.ItineraryService_AllDetails.vendordisplayname, gradtours.ItineraryService_AllDetails.ProviderId, gradtours.ItineraryService_AllDetails.ItineraryServiceId, 
                      gradtours.ItineraryService_AllDetails.ItineraryDayId, gradtours.ItineraryService_AllDetails.ServiceId, gradtours.ItineraryService_AllDetails.CustomServiceName, 
                      gradtours.ItineraryService_AllDetails.ProviderServiceId, gradtours.ItineraryService_AllDetails.DisplayOrder, gradtours.ItineraryService_AllDetails.GlobalServiceId, 
                      gradtours.ItineraryService_AllDetails.VendorId, gradtours.ItineraryService_AllDetails.DateCreated, gradtours.ItineraryService_AllDetails.LastModified, 
                      gradtours.ItineraryService_AllDetails.ParentItineraryServiceId, gradtours.ItineraryService_AllDetails.Duration, 
                      gradtours.ItineraryService_AllDetails.Deleted | gradtours.GlobalTransport_AllDetails.deleted AS Deleted, gradtours.ItineraryService_AllDetails.Cost, 
                      gradtours.ItineraryService_AllDetails.ConvertedCost, gradtours.ItineraryService_AllDetails.Cost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails.ConvertedCost_CurrencyId, gradtours.ItineraryService_AllDetails.Day, gradtours.ItineraryService_AllDetails.ItineraryId, 
                      gradtours.ItineraryService_AllDetails.ServiceStartDate, gradtours.ItineraryService_AllDetails.TimeOfDayId, gradtours.ItineraryService_AllDetails.Markup, 
                      gradtours.GlobalTransport_AllDetails.ActivityTypeName + ' - ' + REPLACE(gradtours.GlobalTransport_AllDetails.sourceLocaleName, '''', '`') 
                      + ' - ' + REPLACE(gradtours.GlobalTransport_AllDetails.destinationLocaleName, '''', '`') 
                      + (CASE gradtours.GlobalTransport_AllDetails.TransportName WHEN '' THEN '' ELSE ' [' + gradtours.GlobalTransport_AllDetails.TransportName + ']' END) 
                      + ' - ' + gradtours.GlobalTransport_AllDetails.TransportCategoryName AS GlobalServiceName, gradtours.GlobalTransport_AllDetails.Alerts, CAST('False' AS bit) 
                      AS IsCustom, gradtours.ItineraryService_AllDetails.QuotedGroupAllocation, gradtours.ItineraryService_AllDetails.DefaultQuotedGroupAllocation, 
                      gradtours.ItineraryService_AllDetails.ItineraryCategoryId, gradtours.ItineraryService_AllDetails.IsAlertDismissed, 
                      gradtours.ItineraryService_AllDetails.CopiedFromItineraryServiceId, gradtours.ItineraryService_AllDetails.IsAlternateForService, 
                      gradtours.ItineraryService_AllDetails.UseCustomCost, gradtours.GlobalTransport_AllDetails.sourceKTCountryCode, 
                      gradtours.GlobalTransport_AllDetails.destinationKTCountryCode, gradtours.GlobalTransport_AllDetails.gTransportCategoryId, 
                      gradtours.GlobalTransport_AllDetails.TransportCategoryName, gradtours.GlobalTransport_AllDetails.gTransportId, 
                      gradtours.ItineraryService_AllDetails.DestinationLocaleName, 
                      gradtours.ItineraryService_AllDetails.SourceLocaleName + '-' + gradtours.ItineraryService_AllDetails.DestinationLocaleName AS SourceLocaleName, 
                      gradtours.ItineraryService_AllDetails.SourceLocaleId, gradtours.ItineraryService_AllDetails.DestinationLocaleId, 
                      gradtours.ItineraryService_AllDetails.IsCustomGroupAllocation, gradtours.ItineraryService_AllDetails.SimpleServiceName, gradtours.ItineraryService_AllDetails.ActivityTypeId
FROM         gradtours.ItineraryService_AllDetails INNER JOIN
                      gradtours.GlobalTransport_AllDetails ON gradtours.ItineraryService_AllDetails.GlobalServiceId = gradtours.GlobalTransport_AllDetails.gTransportCategoryId
WHERE     (gradtours.ItineraryService_AllDetails.ServiceId = 3)

|||itineraryservice_alldetails_withbookinginfo
^^^CREATE     VIEW [gradtours].[itineraryservice_alldetails_withbookinginfo] AS
SELECT        TOP (100) PERCENT gradtours.ItineraryService_AllDetails.globalServiceName, gradtours.ItineraryService_AllDetails.vendordisplayname, gradtours.ItineraryService_AllDetails.ProviderId, 
                         gradtours.ItineraryService_AllDetails.ApplyArbitrageFee, gradtours.ItineraryService_AllDetails.HideInDropdown, gradtours.ItineraryService_AllDetails.ItineraryServiceId, gradtours.ItineraryService_AllDetails.ItineraryDayId, 
                         gradtours.ItineraryService_AllDetails.ServiceId, gradtours.ItineraryService_AllDetails.CustomServiceName, gradtours.ItineraryService_AllDetails.ProviderServiceId, gradtours.ItineraryService_AllDetails.DisplayOrder, 
                         gradtours.ItineraryService_AllDetails.GlobalServiceId, gradtours.ItineraryService_AllDetails.ParentItineraryServiceId, gradtours.ItineraryService_AllDetails.Duration, gradtours.ItineraryService_AllDetails.Cost, 
                         gradtours.ItineraryService_AllDetails.PreCost, gradtours.ItineraryService_AllDetails.VpoThresholdCost, gradtours.ItineraryService_AllDetails.ConvertToVendorCustomCost, gradtours.ItineraryService_AllDetails.ConvertedCost, 
                         gradtours.ItineraryService_AllDetails.Cost_CurrencyId, gradtours.ItineraryService_AllDetails.ConvertedCost_CurrencyId, gradtours.ItineraryService_AllDetails.Day, gradtours.ItineraryService_AllDetails.ItineraryId, 
                         gradtours.ItineraryService_AllDetails.ServiceStartDate, gradtours.ItineraryService_AllDetails.TimeOfDayId, gradtours.ItineraryService_AllDetails.DateCreated, gradtours.ItineraryService_AllDetails.LastModified, 
                         gradtours.ItineraryService_AllDetails.Deleted, gradtours.ItineraryService2Booking_AllDetails.isactive, gradtours.ItineraryService2Booking_AllDetails.bookingid, gradtours.ItineraryService2Booking_AllDetails.bookingstatusid, 
                         gradtours.ItineraryService2Booking_AllDetails.vendornotes, gradtours.ItineraryService2Booking_AllDetails.actualCost_currencyId, gradtours.ItineraryService2Booking_AllDetails.actualCost, 
                         gradtours.ItineraryService2Booking_AllDetails.itineraryservice2costid, gradtours.ItineraryService2Booking_AllDetails.startdatetime, gradtours.ItineraryService2Booking_AllDetails.enddatetime, 
                         gradtours.ItineraryService2Booking_AllDetails.providerservicebookingid, gradtours.ItineraryService2Booking_AllDetails.itineraryservice2bookingid, gradtours.ItineraryService_AllDetails.VendorId, 
                         gradtours.ItineraryService_AllDetails.Alerts, gradtours.ItineraryService_AllDetails.Markup, gradtours.ItineraryService_AllDetails.IsCustomService, gradtours.ItineraryService_AllDetails.iscustom, 
                         gradtours.ItineraryService_AllDetails.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails.QuotedGroupAllocation, gradtours.ItineraryService_AllDetails.ItineraryCategoryId, 
                         gradtours.ItineraryService_AllDetails.IsAlertDismissed, gradtours.ItineraryService_AllDetails.CopiedFromItineraryServiceId, gradtours.ItineraryService2Booking_AllDetails.clientnotes, 
                         gradtours.ItineraryService2Booking_AllDetails.clientreference, gradtours.ItineraryService2Booking_AllDetails.driverid, gradtours.ItineraryService2Booking_AllDetails.actualConvertedCost, 
                         gradtours.ItineraryService2Booking_AllDetails.actualConvertedCost_CurrencyId, gradtours.ItineraryService_AllDetails.IsAlternateForService, '""' AS Details, gradtours.ItineraryService_AllDetails.UseCustomCost, 
                         gradtours.ItineraryService_AllDetails.DestinationLocaleName, gradtours.ItineraryService_AllDetails.DestinationLocaleId, gradtours.ItineraryService_AllDetails.SourceLocaleName, 
                         gradtours.ItineraryService_AllDetails.SourceLocaleId, gradtours.ItineraryService_AllDetails.ServiceDescriptionId, gradtours.ItineraryService_AllDetails.IsCommissionable, 
                         gradtours.ItineraryService_AllDetails.IsCustomServiceName, gradtours.ItineraryService2Booking_AllDetails.internalnotes, gradtours.ItineraryService_AllDetails.ActivityTypeName, 
                         gradtours.ItineraryService_AllDetails.ActivityTypeDisplayName, gradtours.ItineraryService_AllDetails.SimpleServiceName, gradtours.ItineraryService2Booking_AllDetails.critineraryserviceid, 
                         gradtours.ItineraryService_AllDetails.Comments, gradtours.ItineraryService_AllDetails.IsPackageService, gradtours.ItineraryService_AllDetails.DestinationLocaleIsGlobal, 
                         gradtours.ItineraryService_AllDetails.SourceLocaleIsGlobal, gradtours.ItineraryService_AllDetails.ClientServiceName, gradtours.ItineraryService_AllDetails.IsCustomGroupAllocation, 
                         gradtours.ItineraryService_AllDetails.ShowLocaleInfo, gradtours.ItineraryService2Booking_AllDetails.coaallocationid, gradtours.ItineraryService2Booking_AllDetails.systemofrecord, 
                         gradtours.ItineraryService_AllDetails.ActivityTypeId, gradtours.ItineraryService_AllDetails.PromotionType
FROM            gradtours.ItineraryService_AllDetails LEFT OUTER JOIN
                         gradtours.ItineraryService2Booking_AllDetails ON gradtours.ItineraryService_AllDetails.ItineraryServiceId = gradtours.ItineraryService2Booking_AllDetails.itineraryserviceid
WHERE        (ISNULL(gradtours.ItineraryService2Booking_AllDetails.isactive, 1) = 1) and gradtours.ItineraryService_AllDetails.Deleted=0

|||ItineraryService_AllDetails_WithBookingInfo_Beta
^^^CREATE VIEW [gradtours].[ItineraryService_AllDetails_WithBookingInfo_Beta]
AS
SELECT     TOP (100) PERCENT gradtours.ItineraryService_AllDetails_AllServiceTypes.globalServiceName, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.vendordisplayname, gradtours.ItineraryService_AllDetails_AllServiceTypes.ProviderId, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.ItineraryServiceId, gradtours.ItineraryService_AllDetails_AllServiceTypes.ItineraryDayId, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.ServiceId, gradtours.ItineraryService_AllDetails_AllServiceTypes.CustomServiceName, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.ProviderServiceId, gradtours.ItineraryService_AllDetails_AllServiceTypes.DisplayOrder, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.GlobalServiceId, gradtours.ItineraryService_AllDetails_AllServiceTypes.ParentItineraryServiceId, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.Duration, gradtours.ItineraryService_AllDetails_AllServiceTypes.Cost, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.ConvertedCost, gradtours.ItineraryService_AllDetails_AllServiceTypes.Cost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.ConvertedCost_CurrencyId, gradtours.ItineraryService_AllDetails_AllServiceTypes.Day, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.ItineraryId, gradtours.ItineraryService_AllDetails_AllServiceTypes.ServiceStartDate, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.LocationID, gradtours.ItineraryService_AllDetails_AllServiceTypes.LocationName, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.TimeOfDayId, gradtours.ItineraryService_AllDetails_AllServiceTypes.DateCreated, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.LastModified, gradtours.ItineraryService_AllDetails_AllServiceTypes.Deleted, 
                      gradtours.ItineraryService2Booking_AllDetails.IsActive, gradtours.ItineraryService2Booking_AllDetails.BookingId, 
                      gradtours.ItineraryService2Booking_AllDetails.BookingStatusId, gradtours.ItineraryService2Booking_AllDetails.ProviderServiceId AS Expr1, 
                      gradtours.ItineraryService2Booking_AllDetails.VendorNotes, gradtours.ItineraryService2Booking_AllDetails.vendordisplayname AS Expr2, 
                      gradtours.ItineraryService2Booking_AllDetails.ProviderId AS Expr3, gradtours.ItineraryService2Booking_AllDetails.actualCost_currencyId, 
                      gradtours.ItineraryService2Booking_AllDetails.actualCost, gradtours.ItineraryService2Booking_AllDetails.ItineraryService2CostId, 
                      gradtours.ItineraryService2Booking_AllDetails.StartDateTime, gradtours.ItineraryService2Booking_AllDetails.EndDateTime, 
                      gradtours.ItineraryService2Booking_AllDetails.ProviderServiceBookingId, gradtours.ItineraryService2Booking_AllDetails.ItineraryService2BookingId, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.VendorId, gradtours.ItineraryService_AllDetails_AllServiceTypes.Alerts, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.Markup, gradtours.ItineraryService_AllDetails_AllServiceTypes.IsCustom, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_AllServiceTypes.QuotedGroupAllocation, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.ItineraryCategoryId, gradtours.ItineraryService_AllDetails_AllServiceTypes.IsAlertDismissed, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.CopiedFromItineraryServiceId, gradtours.ItineraryService2Booking_AllDetails.ClientNotes, 
                      gradtours.ItineraryService2Booking_AllDetails.ClientReference, gradtours.ItineraryService2Booking_AllDetails.DriverId, 
                      gradtours.ItineraryService2Booking_AllDetails.actualConvertedCost, gradtours.ItineraryService2Booking_AllDetails.actualConvertedCost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails_AllServiceTypes.IsAlternateForService
FROM gradtours.ItineraryService_AllDetails_AllServiceTypes 
LEFT OUTER JOIN gradtours.ItineraryService2Booking_AllDetails 
ON gradtours.ItineraryService_AllDetails_AllServiceTypes.ItineraryServiceId = gradtours.ItineraryService2Booking_AllDetails.ItineraryServiceId 
AND gradtours.ItineraryService2Booking_AllDetails.IsActive = 1
ORDER BY gradtours.ItineraryService_AllDetails_AllServiceTypes.[Day], gradtours.ItineraryService_AllDetails_AllServiceTypes.DisplayOrder

|||ItineraryService_SurpriseAndDelight
^^^CREATE VIEW [gradtours].[ItineraryService_SurpriseAndDelight]
AS
SELECT                  
gradtours.ItineraryService.CustomServiceName as ServiceName,
gradtours.QuoteAgent.Name as QuoteAgentName,  
gradtours.Trip.TripReference, 
gradtours.ItineraryDay.Day,
gradtours.ItineraryQuote.ItineraryStartDate + (gradtours.ItineraryDay.Day - 1) AS ServiceStartDate,
gradtours.ItineraryService2Cost.ConvertedCost as ServiceCostUSD,
gradtours.Trip.TripStartDate, 
gradtours.Trip.BookedDate,
gradtours.vendors.vendorName as Vendor,
gradtours.ItineraryService.ItineraryServiceId,
gradtours.ServiceDescription.ActivityTypeName,
gradtours.COAAllocation.Name as TripSalesAllocation,
isnull(sum(gradtours.TravelerInvoices.AmountUSD),0) as TripPrice
 FROM         
gradtours.ItineraryService INNER JOIN
gradtours.vendors WITH(FORCESEEK) ON gradtours.ItineraryService.VendorId = gradtours.vendors.vendorId LEFT JOIN
gradtours.ItineraryDay WITH(FORCESEEK) ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
gradtours.Itinerary ON gradtours.ItineraryDay.ItineraryId = gradtours.Itinerary.ItineraryId INNER JOIN
gradtours.ItineraryService2Cost ON gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = gradtours.ItineraryService2Cost.ItineraryService2CostId AND gradtours.ItineraryService2Cost.Deleted = 0 INNER JOIN
gradtours.ServiceDescription ON gradtours.ServiceDescription.ServiceDescriptionId = gradtours.ItineraryService.ServiceDescriptionId INNER JOIN 
gradtours.ItineraryQuote ON gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId AND gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId AND gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId INNER JOIN
gradtours.Trip on gradtours.Trip.Computed_ItineraryId = gradtours.ItineraryDay.ItineraryId LEFT JOIN
gradtours.Product on gradtours.Trip.TripId = gradtours.Product.TripId LEFT JOIN
gradtours.ProductItem on gradtours.Product.ProductId = gradtours.ProductItem.ProductId and replace(gradtours.ProductItem.SystemOfRecordId,'KT:TS-','') = gradtours.ItineraryService.ItineraryServiceId and gradtours.ProductItem.ServiceId = 2   LEFT JOIN
gradtours.TravelerInvoices on gradtours.TravelerInvoices.ProductId = gradtours.Product.ProductId AND gradtours.Product.ProductTypeId = 1 AND gradtours.Product.Cancelled=0   INNER JOIN 
gradtours.QuoteAgent on  gradtours.QuoteAgent.QuoteAgentId = gradtours.Trip.QuoteAgentId LEFT JOIN 
gradtours.COAAllocation on gradtours.COAAllocation.COAAllocationId = gradtours.Trip.salescoaallocationid  
WHERE gradtours.ServiceDescription.ActivityTypeId = 37  and gradtours.ItineraryService.Deleted = 0  and CHARINDEX('KT:TS-', gradtours.ProductItem.SystemOfRecordId) > 0 and gradtours.ProductItem.IsCancelled = 0 and gradtours.ProductItem.IsArchived = 0
GROUP BY
gradtours.ItineraryService.CustomServiceName,
gradtours.QuoteAgent.Name,  
gradtours.Trip.TripReference, 
gradtours.ItineraryDay.Day,
gradtours.ItineraryQuote.ItineraryStartDate + (gradtours.ItineraryDay.Day - 1),
gradtours.ItineraryService2Cost.ConvertedCost,
gradtours.Trip.TripStartDate, 
gradtours.Trip.BookedDate,
gradtours.vendors.vendorName,
gradtours.ItineraryService.ItineraryServiceId,
gradtours.ServiceDescription.ActivityTypeName,
gradtours.COAAllocation.Name

|||ItineraryService2Booking_AllDetails
^^^--KT-4261 missing scripts
CREATE   VIEW [gradtours].[ItineraryService2Booking_AllDetails] 
AS 
  SELECT b.itineraryservice2bookingid, 
         b.itineraryserviceid, 
         b.bookingid, 
         b.bookingstatusid, 
         b.providerserviceid, 
         b.vendorid, 
         b.vendornotes, 
         b.providerservicebookingid, 
         b.isactive, 
         b.startdatetime, 
         b.enddatetime, 
         b.itineraryservice2costid, 
         b.datecreated, 
         b.lastmodified, 
         c.cost                     AS actualCost, 
         c.cost_currencyid          AS actualCost_currencyId, 
         gradtours.vendors.providerid, 
         gradtours.vendors.vendordisplayname, 
		 gradtours.vendors.ApplyArbitrageFee,
		 gradtours.vendors.HideInDropdown,
         b.clientnotes, 
         b.clientreference, 
         b.driverid, 
         c.convertedcost            AS actualConvertedCost, 
         c.convertedcost_currencyid AS actualConvertedCost_CurrencyId, 
         internalnotes, 
         b.critineraryserviceid, 
         b.coaallocationid,
		 b.systemofrecord 
  FROM   gradtours.itineraryservice2booking AS b 
         INNER JOIN gradtours.vendors 
                 ON b.vendorid = gradtours.vendors.vendorid 
         LEFT OUTER JOIN gradtours.itineraryservice2cost AS c 
                      ON b.itineraryservice2costid = c.itineraryservice2costid 

|||ItineraryServiceAlternates_Hotel
^^^CREATE VIEW [gradtours].[ItineraryServiceAlternates_Hotel]
AS
SELECT     gradtours.ItineraryServiceAlternates.ServiceId, gradtours.ItineraryServiceAlternates.ItineraryServiceId, gradtours.ItineraryServiceAlternates.GlobalServiceId, 
                      gradtours.ItineraryServiceAlternates.DisplayOrder, gradtours.ItineraryServiceAlternates.ProviderServiceId, gradtours.ItineraryServiceAlternates.VendorId, 
                      gradtours.ItineraryServiceAlternates.ItineraryServiceAlternatesId, REPLACE(gradtours.GlobalHotel.Name, '''', '`') 
                      + CASE gradtours.GlobalHotelRoom.RoomName WHEN 'n/a' THEN '' ELSE ' (' + REPLACE(gradtours.GlobalHotelRoom.RoomName, '''', '`') 
                      + ')' END AS globalServiceName, gradtours.GlobalHotel.LocaleId, gradtours.ItineraryServiceAlternates.SourceLocaleId, 
                      gradtours.ItineraryServiceAlternates.DestinationLocaleId
FROM         gradtours.ItineraryServiceAlternates INNER JOIN
                      gradtours.GlobalHotelRoom ON gradtours.ItineraryServiceAlternates.GlobalServiceId = gradtours.GlobalHotelRoom.gHotelRoomId INNER JOIN
                      gradtours.GlobalHotel ON gradtours.GlobalHotelRoom.gHotelId = gradtours.GlobalHotel.gHotelId
WHERE     (gradtours.ItineraryServiceAlternates.Deleted = 0) AND (gradtours.GlobalHotel.Deleted = 0) AND (gradtours.GlobalHotelRoom.Deleted = 0) AND 
                      (gradtours.ItineraryServiceAlternates.ServiceId = 1)

|||ItineraryServiceAlternates_Hotel_NoGlobal
^^^CREATE VIEW [gradtours].[ItineraryServiceAlternates_Hotel_NoGlobal]
AS
SELECT     gradtours.ItineraryServiceAlternates.ServiceId, gradtours.ItineraryServiceAlternates.ItineraryServiceId, gradtours.ItineraryServiceAlternates.GlobalServiceId, 
                      gradtours.ItineraryServiceAlternates.DisplayOrder, gradtours.ItineraryServiceAlternates.ProviderServiceId, gradtours.ItineraryServiceAlternates.VendorId, 
                      gradtours.ItineraryServiceAlternates.ItineraryServiceAlternatesId, REPLACE(gradtours.Hotel.Name, '''', '`') 
                      + CASE gradtours.HotelRoomCategory.Name WHEN 'n/a' THEN '' ELSE ' (' + REPLACE(gradtours.HotelRoomCategory.Name, '''', '`') + ')' END AS globalServiceName, 
                      gradtours.Hotel.LocaleId, gradtours.ItineraryServiceAlternates.SourceLocaleId, gradtours.ItineraryServiceAlternates.DestinationLocaleId
FROM         gradtours.Hotel INNER JOIN
                      gradtours.HotelRoomCategory ON gradtours.Hotel.HotelId = gradtours.HotelRoomCategory.HotelId INNER JOIN
                      gradtours.ItineraryServiceAlternates ON gradtours.HotelRoomCategory.HotelRoomCategoryId = gradtours.ItineraryServiceAlternates.ProviderServiceId
WHERE     (gradtours.ItineraryServiceAlternates.Deleted = 0) AND (gradtours.ItineraryServiceAlternates.ServiceId = 1) AND (gradtours.HotelRoomCategory.Deleted = 0 OR
                      gradtours.HotelRoomCategory.Deleted IS NULL) AND (gradtours.Hotel.Deleted = 0 OR
                      gradtours.Hotel.Deleted IS NULL)

|||ItineraryServiceServiceSeason
^^^CREATE VIEW [gradtours].[ItineraryServiceServiceSeason]
AS
SELECT     gradtours.Rate.RateId, gradtours.Rate.RateTypeId, gradtours.Rate.PerPerson, gradtours.Rate.PerVehicle, gradtours.Rate.Flat, gradtours.Rate.ServiceId, 
                      gradtours.ItineraryServiceSeason.ItineraryServiceSeasonId AS SeasonId, gradtours.ItineraryServiceSeason.CurrencyId, gradtours.ItineraryServiceSeason.Name, 
                      gradtours.ItineraryServiceVendorActivity.ServiceRateTypeId, gradtours.ItineraryServiceVendorActivity.VendorId, gradtours.ItineraryServiceSeason.StartDate, 
                      gradtours.ItineraryServiceSeason.EndDate, gradtours.ItineraryServiceSeason2Rate.ItineraryService2VendorRateTypeId AS ProviderServiceId, 
                      gradtours.ItineraryServiceSeason2Rate.ItineraryServiceId AS GlobalServiceId, gradtours.ItineraryService2VendorRateType.Name AS SubItemName, 
                      gradtours.ItineraryService2VendorRateType.Capacity, ISNULL(gradtours.ItineraryServiceVendorActivity.Deleted, 0) 
                      | ISNULL(gradtours.ItineraryService2VendorRateType.Deleted, 0) | ISNULL(gradtours.ItineraryServiceSeason2Rate.Deleted, 0) 
                      | ISNULL(gradtours.ItineraryServiceSeason.Deleted, 0) | ISNULL(gradtours.Rate.Deleted, 0) AS Deleted, NULL AS RateStructureSetupId, 
                      gradtours.Rate.RateSetupId, NULL AS AdultCapacity, NULL AS MaxKidCapacity, NULL AS MaxKidAge, NULL AS subItemId
FROM         gradtours.ItineraryService2VendorRateType INNER JOIN
                      gradtours.ItineraryServiceSeason2Rate ON 
                      gradtours.ItineraryService2VendorRateType.ItineraryService2VendorRateTypeId = gradtours.ItineraryServiceSeason2Rate.ItineraryService2VendorRateTypeId INNER JOIN
                      gradtours.ItineraryServiceSeason ON 
                      gradtours.ItineraryServiceSeason2Rate.ItineraryServiceSeasonId = gradtours.ItineraryServiceSeason.ItineraryServiceSeasonId INNER JOIN
                      gradtours.Rate ON gradtours.ItineraryServiceSeason2Rate.RateId = gradtours.Rate.RateId INNER JOIN
                      gradtours.ItineraryServiceVendorActivity ON 
                      gradtours.ItineraryService2VendorRateType.ItineraryServiceId = gradtours.ItineraryServiceVendorActivity.ItineraryServiceId

|||ItineraryTrip_RevenueAllocationByCOAAllocationByDate
^^^CREATE VIEW [gradtours].[ItineraryTrip_RevenueAllocationByCOAAllocationByDate]
AS
	SELECT TOP (100) PERCENT
		tl.TripLedgerId
		, t.TripId
		/*
		-- THIS IS A TOTAL AND UTTER HACK, DEAN NEEDS TO REVISIT THIS. Needed to include the target margin portion of agent commissions as COGS
		, CASE
			WHEN v.vendorTypeId = 2 THEN CASE WHEN i.coaallocationid NOT IN (55,56) THEN 1 ELSE 2 END
			ELSE ISNULL(a.vendorTypeId, v.vendorTypeId) END AS vendorTypeId
			
			Kirstie took this hack out. We are just showing all commission under expense - even the target margin portion
		*/
		,ISNULL(a.vendorTypeId, v.vendorTypeId) AS vendorTypeId
		, COALESCE(i.coaallocationid, v.coaallocationid, c2l.coaallocationid, a.coaallocationid ,1) AS coaallocationid
		, SUM(AmountUSD) AS RevenueUSD
	FROM
		TripLedger tl
		INNER JOIN ItineraryServiceRevenueAllocation a ON a.tripledgerid = tl.tripledgerid
		LEFT OUTER JOIN ProductItem i ON a.ProductItemId = i.ProductItemId
		LEFT OUTER JOIN gradtours.vendors v ON v.vendorid = i.vendorid
		LEFT OUTER JOIN coaallocation2locale c2l ON c2l.localeid = v.saleslocaleid
		LEFT JOIN Product p on tl.ProductId = p.ProductId  
		LEFT JOIN Trip t on t.TripId = p.TripId
	GROUP BY
		tl.TripLedgerId
		, COALESCE(i.coaallocationid, v.coaallocationid, c2l.coaallocationid, a.coaallocationid ,1)
		/*
		, CASE
			WHEN v.vendorTypeId = 2 THEN CASE WHEN i.coaallocationid NOT IN (55,56) THEN 1 ELSE 2 END
			ELSE ISNULL(a.vendorTypeId, v.vendorTypeId) END
		*/
		,ISNULL(a.vendorTypeId, v.vendorTypeId)
		, t.TripId

|||ItineraryTrip_TravelerRevenueByInvoiceTypeId
^^^CREATE VIEW [gradtours].[ItineraryTrip_TravelerRevenueByInvoiceTypeId]
AS            
SELECT     gradtours.traveler.travelerId, 
			gradtours.traveler.clientid, 
			gradtours.traveler.TripItineraryId AS itineraryId, 
			TravelerInvoices.invoicetypeid, --MIN(gradtours.TravelerInvoices.DueDate) AS DepositDueDate, MAX(gradtours.TravelerInvoices.DueDate) AS DueDate,             
						gradtours.TravelerInvoices.DueDate,
                      ISNULL(SUM(gradtours.TravelerInvoices.Amount), 0) AS adjustedPrice, ISNULL(gradtours.TravelerInvoices.CurrencyId, gradtours.traveler.tripprice_currencyId) AS adjustedPrice_CurrencyId,             
                      ISNULL(SUM(gradtours.TravelerInvoices.AmountUSD), 0) AS adjustedPriceUSD, ISNULL            
                          ((SELECT     SUM(TravelerInvoices_1.Amount) AS Expr1            
                              FROM         gradtours.TravelerInvoices AS TravelerInvoices_1 
												--INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_1 ON TravelerInvoices_1.InvoiceTypeId = travelerinvoicetype_1.InvoiceTypeId            
                              WHERE     TravelerInvoices.CurrencyId = TravelerInvoices_1.CurrencyId AND TravelerInvoices_1.TravelerId = gradtours.traveler.travelerId -- AND TravelerInvoices_1.BilledDate = MIN(gradtours.TravelerInvoices.BilledDate)) AND   
  
          
                                                  --  (travelerinvoicetype_1.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)
                                                  ), 0) AS quotedPrice,             
                      ISNULL(gradtours.TravelerInvoices.CurrencyId, gradtours.traveler.tripprice_currencyId) AS quotedPrice_CurrencyId, ISNULL            
                          ((SELECT     SUM(TravelerInvoices_1.AmountUSD) AS Expr1            
                              FROM         gradtours.TravelerInvoices AS TravelerInvoices_1 INNER JOIN            
                                                    gradtours.TravelerInvoiceType AS travelerinvoicetype_1 ON TravelerInvoices_1.InvoiceTypeId = travelerinvoicetype_1.InvoiceTypeId            
                              WHERE     (TravelerInvoices.CurrencyId = TravelerInvoices_1.CurrencyId AND TravelerInvoices_1.BilledDate = MIN(gradtours.TravelerInvoices.BilledDate)) AND (TravelerInvoices_1.TravelerId = gradtours.traveler.travelerId) AND   
  
          
                                                    (travelerinvoicetype_1.InvoiceTypeId = gradtours.TravelerInvoices.InvoiceTypeId)), 0) AS quotedPriceUSD,     
                                                        
                      ISNULL ((SELECT SUM(gradtours.TravelerPaymentAllocation.SourceAmount) AS Expr1            
                              FROM  gradtours.TravelerPaymentAllocation --INNER JOIN            
                                    --gradtours.TravelerInvoiceType AS travelerinvoicetype_2 ON gradtours.TravelerPayments.InvoiceTypeid = travelerinvoicetype_2.InvoiceTypeId            
                              WHERE (TravelerInvoices.CurrencyId = TravelerPaymentAllocation.SourceCurrencyId AND gradtours.TravelerPaymentAllocation.ClientId = gradtours.traveler.clientid) AND (gradtours.TravelerPaymentAllocation.TravelerId = gradtours.traveler.travelerId) AND    
  
         
                                                    (TravelerPaymentAllocation.InvoiceTypeId = gradtours.TravelerInvoices.InvoiceTypeId)), 0) AS payment,             
                      ISNULL(gradtours.TravelerInvoices.CurrencyId, traveler.tripprice_currencyId) AS payment_currencyid, ISNULL            
                          ((SELECT     SUM(TravelerPayments_1.AmountUSD) AS Expr1            
                              FROM         gradtours.TravelerPaymentAllocation AS TravelerPayments_1 --INNER JOIN            
                                                    --gradtours.TravelerInvoiceType AS travelerinvoicetype_2 ON TravelerPayments_1.InvoiceTypeid = travelerinvoicetype_2.InvoiceTypeId          
                              WHERE     (TravelerInvoices.CurrencyId = TravelerPayments_1.SourceCurrencyId AND TravelerPayments_1.ClientId = gradtours.traveler.clientid) AND (TravelerPayments_1.TravelerId = gradtours.traveler.travelerId) AND             
                                                    (TravelerPayments_1.InvoiceTypeId = gradtours.TravelerInvoices.InvoiceTypeId)), 0) AS paymentUSD --, ISNULL            
                          --((SELECT     SUM(TravelerInvoices_3.Amount) AS Expr1            
                          --    FROM         gradtours.TravelerInvoices AS TravelerInvoices_3 INNER JOIN            
                          --                          gradtours.TravelerInvoiceType AS travelerinvoicetype_3 ON TravelerInvoices_3.InvoiceTypeId = travelerinvoicetype_3.InvoiceTypeId            
                          --    WHERE     (TravelerInvoices_3.InvoiceTypeId = 3) AND (TravelerInvoices_3.TravelerId = gradtours.traveler.travelerId) AND             
                          --                          (travelerinvoicetype_3.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS depositPrice, ISNULL            
                          --((SELECT     SUM(TravelerPayments_4.SourceAmount) AS Expr1            
                          --    FROM         gradtours.TravelerPayments AS TravelerPayments_4 INNER JOIN            
                          --                          gradtours.TravelerInvoiceType AS travelerinvoicetype_4 ON TravelerPayments_4.InvoiceTypeid = travelerinvoicetype_4.InvoiceTypeId            
                          --    WHERE     (TravelerPayments_4.InvoiceTypeid = 3) AND (TravelerPayments_4.TravelerId = gradtours.traveler.travelerId) AND             
                          --                          (travelerinvoicetype_4.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS depositPayment            
FROM         gradtours.traveler LEFT OUTER JOIN            
                      gradtours.TravelerInvoices ON gradtours.traveler.travelerId = gradtours.TravelerInvoices.TravelerId --LEFT OUTER JOIN            
                      --gradtours.TravelerInvoiceType ON gradtours.TravelerInvoiceType.InvoiceTypeId = gradtours.TravelerInvoices.InvoiceTypeId            
GROUP BY gradtours.traveler.travelerId, gradtours.traveler.clientid, gradtours.traveler.TripItineraryId, gradtours.TravelerInvoices.CurrencyId,             
                      gradtours.TravelerInvoices.invoicetypeid, gradtours.traveler.tripprice_currencyId  ,  gradtours.TravelerInvoices.duedate      

|||ItineraryTrip_TravelerRevenueSummary
^^^CREATE VIEW [gradtours].[ItineraryTrip_TravelerRevenueSummary]          
AS          
SELECT     gradtours.traveler.travelerId, gradtours.traveler.clientid, gradtours.traveler.TripItineraryId AS itineraryId, ISNULL(gradtours.TravelerInvoiceType.ParentInvoiceTypeId,           
                      1) AS clientpaymenttypeid, MIN(gradtours.TravelerInvoices.DueDate) AS DepositDueDate, MAX(gradtours.TravelerInvoices.DueDate) AS DueDate,           
                      ISNULL(SUM(gradtours.TravelerInvoices.Amount), 0) AS adjustedPrice, ISNULL(gradtours.TravelerInvoices.CurrencyId, gradtours.traveler.tripprice_currencyId) AS adjustedPrice_CurrencyId,           
                      ISNULL(SUM(gradtours.TravelerInvoices.AmountUSD), 0) AS adjustedPriceUSD, ISNULL          
                          ((SELECT     SUM(TravelerInvoices_1.Amount) AS Expr1          
                              FROM         gradtours.TravelerInvoices AS TravelerInvoices_1 INNER JOIN          
                                                    gradtours.TravelerInvoiceType AS travelerinvoicetype_1 ON TravelerInvoices_1.InvoiceTypeId = travelerinvoicetype_1.InvoiceTypeId          
                              WHERE     (TravelerInvoices.CurrencyId = TravelerInvoices_1.CurrencyId AND TravelerInvoices_1.BilledDate = MIN(gradtours.TravelerInvoices.BilledDate)) AND (TravelerInvoices_1.TravelerId = gradtours.traveler.travelerId) AND   
        
                                                    (travelerinvoicetype_1.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS quotedPrice,           
                      ISNULL(gradtours.TravelerInvoices.CurrencyId, gradtours.traveler.tripprice_currencyId) AS quotedPrice_CurrencyId, ISNULL          
                          ((SELECT     SUM(TravelerInvoices_1.AmountUSD) AS Expr1          
                              FROM         gradtours.TravelerInvoices AS TravelerInvoices_1 INNER JOIN          
                                                    gradtours.TravelerInvoiceType AS travelerinvoicetype_1 ON TravelerInvoices_1.InvoiceTypeId = travelerinvoicetype_1.InvoiceTypeId          
                              WHERE     (TravelerInvoices.CurrencyId = TravelerInvoices_1.CurrencyId AND TravelerInvoices_1.BilledDate = MIN(gradtours.TravelerInvoices.BilledDate)) AND (TravelerInvoices_1.TravelerId = gradtours.traveler.travelerId) AND   
        
                                                    (travelerinvoicetype_1.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS quotedPriceUSD,   
                                                      
                      ISNULL ((SELECT SUM(gradtours.TravelerPaymentAllocation.SourceAmount) AS Expr1          
                              FROM  gradtours.TravelerPaymentAllocation INNER JOIN          
                                    gradtours.TravelerInvoiceType AS travelerinvoicetype_2 ON gradtours.TravelerPaymentAllocation.InvoiceTypeid = travelerinvoicetype_2.InvoiceTypeId          
                              WHERE (TravelerInvoices.CurrencyId = TravelerPaymentAllocation.SourceCurrencyId AND gradtours.TravelerPaymentAllocation.ClientId = gradtours.traveler.clientid) AND (gradtours.TravelerPaymentAllocation.TravelerId = gradtours.traveler.travelerId) AND    
       
                                                    (travelerinvoicetype_2.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS payment,           
                      ISNULL(gradtours.TravelerInvoices.CurrencyId, traveler.tripprice_currencyId) AS payment_currencyid, ISNULL          
                          ((SELECT     SUM(TravelerPayments_1.AmountUSD) AS Expr1          
                              FROM         gradtours.TravelerPaymentAllocation AS TravelerPayments_1 INNER JOIN          
                                                    gradtours.TravelerInvoiceType AS travelerinvoicetype_2 ON TravelerPayments_1.InvoiceTypeid = travelerinvoicetype_2.InvoiceTypeId        
                              WHERE     (TravelerInvoices.CurrencyId = TravelerPayments_1.SourceCurrencyId AND TravelerPayments_1.ClientId = gradtours.traveler.clientid) AND (TravelerPayments_1.TravelerId = gradtours.traveler.travelerId) AND           
                                                    (travelerinvoicetype_2.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS paymentUSD, ISNULL          
                          ((SELECT     SUM(TravelerInvoices_3.Amount) AS Expr1          
                              FROM         gradtours.TravelerInvoices AS TravelerInvoices_3 INNER JOIN          
                                                    gradtours.TravelerInvoiceType AS travelerinvoicetype_3 ON TravelerInvoices_3.InvoiceTypeId = travelerinvoicetype_3.InvoiceTypeId          
                              WHERE     (TravelerInvoices_3.InvoiceTypeId = 3) AND (TravelerInvoices_3.TravelerId = gradtours.traveler.travelerId) AND           
                                                    (travelerinvoicetype_3.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS depositPrice, ISNULL          
                          ((SELECT     SUM(TravelerPayments_4.SourceAmount) AS Expr1          
                              FROM         gradtours.TravelerPaymentAllocation AS TravelerPayments_4 INNER JOIN          
                                                    gradtours.TravelerInvoiceType AS travelerinvoicetype_4 ON TravelerPayments_4.InvoiceTypeid = travelerinvoicetype_4.InvoiceTypeId          
                              WHERE     (TravelerPayments_4.InvoiceTypeid = 3) AND (TravelerPayments_4.TravelerId = gradtours.traveler.travelerId) AND           
                                                    (travelerinvoicetype_4.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS depositPayment          
FROM         gradtours.traveler LEFT OUTER JOIN          
                      gradtours.TravelerInvoices ON gradtours.traveler.travelerId = gradtours.TravelerInvoices.TravelerId LEFT OUTER JOIN          
                      gradtours.TravelerInvoiceType ON gradtours.TravelerInvoiceType.InvoiceTypeId = gradtours.TravelerInvoices.InvoiceTypeId          
GROUP BY gradtours.traveler.travelerId, gradtours.traveler.clientid, gradtours.traveler.TripItineraryId, gradtours.TravelerInvoices.CurrencyId,           
                      gradtours.TravelerInvoiceType.ParentInvoiceTypeId, gradtours.traveler.tripprice_currencyId      

|||ItineraryTrip_VendorCostSummary
^^^/*-----------------------------------------------------------------------------------------*/
CREATE VIEW [gradtours].[ItineraryTrip_VendorCostSummary]
AS
SELECT     TOP (100) PERCENT gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId,   
                      gradtours.vendors.vendordisplayname, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.VendorTypeId,   
                      gradtours.vendors.LocaleId, ISNULL(gradtours.vendors.ParentId, gradtours.vendors.vendorId) AS ParentVendorId, SUM(ISNULL(ItineraryService2Cost_Actual.Cost, 0))   
                      AS ActualCost, ISNULL(ItineraryService2Cost_Actual.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId) AS ActualCost_CurrencyId,   
                      SUM(ISNULL(ItineraryService2Cost_Quoted.Cost, 0)) AS QuotedCost, ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId)   
                      AS QuotedCost_CurrencyId, SUM(ISNULL(ItineraryService2Cost_Actual.ConvertedCost, 0)) AS ActualConvertedCost,   
                      ISNULL(ItineraryService2Cost_Actual.ConvertedCost_CurrencyId, gradtours.vendors.DefaultCurrencyId) AS ActualConvertedCost_CurrencyId,   
                      SUM(ISNULL(ItineraryService2Cost_Quoted.ConvertedCost, 0)) AS QuotedConvertedCost, ISNULL(ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId,   
                      gradtours.vendors.DefaultCurrencyId) AS QuotedConvertedCost_CurrencyId,   
                      SUM(ISNULL(CASE WHEN ItineraryService2Cost_Actual.Cost_CurrencyId = 1 THEN ItineraryService2Cost_Actual.Cost WHEN ItineraryService2Cost_Actual.ConvertedCost_CurrencyId  
                       = 1 THEN ItineraryService2Cost_Actual.ConvertedCost ELSE (ItineraryService2Cost_Actual.Cost * ISNULL(gradtours.CurrencyConversion.ToBase, 1))    END, 0))
                      AS ActualCostUSD,   
                      SUM(ISNULL(CASE WHEN ItineraryService2Cost_Quoted.Cost_CurrencyId = 1 THEN ItineraryService2Cost_Quoted.Cost WHEN ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId  
                       = 1 THEN ItineraryService2Cost_Quoted.ConvertedCost ELSE (ItineraryService2Cost_Quoted.Cost * ISNULL(CurrencyConversion_1.ToBase, 1))  END, 0)  )
                      AS QuotedCostUSD  
FROM         gradtours.vendors INNER JOIN  
                      gradtours.ItineraryService2Booking ON gradtours.vendors.vendorId = gradtours.ItineraryService2Booking.VendorId INNER JOIN  
                      gradtours.ItineraryService ON gradtours.vendors.vendorId = gradtours.ItineraryService.VendorId AND   
                      gradtours.ItineraryService2Booking.ItineraryServiceId = gradtours.ItineraryService.ItineraryServiceId INNER JOIN  
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId LEFT OUTER JOIN  
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Actual ON   
                      gradtours.ItineraryService2Booking.ItineraryService2CostId = ItineraryService2Cost_Actual.ItineraryService2CostId INNER JOIN  
                      gradtours.bookingStatus ON gradtours.ItineraryService2Booking.BookingStatusId = gradtours.bookingStatus.bookingStatusId INNER JOIN  
                      gradtours.ItineraryQuote ON gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN  
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Quoted ON   
                      gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = ItineraryService2Cost_Quoted.ItineraryService2CostId LEFT OUTER JOIN  
                      gradtours.CurrencyConversion ON   
                      ItineraryService2Cost_Actual.ToUSDCurrencyConversionId = gradtours.CurrencyConversion.CurrencyConversionId LEFT OUTER JOIN  
                      gradtours.CurrencyConversion AS CurrencyConversion_1 ON   
                      ItineraryService2Cost_Quoted.ToUSDCurrencyConversionId = CurrencyConversion_1.CurrencyConversionId  
WHERE     (gradtours.bookingStatus.IncludedWhenCalculatingCost = 1) AND (gradtours.ItineraryService.Deleted = 0)  
GROUP BY gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId,   
                      gradtours.vendors.vendordisplayname, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.ParentId,   
                      gradtours.vendors.VendorTypeId, gradtours.vendors.LocaleId, ISNULL(ItineraryService2Cost_Actual.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId),   
                      ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId), ISNULL(ItineraryService2Cost_Actual.ConvertedCost_CurrencyId,   
                      gradtours.vendors.DefaultCurrencyId), ISNULL(ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId, gradtours.vendors.DefaultCurrencyId)  
                      
;

|||ItineraryTrip_VendorCostSummary_backupBeforeShowingAllVendors__
^^^/*-----------------------------------------------------------------------------------------*/    
CREATE VIEW [gradtours].[ItineraryTrip_VendorCostSummary_backupBeforeShowingAllVendors__]
AS    
SELECT     TOP (100) PERCENT gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId,     
                      gradtours.vendors.vendordisplayname, gradtours.vendors.PaymentTerms, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.VendorTypeId,     
                      gradtours.vendors.LocaleId, ISNULL(gradtours.vendors.ParentId, gradtours.vendors.vendorId) AS ParentVendorId, ISNULL(SUM(ItineraryService2Cost_Actual.Cost), 0)     
                      AS ActualCost, ItineraryService2Cost_Actual.Cost_CurrencyId AS ActualCost_CurrencyId, ISNULL(SUM(ItineraryService2Cost_Quoted.Cost), 0) AS QuotedCost,     
                      ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, 1) AS QuotedCost_CurrencyId, ISNULL(SUM(ItineraryService2Cost_Actual.ConvertedCost), 0)     
                      AS ActualConvertedCost, ItineraryService2Cost_Actual.ConvertedCost_CurrencyId AS ActualConvertedCost_CurrencyId,     
                      ISNULL(SUM(ItineraryService2Cost_Quoted.ConvertedCost), 0) AS QuotedConvertedCost, ISNULL(ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId, 1)     
                      AS QuotedConvertedCost_CurrencyId,     
                      SUM(CASE WHEN ItineraryService2Cost_Actual.Cost_CurrencyId = 1 THEN ItineraryService2Cost_Actual.Cost WHEN ItineraryService2Cost_Actual.ConvertedCost_CurrencyId    
                       = 1 THEN ItineraryService2Cost_Actual.ConvertedCost ELSE (ItineraryService2Cost_Actual.Cost * ISNULL(gradtours.CurrencyConversion.ToBase, 1)) END)     
                      AS ActualCostUSD,     
                      SUM(CASE WHEN ItineraryService2Cost_Quoted.Cost_CurrencyId = 1 THEN ItineraryService2Cost_Quoted.Cost WHEN ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId    
                       = 1 THEN ItineraryService2Cost_Quoted.ConvertedCost ELSE (ItineraryService2Cost_Quoted.Cost * ISNULL(CurrencyConversion_1.ToBase, 1)) END)     
                      AS QuotedCostUSD    
FROM         gradtours.vendors INNER JOIN    
                      gradtours.ItineraryService2Booking ON gradtours.vendors.vendorId = gradtours.ItineraryService2Booking.VendorId INNER JOIN    
                      gradtours.ItineraryService ON gradtours.vendors.vendorId = gradtours.ItineraryService.VendorId AND     
                      gradtours.ItineraryService2Booking.ItineraryServiceId = gradtours.ItineraryService.ItineraryServiceId INNER JOIN    
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN    
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Actual ON     
                      gradtours.ItineraryService2Booking.ItineraryService2CostId = ItineraryService2Cost_Actual.ItineraryService2CostId INNER JOIN    
                      gradtours.bookingStatus ON gradtours.ItineraryService2Booking.BookingStatusId = gradtours.bookingStatus.bookingStatusId INNER JOIN    
                      gradtours.ItineraryQuote ON gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN    
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Quoted ON     
                      gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = ItineraryService2Cost_Quoted.ItineraryService2CostId LEFT OUTER JOIN    
                      gradtours.CurrencyConversion ON     
                      ItineraryService2Cost_Actual.ToUSDCurrencyConversionId = gradtours.CurrencyConversion.CurrencyConversionId LEFT OUTER JOIN    
                      gradtours.CurrencyConversion AS CurrencyConversion_1 ON     
                      ItineraryService2Cost_Quoted.ToUSDCurrencyConversionId = CurrencyConversion_1.CurrencyConversionId    
WHERE     (gradtours.bookingStatus.IncludedWhenCalculatingCost = 1) AND (gradtours.ItineraryService.Deleted = 0)    
GROUP BY gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId,     
                      gradtours.vendors.vendordisplayname, gradtours.vendors.PaymentTerms, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.ParentId,     
                      gradtours.vendors.VendorTypeId, gradtours.vendors.LocaleId, ItineraryService2Cost_Actual.Cost_CurrencyId, ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId,     
                      1), ItineraryService2Cost_Actual.ConvertedCost_CurrencyId, ISNULL(ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId, 1) 
;

|||ItineraryTrip_VendorCostSummary_DC_JustActualCosts__
^^^CREATE view [gradtours].[ItineraryTrip_VendorCostSummary_DC_JustActualCosts__]
AS
SELECT     TOP (100) PERCENT gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId,   
                      gradtours.vendors.vendordisplayname, gradtours.vendors.PaymentTerms, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.VendorTypeId,   
                      gradtours.vendors.LocaleId, ISNULL(gradtours.vendors.ParentId, gradtours.vendors.vendorId) AS ParentVendorId, ISNULL(SUM(ItineraryService2Cost_Actual.Cost), 0)   
                      AS ActualCost, ISNULL(ItineraryService2Cost_Actual.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId) AS ActualCost_CurrencyId
                      
FROM         gradtours.vendors INNER JOIN  
                      gradtours.ItineraryService2Booking ON gradtours.vendors.vendorId = gradtours.ItineraryService2Booking.VendorId INNER JOIN  
                      gradtours.ItineraryService ON gradtours.vendors.vendorId = gradtours.ItineraryService.VendorId AND   
                      gradtours.ItineraryService2Booking.ItineraryServiceId = gradtours.ItineraryService.ItineraryServiceId INNER JOIN  
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId LEFT OUTER JOIN  
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Actual ON   
                      gradtours.ItineraryService2Booking.ItineraryService2CostId = ItineraryService2Cost_Actual.ItineraryService2CostId INNER JOIN  
                      gradtours.bookingStatus ON gradtours.ItineraryService2Booking.BookingStatusId = gradtours.bookingStatus.bookingStatusId INNER JOIN  
                      gradtours.ItineraryQuote ON gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN  
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Quoted ON   
                      gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = ItineraryService2Cost_Quoted.ItineraryService2CostId LEFT OUTER JOIN  
                      gradtours.CurrencyConversion ON   
                      ItineraryService2Cost_Actual.ToUSDCurrencyConversionId = gradtours.CurrencyConversion.CurrencyConversionId LEFT OUTER JOIN  
                      gradtours.CurrencyConversion AS CurrencyConversion_1 ON   
                      ItineraryService2Cost_Quoted.ToUSDCurrencyConversionId = CurrencyConversion_1.CurrencyConversionId  
WHERE     (gradtours.bookingStatus.IncludedWhenCalculatingCost = 1) AND (gradtours.ItineraryService.Deleted = 0)
GROUP BY gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId,   
                      gradtours.vendors.vendordisplayname, gradtours.vendors.PaymentTerms, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.ParentId,   
                      gradtours.vendors.VendorTypeId, gradtours.vendors.LocaleId, ISNULL(ItineraryService2Cost_Actual.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId)   
                     
;

|||ItineraryTrip_VendorCostSummary_DC_WithVendors__
^^^/*-----------------------------------------------------------------------------------------*/
CREATE VIEW [gradtours].[ItineraryTrip_VendorCostSummary_DC_WithVendors__]
AS
SELECT     TOP (100) PERCENT gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId, 
                      gradtours.vendors.vendordisplayname, gradtours.vendors.PaymentTerms, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.VendorTypeId, 
                      gradtours.vendors.LocaleId, ISNULL(gradtours.vendors.ParentId, gradtours.vendors.vendorId) AS ParentVendorId, ISNULL(SUM(ItineraryService2Cost_Actual.Cost), 0) 
                      AS ActualCost, ISNULL(ItineraryService2Cost_Actual.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId) AS ActualCost_CurrencyId, 
                      ISNULL(SUM(ItineraryService2Cost_Quoted.Cost), 0) AS QuotedCost, ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId) 
                      AS QuotedCost_CurrencyId, ISNULL(SUM(ItineraryService2Cost_Actual.ConvertedCost), 0) AS ActualConvertedCost, 
                      ISNULL(ItineraryService2Cost_Actual.ConvertedCost_CurrencyId, gradtours.vendors.DefaultCurrencyId) AS ActualConvertedCost_CurrencyId, 
                      ISNULL(SUM(ItineraryService2Cost_Quoted.ConvertedCost), 0) AS QuotedConvertedCost, ISNULL(ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId, 
                      gradtours.vendors.DefaultCurrencyId) AS QuotedConvertedCost_CurrencyId, 
                      ISNULL(SUM(CASE WHEN ItineraryService2Cost_Actual.Cost_CurrencyId = 1 THEN ItineraryService2Cost_Actual.Cost WHEN ItineraryService2Cost_Actual.ConvertedCost_CurrencyId
                       = 1 THEN ItineraryService2Cost_Actual.ConvertedCost ELSE (ItineraryService2Cost_Actual.Cost * ISNULL(gradtours.CurrencyConversion.ToBase, 1)) END), 0) 
                      AS ActualCostUSD, 
                      ISNULL(SUM(CASE WHEN ItineraryService2Cost_Quoted.Cost_CurrencyId = 1 THEN ItineraryService2Cost_Quoted.Cost WHEN ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId
                       = 1 THEN ItineraryService2Cost_Quoted.ConvertedCost ELSE (ItineraryService2Cost_Quoted.Cost * ISNULL(CurrencyConversion_1.ToBase, 1)) END), 0) 
                      AS QuotedCostUSD
FROM         gradtours.vendors INNER JOIN
                      gradtours.ItineraryService2Booking ON gradtours.vendors.vendorId = gradtours.ItineraryService2Booking.VendorId INNER JOIN
                      gradtours.ItineraryService ON gradtours.vendors.vendorId = gradtours.ItineraryService.VendorId AND 
                      gradtours.ItineraryService2Booking.ItineraryServiceId = gradtours.ItineraryService.ItineraryServiceId INNER JOIN
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId LEFT OUTER JOIN
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Actual ON 
                      gradtours.ItineraryService2Booking.ItineraryService2CostId = ItineraryService2Cost_Actual.ItineraryService2CostId INNER JOIN
                      gradtours.bookingStatus ON gradtours.ItineraryService2Booking.BookingStatusId = gradtours.bookingStatus.bookingStatusId INNER JOIN
                      gradtours.ItineraryQuote ON gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Quoted ON 
                      gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = ItineraryService2Cost_Quoted.ItineraryService2CostId LEFT OUTER JOIN
                      gradtours.CurrencyConversion ON 
                      ItineraryService2Cost_Actual.ToUSDCurrencyConversionId = gradtours.CurrencyConversion.CurrencyConversionId LEFT OUTER JOIN
                      gradtours.CurrencyConversion AS CurrencyConversion_1 ON 
                      ItineraryService2Cost_Quoted.ToUSDCurrencyConversionId = CurrencyConversion_1.CurrencyConversionId
WHERE     (gradtours.bookingStatus.IncludedWhenCalculatingCost = 1) AND (gradtours.ItineraryService.Deleted = 0)
GROUP BY gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId, 
                      gradtours.vendors.vendordisplayname, gradtours.vendors.PaymentTerms, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.ParentId, 
                      gradtours.vendors.VendorTypeId, gradtours.vendors.LocaleId, ISNULL(ItineraryService2Cost_Actual.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId), 
                      ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, gradtours.vendors.DefaultCurrencyId), ISNULL(ItineraryService2Cost_Actual.ConvertedCost_CurrencyId, 
                      gradtours.vendors.DefaultCurrencyId), ISNULL(ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId, gradtours.vendors.DefaultCurrencyId)
;

|||ItineraryTrip_VendorCostSummary_ForExcludedServices
^^^CREATE VIEW [gradtours].[ItineraryTrip_VendorCostSummary_ForExcludedServices]
AS
SELECT     TOP (100) PERCENT gradtours.ItineraryDay.ItineraryId, 0 AS ActualCost, ItineraryService2Cost_Actual.Cost_CurrencyId AS ActualCost_CurrencyId, 0 AS QuotedCost, 
                      ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, 1) AS QuotedCost_CurrencyId, gradtours.vendors.vendordisplayname, 
                      gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.DefaultCurrencyId, 
                      ISNULL(gradtours.vendors.ParentId, gradtours.vendors.vendorId) AS ParentVendorId, gradtours.vendors.vendorId
FROM         gradtours.vendors INNER JOIN
                      gradtours.ItineraryService2Booking ON gradtours.vendors.vendorId = gradtours.ItineraryService2Booking.VendorId INNER JOIN
                      gradtours.ItineraryService ON gradtours.vendors.vendorId = gradtours.ItineraryService.VendorId AND 
                      gradtours.ItineraryService2Booking.ItineraryServiceId = gradtours.ItineraryService.ItineraryServiceId INNER JOIN
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Actual ON 
                      gradtours.ItineraryService2Booking.ItineraryService2CostId = ItineraryService2Cost_Actual.ItineraryService2CostId INNER JOIN
                      gradtours.bookingStatus ON gradtours.ItineraryService2Booking.BookingStatusId = gradtours.bookingStatus.bookingStatusId INNER JOIN
                      gradtours.Itinerary ON gradtours.ItineraryDay.ItineraryId = gradtours.Itinerary.ItineraryId INNER JOIN
                      gradtours.ItineraryQuote ON gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Quoted ON 
                      gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = ItineraryService2Cost_Quoted.ItineraryService2CostId
WHERE     (gradtours.bookingStatus.IncludedWhenCalculatingCost = 0) AND (gradtours.bookingStatus.bookingStatus <> 5)
GROUP BY gradtours.ItineraryDay.ItineraryId, ItineraryService2Cost_Actual.Cost_CurrencyId, ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, 1), 
                      gradtours.vendors.vendordisplayname, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef,
                      gradtours.vendors.DefaultCurrencyId, gradtours.vendors.ParentId, gradtours.vendors.vendorId
ORDER BY gradtours.ItineraryDay.ItineraryId, gradtours.vendors.vendordisplayname
;

|||ItineraryTrip_VendorCostSummary_VendorView
^^^CREATE VIEW [gradtours].[ItineraryTrip_VendorCostSummary_VendorView]
AS
SELECT TOP (100) PERCENT
	itineraryday.itineraryid
	, itineraryquote.itinerarystartdate
	, itineraryquote.itineraryref
	, vendors.vendorid
	, vendors.vendordisplayname
	, vendors.defaultcurrencyid
	, vendors.vendortypeid
	, vendors.localeid
	, ISNULL(vendors.parentid, vendors.vendorid) AS parentvendorid
	, ISNULL(SUM(itineraryservice2cost_actual.cost), 0)	AS actualcost
	, ISNULL(itineraryservice2cost_actual.cost_currencyid, vendors.defaultcurrencyid) AS actualcost_currencyid
	, ISNULL(SUM(itineraryservice2cost_quoted.cost), 0) AS quotedcost
	, ISNULL(itineraryservice2cost_quoted.cost_currencyid, vendors.defaultcurrencyid) AS quotedcost_currencyid
	, ISNULL(SUM(itineraryservice2cost_actual.convertedcost), 0) AS actualconvertedcost
	, ISNULL(itineraryservice2cost_actual.convertedcost_currencyid, vendors.defaultcurrencyid) AS actualconvertedcost_currencyid
	, ISNULL(SUM(itineraryservice2cost_quoted.convertedcost), 0) AS quotedconvertedcost
	, ISNULL(itineraryservice2cost_quoted.convertedcost_currencyid
	, vendors.defaultcurrencyid) AS quotedconvertedcost_currencyid
	, ISNULL(SUM(CASE
					WHEN itineraryservice2cost_actual.cost_currencyid = 1 THEN itineraryservice2cost_actual.cost
					WHEN itineraryservice2cost_actual.convertedcost_currencyid = 1 THEN itineraryservice2cost_actual.convertedcost ELSE (itineraryservice2cost_actual.cost * ISNULL(currencyconversion.tobase, 1))
				END), 0) AS actualcostusd
	, ISNULL(SUM(CASE
					WHEN itineraryservice2cost_quoted.cost_currencyid = 1 THEN itineraryservice2cost_quoted.cost
					WHEN itineraryservice2cost_quoted.convertedcost_currencyid = 1 THEN itineraryservice2cost_quoted.convertedcost ELSE (itineraryservice2cost_quoted.cost * ISNULL(currencyconversion_1.tobase, 1))
				END), 0) AS quotedcostusd
	FROM vendors
		INNER JOIN itineraryservice2booking
			ON vendors.vendorid = itineraryservice2booking.vendorid
		INNER JOIN itineraryservice
			ON vendors.vendorid = itineraryservice.vendorid AND
			itineraryservice2booking.itineraryserviceid = itineraryservice.itineraryserviceid
		INNER JOIN itineraryday
			ON itineraryservice.itinerarydayid = itineraryday.itinerarydayid
		LEFT OUTER JOIN itineraryservice2cost AS itineraryservice2cost_actual
			ON itineraryservice2booking.itineraryservice2costid = itineraryservice2cost_actual.itineraryservice2costid
		INNER JOIN bookingstatus
			ON itineraryservice2booking.bookingstatusid = bookingstatus.bookingstatusid
		INNER JOIN itineraryquote
			ON itineraryday.itineraryid = itineraryquote.itineraryid
		LEFT OUTER JOIN itinerarytrip
			ON itineraryday.itineraryid = itinerarytrip.itineraryid
		LEFT OUTER JOIN itineraryservice2cost AS itineraryservice2cost_quoted
			ON itineraryservice.itineraryservice2costid_quotedcost = itineraryservice2cost_quoted.itineraryservice2costid
		LEFT OUTER JOIN currencyconversion
			ON itineraryservice2cost_actual.tousdcurrencyconversionid = currencyconversion.currencyconversionid
		LEFT OUTER JOIN currencyconversion AS currencyconversion_1
			ON itineraryservice2cost_quoted.tousdcurrencyconversionid = currencyconversion_1.currencyconversionid
	WHERE
		(bookingstatus.includedwhencalculatingcost = 1) AND (itineraryservice.deleted = 0)
		OR (itineraryservice.deleted = 0) AND (bookingstatus.bookingstatusid = 15)
		OR (itineraryservice.deleted = 0) AND (bookingstatus.bookingstatusid = 8) AND (itinerarytrip.cancelled = 1)
	GROUP BY	
		itineraryday.itineraryid
		, itineraryquote.itinerarystartdate
		, itineraryquote.itineraryref
		, vendors.vendorid
		, vendors.vendordisplayname
		, vendors.defaultcurrencyid
		, vendors.parentid
		, vendors.vendortypeid
		, vendors.localeid
		, ISNULL(itineraryservice2cost_actual.cost_currencyid, vendors.defaultcurrencyid)
		, ISNULL(itineraryservice2cost_quoted.cost_currencyid, vendors.defaultcurrencyid)
		, ISNULL(itineraryservice2cost_actual.convertedcost_currencyid
		, vendors.defaultcurrencyid)
		, ISNULL(itineraryservice2cost_quoted.convertedcost_currencyid, vendors.defaultcurrencyid)
;

|||ItineraryTrip_VendorCostSummaryByCOAAllocationByDate
^^^CREATE VIEW [gradtours].[ItineraryTrip_VendorCostSummaryByCOAAllocationByDate]
AS
	SELECT TOP (100) PERCENT
		tl.TripLedgerId
		, t.TripId
		/*
		-- THIS IS A TOTAL AND UTTER HACK, DEAN NEEDS TO REVISIT THIS. Needed to include the target margin portion of agent commissions as COGS
		, CASE
			WHEN v.vendorTypeId = 2 THEN CASE WHEN i.coaallocationid NOT IN (55,56,108,109) THEN 1 ELSE 2 END
			ELSE v.vendortypeid END AS vendorTypeId
			Kirstie took this hack out. We are just showing all commission under expense - even the target margin portion
*/
		,v.vendortypeid
		, COALESCE(i.coaallocationid, v.coaallocationid, c2l.coaallocationid, 1) AS coaallocationid
		, SUM(AmountUSD) AS ActualCostUSD
	FROM
		TripLedger tl
		INNER JOIN vendorpurchaseorders vpo ON vpo.tripledgerid = tl.tripledgerid
		INNER JOIN vendors v ON vpo.vendorid = v.vendorid
		INNER JOIN vendorpurchaseorderservices vpos ON vpo.vendorpurchaseorderid = vpos.vendorpurchaseorderid
		INNER JOIN Product p on vpo.ProductId = p.ProductId
		INNER JOIN Trip t on t.TripId = p.TripId
		INNER JOIN ProductItem i ON vpos.productitemid = i.productitemid
		LEFT OUTER join coaallocation2locale c2l ON c2l.localeid = v.saleslocaleid
	GROUP BY
		tl.tripLedgerId
		, t.TripId
		/*
		-- THIS IS A TOTAL AND UTTER HACK, DEAN NEEDS TO REVISIT THIS. Needed to include the target margin portion of agent commissions as COGS
		, CASE
			WHEN v.vendorTypeId = 2 THEN CASE WHEN i.coaallocationid not in (55,56,108,109) THEN 1
			ELSE 2 END ELSE v.vendortypeid END
			Kirstie took this hack out. We are just showing all commission under expense - even the target margin portion
*/
		,v.vendortypeid
		, COALESCE(i.coaallocationid, v.coaallocationid, c2l.coaallocationid, 1)

|||ItineraryTrip_VendorCostSummaryByServiceType
^^^--------------------------------------------------------------------
CREATE VIEW [gradtours].[ItineraryTrip_VendorCostSummaryByServiceType]
AS
SELECT     TOP (100) PERCENT gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId, 
                      gradtours.vendors.vendordisplayname, gradtours.vendors.DefaultCurrencyId, ISNULL(gradtours.vendors.ParentId, 
                      gradtours.vendors.vendorId) AS ParentVendorId, gradtours.ItineraryService.ServiceId, ISNULL(SUM(ItineraryService2Cost_Actual.Cost), 0) AS ActualCost, 
                      ItineraryService2Cost_Actual.Cost_CurrencyId AS ActualCost_CurrencyId, ISNULL(SUM(ItineraryService2Cost_Quoted.Cost), 0) AS QuotedCost, 
                      ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, 1) AS QuotedCost_CurrencyId, ISNULL(SUM(ItineraryService2Cost_Actual.ConvertedCost), 0) 
                      AS ActualConvertedCost, ItineraryService2Cost_Actual.ConvertedCost_CurrencyId AS ActualConvertedCost_CurrencyId, 
                      ISNULL(SUM(ItineraryService2Cost_Quoted.ConvertedCost), 0) AS QuotedConvertedCost, ISNULL(ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId, 1) 
                      AS QuotedConvertedCost_CurrencyId, 
                      SUM(CASE WHEN ItineraryService2Cost_Actual.Cost_CurrencyId = 1 THEN ItineraryService2Cost_Actual.Cost WHEN ItineraryService2Cost_Actual.ConvertedCost_CurrencyId
                       = 1 THEN ItineraryService2Cost_Actual.ConvertedCost ELSE (ItineraryService2Cost_Actual.Cost * ISNULL(gradtours.CurrencyConversion.ToBase, 1)) END) 
                      AS ActualCostUSD, 
                      SUM(CASE WHEN ItineraryService2Cost_Quoted.Cost_CurrencyId = 1 THEN ItineraryService2Cost_Quoted.Cost WHEN ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId
                       = 1 THEN ItineraryService2Cost_Quoted.ConvertedCost ELSE (ItineraryService2Cost_Quoted.Cost * ISNULL(CurrencyConversion_1.ToBase, 1)) END) 
                      AS QuotedCostUSD
FROM         gradtours.vendors INNER JOIN
                      gradtours.ItineraryService2Booking ON gradtours.vendors.vendorId = gradtours.ItineraryService2Booking.VendorId INNER JOIN
                      gradtours.ItineraryService ON gradtours.vendors.vendorId = gradtours.ItineraryService.VendorId AND 
                      gradtours.ItineraryService2Booking.ItineraryServiceId = gradtours.ItineraryService.ItineraryServiceId INNER JOIN
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Actual ON 
                      gradtours.ItineraryService2Booking.ItineraryService2CostId = ItineraryService2Cost_Actual.ItineraryService2CostId INNER JOIN
                      gradtours.bookingStatus ON gradtours.ItineraryService2Booking.BookingStatusId = gradtours.bookingStatus.bookingStatusId INNER JOIN
                      gradtours.ItineraryQuote ON gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Quoted ON 
                      gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = ItineraryService2Cost_Quoted.ItineraryService2CostId LEFT OUTER JOIN
                      gradtours.CurrencyConversion ON 
                      ItineraryService2Cost_Actual.ToUSDCurrencyConversionId = gradtours.CurrencyConversion.CurrencyConversionId LEFT OUTER JOIN
                      gradtours.CurrencyConversion AS CurrencyConversion_1 ON 
                      ItineraryService2Cost_Quoted.ToUSDCurrencyConversionId = CurrencyConversion_1.CurrencyConversionId
WHERE     (gradtours.bookingStatus.IncludedWhenCalculatingCost = 1) AND (gradtours.ItineraryService.Deleted = 0)
GROUP BY gradtours.ItineraryDay.ItineraryId, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.vendorId, 
                      gradtours.vendors.vendordisplayname, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.ParentId, 
                      gradtours.ItineraryService.ServiceId, ItineraryService2Cost_Actual.Cost_CurrencyId, ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, 1), 
                      ItineraryService2Cost_Actual.ConvertedCost_CurrencyId, ISNULL(ItineraryService2Cost_Quoted.ConvertedCost_CurrencyId, 1)
;

|||ItineraryTrip_VendorCostSummaryByServiceTypeWithCommissionable
^^^-------------------------------------------------------------------------------------------
CREATE VIEW [gradtours].[ItineraryTrip_VendorCostSummaryByServiceTypeWithCommissionable]
AS
SELECT     gradtours.ItineraryDay.ItineraryId, ISNULL(SUM(ItineraryService2Cost_Actual.Cost), 0) AS ActualCost, 
                      ItineraryService2Cost_Actual.Cost_CurrencyId AS ActualCost_CurrencyId, ISNULL(SUM(ItineraryService2Cost_Actual.ConvertedCost), 0) AS ActualConvertedCost, 
                      ItineraryService2Cost_Actual.ConvertedCost_CurrencyId AS ActualConvertedCost_CurrencyId, ISNULL(SUM(ItineraryService2Cost_Quoted.Cost), 0) AS QuotedCost, 
                      ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, 1) AS QuotedCost_CurrencyId, gradtours.vendors.vendordisplayname, 
                      gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.DefaultCurrencyId, 
                      ISNULL(gradtours.vendors.ParentId, gradtours.vendors.vendorId) AS ParentVendorId, gradtours.vendors.vendorId, gradtours.ItineraryService.ServiceId, 
                      gradtours.ItineraryService.IsCommissionable
FROM         gradtours.vendors INNER JOIN
                      gradtours.ItineraryService2Booking ON gradtours.vendors.vendorId = gradtours.ItineraryService2Booking.VendorId INNER JOIN
                      gradtours.ItineraryService ON gradtours.vendors.vendorId = gradtours.ItineraryService.VendorId AND 
                      gradtours.ItineraryService2Booking.ItineraryServiceId = gradtours.ItineraryService.ItineraryServiceId INNER JOIN
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId INNER JOIN
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Actual ON 
                      gradtours.ItineraryService2Booking.ItineraryService2CostId = ItineraryService2Cost_Actual.ItineraryService2CostId INNER JOIN
                      gradtours.bookingStatus ON gradtours.ItineraryService2Booking.BookingStatusId = gradtours.bookingStatus.bookingStatusId INNER JOIN
                      gradtours.ItineraryQuote ON gradtours.ItineraryDay.ItineraryId = gradtours.ItineraryQuote.ItineraryId LEFT OUTER JOIN
                      gradtours.ItineraryService2Cost AS ItineraryService2Cost_Quoted ON 
                      gradtours.ItineraryService.ItineraryService2CostId_QuotedCost = ItineraryService2Cost_Quoted.ItineraryService2CostId
WHERE     (gradtours.bookingStatus.IncludedWhenCalculatingCost = 1) AND (gradtours.ItineraryService.Deleted = 0)
GROUP BY gradtours.ItineraryDay.ItineraryId, ItineraryService2Cost_Actual.Cost_CurrencyId, ItineraryService2Cost_Actual.ConvertedCost_CurrencyId, 
                      ISNULL(ItineraryService2Cost_Quoted.Cost_CurrencyId, 1), gradtours.vendors.vendordisplayname, gradtours.ItineraryQuote.ItineraryStartDate, 
                      gradtours.ItineraryQuote.ItineraryRef, gradtours.vendors.DefaultCurrencyId, gradtours.vendors.ParentId, 
                      gradtours.vendors.vendorId, gradtours.ItineraryService.ServiceId, gradtours.ItineraryService.IsCommissionable
;

|||ItineraryTrip_VendorCostSummaryFromVPO
^^^CREATE VIEW [gradtours].[ItineraryTrip_VendorCostSummaryFromVPO]
AS
	SELECT TOP (100) PERCENT
		sub.TripId
		, sub.TripStartDate
		, sub.TripReference
		, sub.vendorId
		, sub.vendordisplayname
		, sub.VendorTypeId
		, sub.LocaleId
		, sub.ParentVendorId
		, sub.ActualCost
		, sub.ActualCostUSD
		, ISNULL(quotedCosts.QuotedCost, 0) QuotedCost
		, ISNULL(quotedCosts.QuotedCostUSD, 0) QuotedCostUSD
		, sub.ActualCost_CurrencyId
		, sub.ProductId
	FROM (
		SELECT TOP (100) PERCENT
			t.TripId
			, t.TripStartDate
			, t.TripReference
			, v.vendorId
			, v.vendordisplayname
			, v.VendorTypeId
			, v.LocaleId
			, ISNULL(v.ParentId
			, v.vendorId) AS ParentVendorId
			, SUM(Amount) AS ActualCost
			, SUM(AmountUSD) AS ActualCostUSD
			, vpos.CurrencyId AS ActualCost_CurrencyId
			, vpo.ProductId
		FROM
			gradtours.vendors v
			INNER JOIN gradtours.vendorpurchaseorders vpo ON vpo.vendorid = v.vendorid
			INNER JOIN vendorpurchaseorderservices vpos ON vpo.vendorpurchaseorderid = vpos.vendorpurchaseorderid
			INNER JOIN Product p ON vpo.ProductId = p.ProductId
			INNER JOIN Trip t ON p.TripId = t.TripId
		GROUP BY
			t.TripId
			, t.TripStartDate
			, t.TripReference
			, v.vendorId
			, v.vendordisplayname
			, v.DefaultCurrencyId
			, v.VendorTypeId
			, v.LocaleId
			, ISNULL(v.ParentId, v.vendorId)
			, vpos.CurrencyId
			, vpo.ProductId
		) sub
		LEFT JOIN Trip_VendorQuotedCosts quotedCosts ON sub.ProductId = quotedCosts.ProductId AND sub.vendorId = quotedCosts.VendorId
;

|||IxItineraryTrip_SalesView
^^^CREATE VIEW [gradtours].[IxItineraryTrip_SalesView]  
WITH SCHEMABINDING   
AS  
SELECT     
	gradtours.ItineraryQuote.ItineraryStartDate, 
	gradtours.ItineraryQuote.QuoteAgentId, 
	gradtours.Itinerary.LocaleId, 
	gradtours.Itinerary.NumberOfDays,   
	gradtours.ItineraryTrip.ItineraryId, 
	DATEADD(d, gradtours.Itinerary.NumberOfDays, 
	gradtours.ItineraryQuote.ItineraryStartDate) AS EndDate,  
	gradtours.Itinerary.SalesCOAAllocationId
FROM
    gradtours.Itinerary INNER JOIN  
	gradtours.ItineraryQuote ON gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId INNER JOIN  
    gradtours.ItineraryTrip ON gradtours.ItineraryQuote.ItineraryId = gradtours.ItineraryTrip.ItineraryId  
WHERE     
	(ISNULL(gradtours.Itinerary.Deleted, 0) = 0) AND (gradtours.Itinerary.ItineraryCategoryId = 8)   --AND (gradtours.ItineraryTrip.Cancelled = 0) 

|||IxTemplateItineraries
^^^CREATE VIEW [gradtours].[IxTemplateItineraries]
WITH SCHEMABINDING
AS
SELECT gradtours.Itinerary.ItineraryId,
       gradtours.Itinerary.Name,
       gradtours.Itinerary.IsFeatured,
       gradtours.Itinerary.NumberOfDays,
       gradtours.Itinerary.ItineraryTypeId,
       gradtours.Itinerary.ItineraryCategoryId,
       (CASE 
        WHEN IsActive = 1
                  AND ActiveCode = '1234'
                  AND (ItineraryCategoryId = 5
                       OR ItineraryCategoryId = 6) THEN 1 ELSE 0 
        END) AS IsOfficialAndLive,
       gradtours.Itinerary2CompanyBrand.CompanyBrandId,
       gradtours.Itinerary.Double4People,
       gradtours.Itinerary.FeatureText,
       gradtours.Itinerary.SalesCOAAllocationId,
       gradtours.Itinerary.TemplateTypeId,
       gradtours.Itinerary.[LocaleId]
FROM   gradtours.Itinerary
       INNER JOIN
       gradtours.Itinerary2CompanyBrand
       ON gradtours.Itinerary.ItineraryId = gradtours.Itinerary2CompanyBrand.ItineraryId
WHERE  (ISNULL(gradtours.Itinerary.Deleted, 0) = 0)
       AND (ISNULL(gradtours.Itinerary2CompanyBrand.Deleted, 0) = 0)
       AND (gradtours.Itinerary.ItineraryCategoryId IN (2, 4, 5, 6));

|||IxTemplateItineraries_WithDeletedCompanyBrand
^^^CREATE
      VIEW [gradtours].[IxTemplateItineraries_WithDeletedCompanyBrand] AS
SELECT gradtours.Itinerary.ItineraryId,
    gradtours.Itinerary.Name,
    gradtours.Itinerary.IsFeatured,
    gradtours.Itinerary.NumberOfDays,
    gradtours.Itinerary.ItineraryTypeId,
    gradtours.Itinerary.ItineraryCategoryId,
    (
        CASE
            WHEN IsActive = 1
            AND ActiveCode = '1234'
            AND (
                ItineraryCategoryId = 5
                OR ItineraryCategoryId = 6
            ) THEN 1
            ELSE 0
        END
    ) AS IsOfficialAndLive,
    gradtours.Itinerary2CompanyBrand.CompanyBrandId,
    gradtours.Itinerary2CompanyBrand.Deleted as Itinerary2CompanyBrandDeleted,
    gradtours.Itinerary.Double4People,
    gradtours.Itinerary.FeatureText,
    gradtours.Itinerary.SalesCOAAllocationId,
    gradtours.Itinerary.TemplateTypeId,
    gradtours.Itinerary.LocaleId
FROM gradtours.Itinerary
    INNER JOIN gradtours.Itinerary2CompanyBrand ON gradtours.Itinerary.ItineraryId = gradtours.Itinerary2CompanyBrand.ItineraryId
WHERE (ISNULL(gradtours.Itinerary.Deleted, 0) = 0)
    AND (
        gradtours.Itinerary.ItineraryCategoryId IN (2, 4, 5, 6)
    )

|||IxTemplateItinerariesBranded_
^^^/*SELECT     ItineraryId, Name, IsFeatured, NumberOfDays, ItineraryTypeId, itinerarycategoryid, (case when IsActive = 1 and ActiveCode = '1234' and ItineraryCategoryId = 5 then 1 else 0 end) AS IsOfficialAndLive  
FROM         gradtours.Itinerary  
 AND (ItineraryCategoryId = 5) and  (IsActive = 1) AND (ActiveCode = '1234') AND     */
CREATE VIEW [gradtours].[IxTemplateItinerariesBranded_]
WITH SCHEMABINDING 
AS
SELECT     gradtours.Itinerary.ItineraryId, gradtours.Itinerary.Name, gradtours.Itinerary.IsFeatured, gradtours.Itinerary.NumberOfDays, gradtours.Itinerary.ItineraryTypeId, 
                      gradtours.Itinerary.ItineraryCategoryId, (CASE WHEN IsActive = 1 AND ActiveCode = '1234' AND ItineraryCategoryId = 5 THEN 1 ELSE 0 END) AS IsOfficialAndLive, 
                      gradtours.Itinerary2CompanyBrand.CompanyBrandId, gradtours.Itinerary.Double4People, gradtours.Itinerary.FeatureText
FROM         gradtours.Itinerary INNER JOIN
                      gradtours.Itinerary2CompanyBrand ON gradtours.Itinerary.ItineraryId = gradtours.Itinerary2CompanyBrand.ItineraryId
WHERE     (ISNULL(gradtours.Itinerary.Deleted, 0) = 0) AND (ISNULL(gradtours.Itinerary2CompanyBrand.Deleted, 0) = 0) AND (gradtours.Itinerary.ItineraryCategoryId IN (2, 4, 5, 6))

|||KT_HotelRoomVendors
^^^CREATE VIEW [gradtours].[KT_HotelRoomVendors]
AS
SELECT DISTINCT 
                      gradtours.Hotel2Vendor.VendorId, gradtours.HotelRoomCategory.gHotelRoomId, gradtours.Hotel.HotelId, gradtours.HotelRoomCategory.HotelRoomCategoryId, 
                      gradtours.Hotel2Vendor.IsDescriptionOnly
FROM         gradtours.vendors INNER JOIN
                      gradtours.Hotel2Vendor ON gradtours.vendors.vendorId = gradtours.Hotel2Vendor.VendorId INNER JOIN
                      gradtours.HotelRoomCategory ON gradtours.Hotel2Vendor.HotelId = gradtours.HotelRoomCategory.HotelId INNER JOIN
                      gradtours.Hotel ON gradtours.HotelRoomCategory.HotelId = gradtours.Hotel.HotelId
WHERE     (gradtours.HotelRoomCategory.Deleted IS NULL OR
                      gradtours.HotelRoomCategory.Deleted = 0) AND (gradtours.Hotel.Deleted IS NULL OR
                      gradtours.Hotel.Deleted = 0) AND (gradtours.Hotel2Vendor.Deleted IS NULL OR
                      gradtours.Hotel2Vendor.Deleted = 0) AND (gradtours.Hotel2Vendor.Deleted IS NULL OR
                      gradtours.Hotel2Vendor.Deleted = 0)

|||Leads_Dashboard
^^^CREATE VIEW [gradtours].[Leads_Dashboard]
AS
SELECT        gradtours.LeadAssignment.LeadAssignmentId, gradtours.ClientRequest.ClientRequestId, gradtours.quoteagentaction.QuoteAgentActionId, 
                         gradtours.ClientRequest.TemplateItineraryId, gradtours.ClientRequest.LocaleId, gradtours.ClientRequest.COAAllocationId, 
                         gradtours.quoteagentaction.QuoteAgentActionTypeId, gradtours.quoteagentaction.ParentQuoteAgentActionId, gradtours.quoteagentaction.CompletedDate, 
                         gradtours.quoteagentaction.AssignedById, gradtours.quoteagentaction.AssignedToId, gradtours.LeadAssignment.IsExpired, 
                         gradtours.LeadAssignment.ParentLeadAssignmentId, gradtours.LeadAssignment.ClaimedTime, gradtours.LeadAssignment.IsProcessed, 
                         gradtours.LeadAssignment.IsInOpenPool, 
                         CASE WHEN gradtours.LeadAssignment.DateCreated > gradtours.LeadAssignment.LastModified THEN gradtours.LeadAssignment.DateCreated ELSE gradtours.LeadAssignment.LastModified
                          END AS DateCreated, ISNULL(gradtours.ClientRequest.Deleted, 0) AS Deleted, gradtours.LeadAssignment.QuoteAgentId AS LeadAssignment_QuoteAgentId, 
                         gradtours.quoteagentaction.QuoteAgentId AS QuoteAgentAction_QuoteAgentId, gradtours.LeadAssignment.DoNotExpire, 
                         gradtours.quoteagentaction.CurrentItineraryId, gradtours.LeadAssignment.IsParked, gradtours.ClientRequest.ClientId, gradtours.Client.ClientTypeId, 
                         ISNULL(Parent.IsExpired, 0) AS Parent_IsExpired, ISNULL(Parent.IsInOpenPool, 0) AS Parent_IsInOpenPool, Parent.QuoteAgentId AS Parent_QuoteAgentId,
                             (SELECT        (SELECT        COUNT(clientid) AS num
                                                          FROM            gradtours.Trip_GroupTraveler
                                                          WHERE        (clientid = gradtours.ClientRequest.ClientId)) +
                                                             (SELECT        COUNT(MainContactClientId) AS num
                                                               FROM            gradtours.Trip
                                                               WHERE        (MainContactClientId = gradtours.ClientRequest.ClientId)) AS numberOfTrip) AS NumberOfClientTrips
FROM            gradtours.quoteagentaction WITH (nolock) LEFT OUTER JOIN
                         gradtours.ClientRequest WITH (nolock) ON gradtours.quoteagentaction.ClientRequestId = gradtours.ClientRequest.ClientRequestId INNER JOIN
                         gradtours.LeadAssignment WITH (nolock) ON gradtours.LeadAssignment.ClientRequestId = gradtours.ClientRequest.ClientRequestId INNER JOIN
                         gradtours.Client WITH (nolock) ON gradtours.ClientRequest.ClientId = gradtours.Client.ClientId LEFT OUTER JOIN
                         gradtours.LeadAssignment AS Parent WITH (nolock) ON gradtours.LeadAssignment.ParentLeadAssignmentId = Parent.LeadAssignmentId

|||MaxSeasonRate_Ground2Vehicle
^^^CREATE VIEW [gradtours].[MaxSeasonRate_Ground2Vehicle]
AS
SELECT     ad.SeasonEndDate AS max_seasonenddate, ar.Ground2VehicleId, a.VendorId, a.CurrencyId, 
                      (CASE gradtours.rate.ratetypeid WHEN 1 THEN gradtours.rate.perperson WHEN 2 THEN gradtours.rate.pervehicle WHEN 3 THEN (gradtours.rate.perperson + gradtours.rate.pervehicle)
                       WHEN 4 THEN gradtours.rate2raterange.flat ELSE gradtours.rate.flat END) AS retail
FROM         gradtours.Rate2RateRange RIGHT OUTER JOIN
                      gradtours.GroundRates AS ar INNER JOIN
                      gradtours.GroundSeason AS a ON a.GroundId = ar.GroundId AND a.GroundSeasonId = ar.GroundSeasonId AND ISNULL(a.Deleted, 0) = 0 INNER JOIN
                      gradtours.GroundSeasonDates AS ad ON ad.GroundSeasonId = ar.GroundSeasonId AND ISNULL(ad.Deleted, 0) = 0 AND ad.SeasonEndDate =
                          (SELECT     MAX(ad.SeasonEndDate) AS Expr1
                            FROM          gradtours.GroundSeason AS a INNER JOIN
                                                   gradtours.GroundSeasonDates AS ad ON ad.GroundSeasonId = a.GroundSeasonId AND ISNULL(ad.Deleted, 0) = 0
                            WHERE      (a.GroundId = ar.GroundId) AND (a.GroundSeasonId = ar.GroundSeasonId) AND (ISNULL(a.Deleted, 0) = 0)) INNER JOIN
                      gradtours.Rate ON ar.RateId = gradtours.Rate.RateId AND ar.RateId = gradtours.Rate.RateId ON gradtours.Rate2RateRange.RateId = gradtours.Rate.RateId
WHERE     (ISNULL(ar.Deleted, 0) = 0) AND (ar.GroundRatesTypesId = 1)

|||MaxSeasonRate_HotelRoomCategory
^^^CREATE VIEW [gradtours].[MaxSeasonRate_HotelRoomCategory]
AS
SELECT     MAX(gradtours.HotelSeasonDates.SeasonEndDate) AS Max_SeasonEndDate, gradtours.HotelRates.HotelRoomCategoryId, gradtours.HotelSeason.VendorId, 
                      gradtours.HotelSeason.CurrencyId, gradtours.Rate.Flat AS retail, gradtours.AccomodationRoomCategory2RoomType.RoomTypeId AS HotelRoomTypeId
FROM         gradtours.HotelRates INNER JOIN
                      gradtours.HotelSeason ON gradtours.HotelRates.HotelSeasonId = gradtours.HotelSeason.HotelSeasonId AND 
                      gradtours.HotelRates.HotelId = gradtours.HotelSeason.HotelId INNER JOIN
                      gradtours.HotelSeasonDates ON gradtours.HotelSeason.HotelSeasonId = gradtours.HotelSeasonDates.HotelSeasonId AND 
                      gradtours.HotelSeason.HotelId = gradtours.HotelSeasonDates.HotelId INNER JOIN
                      gradtours.Rate ON gradtours.HotelRates.RateId = gradtours.Rate.RateId INNER JOIN
                      gradtours.Vendor2AccomodationRoomCategoryRoomType ON 
                      gradtours.HotelRates.Vendor2AccomodationRoomCategoryRoomTypeId = gradtours.Vendor2AccomodationRoomCategoryRoomType.Vendor2AccomodationRoomCategoryRoomTypeId
                       INNER JOIN
                      gradtours.AccomodationRoomCategory2RoomType ON 
                      gradtours.Vendor2AccomodationRoomCategoryRoomType.AccomodationRoomCategory2RoomTypeId = gradtours.AccomodationRoomCategory2RoomType.AccomodationRoomCategory2RoomTypeId
GROUP BY gradtours.HotelRates.HotelRoomCategoryId, gradtours.HotelSeason.VendorId, gradtours.HotelSeason.CurrencyId, ISNULL(gradtours.HotelRates.Deleted, 0), 
                      ISNULL(gradtours.HotelSeason.Deleted, 0), ISNULL(gradtours.HotelSeasonDates.Deleted, 0), gradtours.Rate.Flat, 
                      gradtours.AccomodationRoomCategory2RoomType.RoomTypeId
HAVING      (ISNULL(gradtours.HotelSeasonDates.Deleted, 0) = 0) AND (ISNULL(gradtours.HotelSeason.Deleted, 0) = 0) AND (ISNULL(gradtours.HotelRates.Deleted, 0) = 0)

|||MaxSeasonRate_TransportCategory
^^^CREATE VIEW [gradtours].[MaxSeasonRate_TransportCategory]
AS
SELECT     ad.SeasonEndDate AS max_seasonenddate, ar.transportCategoryId, a.VendorId, a.CurrencyId, 
                      (CASE gradtours.rate.ratetypeid WHEN 1 THEN gradtours.rate.perperson WHEN 2 THEN gradtours.rate.pervehicle WHEN 3 THEN (gradtours.rate.perperson + gradtours.rate.pervehicle)
                       WHEN 4 THEN gradtours.rate2raterange.flat ELSE gradtours.rate.flat END) AS retail
FROM         gradtours.AirRates AS ar INNER JOIN
                      gradtours.AirSeason AS a ON a.AirId = ar.AirId AND a.AirSeasonId = ar.AirSeasonId AND ISNULL(a.Deleted, 0) = 0 INNER JOIN
                      gradtours.AirSeasonDates AS ad ON ad.AirSeasonId = ar.AirSeasonId AND ISNULL(ad.Deleted, 0) = 0 AND ad.SeasonEndDate =
                          (SELECT     MAX(ad.SeasonEndDate) AS Expr1
                            FROM          gradtours.AirSeason AS a INNER JOIN
                                                   gradtours.AirSeasonDates AS ad ON ad.AirSeasonId = a.AirSeasonId AND ISNULL(ad.Deleted, 0) = 0
                            WHERE      (a.AirId = ar.AirId) AND (a.AirSeasonId = ar.AirSeasonId) AND (ISNULL(a.Deleted, 0) = 0)) INNER JOIN
                      gradtours.Rate ON ar.RateId = gradtours.Rate.RateId LEFT OUTER JOIN
                      gradtours.Rate2RateRange ON gradtours.Rate.RateId = gradtours.Rate2RateRange.RateId
WHERE     (ISNULL(ar.Deleted, 0) = 0)

|||mw_GetTripDetails
^^^CREATE   VIEW [gradtours].[mw_GetTripDetails] AS     
(    
 SELECT t.TripId,    
     t.CompanyId,    
        t.TripReference,    
        t.TripName,    
        t.QuoteAgentId,    
        t.TourAgentId,    
        t.BookedDate,    
        t.TripStartDate,    
        t.Cancelled,    
        t.DateCancelled,    
        t.MainContactClientId,    
        t.SystemOfRecordId,    
        t.NumberOfDays,    
        t.NumberOfPeople,    
        t.CompanyBrandId,    
        t.SalesCoaAllocationId ,    
        t.IsArchived,    
        t.GroupName,    
        t.TripLockId,    
        t.ApprovalRequestId,    
        t.TRAMSResCardNum,     
     t.PassportAlertDismiss,    
        t.IsPaidOff,    
        t.DateCreated,    
        t.LastModified,    
     qa.Email AS QuoteAgentEmail,     
     qa.Name AS QuoteAgentName,     
     cb.Name AS CompanyBrandName    
 FROM gradtours.Trip t    
 INNER JOIN gradtours.QuoteAgent qa    
 ON t.QuoteAgentId = qa.QuoteAgentId    
 INNER JOIN gradtours.CompanyBrand CB    
 ON CB.CompanyId = t.CompanyId    
) 
--===============================END MISC=====================================

|||OutsideSalesAgentRegions
^^^-- =============================================
-- Author:		Andrew Thorogood
-- Create date: Jun 16, 2015
-- Description:	Outside Sales Agent Regions
-- =============================================
CREATE VIEW [gradtours].[OutsideSalesAgentRegions]
AS
SELECT ot.TerritoryId, ot.Territory, o2t.OutsideSales2TerritoryId, o2t.QuoteAgentId, em.KTUserId, o2t.Deleted, o2t.LastUpdated, qa.Name
FROM OutsideSalesTerritories ot
		inner join OutsideSales2Territory o2t on ot.TerritoryId = o2t.TerritoryId
		inner join QuoteAgent qa on o2t.QuoteAgentId = qa.QuoteAgentId
		inner join Employee em on qa.EmployeeId = em.EmployeeId

|||QuoteAgentActions
^^^-- =============================================
-- Author:		Andrew Thorogood
-- Create date: Jun 16, 2015
-- Description:	Quote Agent Actions
-- =============================================
CREATE VIEW [gradtours].[QuoteAgentActions]
AS
SELECT
	qaa.QuoteAgentActionId,
	qaa.ClientId,
	ta.TourAgentId,
	CASE WHEN ta.TourAgentId is not null THEN
		CASE WHEN (
                select COUNT(*)
                from
                    Trip t2
                where
                    t2.TourAgentId = ta.TourAgentId
                    and t2.Cancelled = 0
                    and t2.BookedDate < qaa.DateCreated
                    and T2.BookedDate > DATEADD(m,-14,qaa.DateCreated)) >= 2
                THEN 1
                ELSE 0 END
		ELSE NULL END AS Repeat,
	ta.KTUserId,
	ta.TravelAgencyId,
	t.TravelAgencyName,
	t.State,
	t.Country,
	qaa.QuoteAgentId,
	qa.Name as QuoteAgent,
	(select top 1 ISNULL(QuoteAgentId,0) from OutsideSalesAgentRegions where (territory = t.State or territory = t.Country))
		AS busDevRegionAgentId,
	(select name from QuoteAgent where QuoteAgentId = (select top 1 ISNULL(QuoteAgentId,0) from OutsideSalesAgentRegions where (territory = t.State or territory = t.Country)))
		AS busDevRegionAgentName,
	qaa.QuoteAgentActionTypeId,
	qaat.Name as QuoteAgentActionType,
	qaa.GTSentMailId,
	gsm.TimeSent as GTSentMailDate,
	qaa.CurrentItineraryId,
	CASE WHEN qaa.CurrentItineraryId is not NULL THEN
		(
			SELECT Name
			FROM Locale
			WHERE LocaleId = gradtours.fn_Locale_GetRootLocaleIdByLocaleIdTypeId(gradtours.fn_ItineraryGetFirstNonGlobalLocale(iq.ItineraryId),2)
		)
		ELSE NULL END
		AS Region,
	qaa.Notes,
	qaa.DateCreated,
	year(qaa.DateCreated) as subYear,
    month(qaa.DateCreated) as subMonth,
	qaa.Deleted,
	c.ClientTypeId,
	c.FirstName,
	c.LastName,
	c.Email,
	c.DoNotContact,
	c.PITA,
	c.DateCreated as ClientDateCreated,
	c.LastModified as ClientLastModified
FROM
    QuoteAgentAction qaa
	inner join QuoteAgentActionType qaat
	on qaa.QuoteAgentActionTypeId = qaat.QuoteAgentActionTypeId
    inner join Client c
    on qaa.ClientId = c.ClientId
    left join Client2TourAgent c2a
    on c.ClientId = c2a.ClientId
    left join TourAgent ta
    on c2a.TourAgentId = ta.TourAgentId
    left join TravelAgency t
    on ta.TravelAgencyId = t.TravelAgencyId
	left join QuoteAgent qa
	on qaa.QuoteAgentId = qa.QuoteAgentId
	left join ItineraryQuote iq
	on ta.TourAgentId = iq.TourAgentId and qaa.CurrentItineraryId = iq.ItineraryId
	left join GTSentMail gsm
	on qaa.GTSentMailId = gsm.GTSentMailId

|||RegisterEntries
^^^CREATE VIEW [gradtours].[RegisterEntries]
AS
	SELECT
		r.RegisterTransactionId
		, RT.TransactionSource
		, RT.DateCreated
		, r.DateCreated as RegisterDateCreated
		, r.BilledDate
		, r.DueDate
		, r.PaymentDate
		, r.Amount
		, (
			SELECT Symbol
			FROM gradtours.Currency
			WHERE (CurrencyId = r.CurrencyId)) AS AmountCurrency
		, r.SourceAmount
		, (
			SELECT Symbol
			FROM gradtours.Currency AS Currency_1
			WHERE (CurrencyId = r.SourceCurrencyId)) AS SourceCurrency
		, r.AmountUSD
		, r.DebitCredit
		, r.DebitCreditRegisterId
		, r.COAID
		, gradtours.COAAllocation.Name AS AllocationName
		, r.TaxId
		, T.name AS TaxName
		, r.Reference
		, r.Memo
		, gradtours.COA.Name AS AccountName
		, gradtours.COACategory.Name AS CategoryName
		, gradtours.COACategoryType.Name AS CategoryTypeName
		, r.VendorId
		, r.TripId
		, tr.TripReference
		, V.vendorName
		, C.ClientId
		, isnull(C.FirstName,'') + ' ' + isnull(C.LastName,'') + ' ' + isnull(C.BusinessName,'') AS ClientName
		, gradtours.COAAllocation.COAAllocationId
		, r.EffectiveDate
		, gradtours.COACategory.COACategoryId
		, gradtours.COACategoryType.COACategoryTypeId
		, parentcoa.Name AS COAParent
		, gradtours.COACategory.DisplayOrder AS CategoryDisplayOrder
		, r.Audited
		, ParentCOACategory.COACategoryId as ParentCOACategoryId
		, ParentCOACategory.Name AS ParentCategoryName
		, ParentCOACategory.DisplayOrder AS ParentCategoryDisplayOrder
		, r.CompanyId
		, v.localeid
		, company.COde as LECode
	FROM
		gradtours.Register AS r
		INNER JOIN gradtours.RegisterTransaction AS RT ON RT.RegisterTransactionId = r.RegisterTransactionId
		INNER JOIN gradtours.COA ON gradtours.COA.COAID = r.COAID
		INNER JOIN Company ON COA.CompanyId = Company.COmpanyId
		LEFT OUTER JOIN gradtours.COA AS parentcoa ON parentcoa.COAID = gradtours.COA.ParentCOAID
		INNER JOIN gradtours.COACategory ON gradtours.COA.COACategoryId = gradtours.COACategory.COACategoryId
		LEFT OUTER JOIN gradtours.COACategory AS ParentCOACategory ON
			gradtours.COACategory.ParentCOACategoryId = ParentCOACategory.COACategoryId
			AND ParentCOACategory.ParentCOACategoryId IS NOT NULL
		INNER JOIN gradtours.COACategoryType ON gradtours.COACategory.COACategoryTypeId = gradtours.COACategoryType.COACategoryTypeId
		LEFT OUTER JOIN gradtours.COAAllocation ON gradtours.COAAllocation.COAAllocationId = r.COAAllocationId
		LEFT OUTER JOIN gradtours.vendors AS V ON V.vendorId = r.VendorId
		LEFT OUTER JOIN gradtours.Client AS C ON C.ClientId = r.ClientId
		LEFT OUTER JOIN gradtours.VendorTax AS T ON T.taxId = r.TaxId
		LEFT JOIN Trip tr ON r.TripId = tr.TripId
	WHERE (ISNULL(r.Deleted, 0) = 0)

|||Report_IncomeStatementPostedData
^^^-- =============================================  
-- Author:  Andrew Thorogood  
-- Create date: Nov 3, 2016
-- Description: Get Posted Income Statement Data
-- Updated: May 2, 2017
-- Description: Added YearMonth
-- =============================================  
CREATE VIEW [gradtours].[Report_IncomeStatementPostedData]
AS
Select
	'Tours Rev & COGS' as ResultType,
	year(PostingDate) as yr,
	month(PostingDate) as mo,
	CAST(year(Postingdate) as varchar(4)) + '-' + RIGHT(100+CAST(month(postingdate) as INT),2) as YearMonth,
	sum(RevenueUSD) as rev,
	sum(ActualCostUSD) as cogs,
	'Revenue' as revL1,
	'COGS' as costL1,
	'Tours' as L2,
	c.name as L3,
	c.coaallocationid as localeid,
	c.displayorder
From 
	COAAllocation c
	inner join COAAllocationtree lt on (c.COAAllocationid = lt.parentCOAAllocationid)
	inner join SalesReportTripsFromTripLedgerByAgent sr on lt.COAAllocationid = sr.COAAllocationid 
	inner join trip on trip.tripId = sr.tripId
Where
	((c.parentCOAAllocationid = 51) or (c.coaallocationid = 51 and sr.coaallocationid = 51))
	and trip.companyId in (select companyid from fn_Company_GetChildCompanies (7))
	and PostingDate >= '2015-09-01'
	--and PostingDate <= '2016-11-30'
Group by
	year(PostingDate), month(PostingDate), c.name, c.coaallocationid, c.displayorder
UNION
Select
	'Airfare Rev & COGS' as ResultType,
	YEAR(BilledDate) as yr, 
	MONTH(BilledDate) as mo,
	CAST(year(BilledDate) as varchar(4)) + '-' + RIGHT(100+CAST(month(BilledDate) as INT),2) as YearMonth,
	sum(revenueUSD) as rev,
	sum(costUSD) as cogs,
	'Revenue' as revL1,
	'COGS' as costL1,
	'Other' as L2,
	'Airfare' as L3,
	'' as localeid,
	'' as displayorder
From
	Finance_ItineraryServiceAirfareSummary
Where
	companyid in (select companyid from fn_Company_GetChildCompanies (7))
	and BilledDate >= '2015-09-01'
	--and BilledDate <= '2016-11-30'
Group by 
	YEAR(BilledDate),
	MONTH(BilledDate)
UNION
Select
	'Insurance Rev & COGS' as ResultType,
	YEAR(BilledDate) as yr, 
	MONTH(BilledDate) as mo,
	CAST(year(BilledDate) as varchar(4)) + '-' + RIGHT(100+CAST(month(BilledDate) as INT),2) as YearMonth,
	sum(revenueUSD) as rev,
	sum(costUSD) as cogs,
	'Revenue' as revL1,
	'COGS' as costL1,
	'Other' as L2,
	'Insurance' as L3,
	'' as localeid,
	'' as displayorder
From
	Finance_ItineraryServiceInsuranceSummary 
Where
	companyid in (select companyid from fn_Company_GetChildCompanies (7))
	and BilledDate >= '2015-09-01'
	--and BilledDate <= '2016-11-30'
Group by 
	YEAR(BilledDate), MONTH(BilledDate)
UNION
Select
	'Agent Comm' as ResultType,
	year(PostingDate) as yr,
	month(PostingDate) as mo,
	CAST(year(PostingDate) as varchar(4)) + '-' + RIGHT(100+CAST(month(PostingDate) as INT),2) as YearMonth,
	sum(RevenueUSD) as rev,
	sum(ActualCostUSD) as cogs,
	'Revenue' as revL1,
	'Other' as costL1,
	'Marketing' as L2,
	c.name as L3,
	tripallocationparent.coaallocationid as localeid,
	tripallocationparent.displayorder as displayorder
From 
	COAAllocation c     
	inner join COAAllocationtree lt on (c.COAAllocationid = lt.parentCOAAllocationid)   
	inner join SalesReportTripsFromTripLedgerByAgent sr on lt.COAAllocationid = sr.COAAllocationid 
	inner join trip on trip.tripid = sr.tripid 
	inner join coaallocation tripallocationparent on tripallocationparent.coaallocationid = gradtours.fn_GetParentCOAAllocationIdUnderTours(51, trip.salescoaallocationid)  
Where
	((c.parentCOAAllocationid = 54) or (c.coaallocationid = 54 and sr.coaallocationid = 54))
	and trip.CompanyId in (select companyid from fn_Company_GetChildCompanies (7))
	and PostingDate >= '2015-09-01'
	--and PostingDate <= '2016-11-30'
Group by
	year(PostingDate),
	month(PostingDate),
	c.name,
	tripallocationparent.coaallocationid,
	tripallocationparent.displayorder
UNION
Select
	'SG&A Exp' as ResultType,
	Year(EffectiveDate) as yr,
	Month(EffectiveDate) as mo,
	CAST(year(EffectiveDate) as varchar(4)) + '-' + RIGHT(100+CAST(month(EffectiveDate) as INT),2) as YearMonth,
	0 as rev,
	sum(case when DebitCredit = 'C' then amountusd * -1 ELSE AmountUSD END) as cogs,
	'Revenue' as revL1,
	'Expenses' as costL1,
	'SG&A' as L2,
	CASE WHEN coaparent is not null	
		THEN coaparent + ' ' + AccountName
		ELSE AccountName END AS L3,
	'' as localeid,
	'' as displayorder
From
	registerentries
	inner join fn_Company_GetChildCompanies (7) c on c.companyid = registerentries.companyid
Where
	coacategorytypeid = 2
	and (coacategoryid = 55 or TripId is null)
	and coacategoryid <> 127 -- non tour specific cogs
	and coaid not in (select defaultexpensecoaid from CompanyVendors where vendorid = 1518) -- exclude TA commissions, we need this to run off booked and earned as appropriate
	and CAST(CONVERT(CHAR(8), EffectiveDate, 112) AS DATETIME) >= '2015-09-01'
	--and CAST(CONVERT(CHAR(8), EffectiveDate, 112) AS DATETIME) <= '2016-11-30'
Group By
	Year(EffectiveDate),
	Month(EffectiveDate),
	AccountName,
	coaparent
Having sum(case when DebitCredit = 'C' then amountusd * -1 ELSE AmountUSD END) <> 0

|||Report_IncomeStatementPostedData_TravInv
^^^CREATE VIEW [gradtours].[Report_IncomeStatementPostedData_TravInv]
AS
Select
	'Tours Rev & COGS' as ResultType,
	year(PostingDate) as yr,
	month(PostingDate) as mo,
	CAST(year(Postingdate) as varchar(4)) + '-' + RIGHT(100+CAST(month(postingdate) as INT),2) as YearMonth,
	sum(RevenueUSD) as rev,
	sum(ActualCostUSD) as cogs,
	'Revenue' as revL1,
	'COGS' as costL1,
	'Tours' as L2,
	c.name as L3,
	c.coaallocationid as localeid,
	c.displayorder
From 
	COAAllocation c
	inner join COAAllocationtree lt on (c.COAAllocationid = lt.parentCOAAllocationid)
	inner join SalesReportTripsFromTripLedgerByAgent sr on lt.COAAllocationid = sr.COAAllocationid 
	inner join trip on trip.tripId = sr.tripId
Where
	((c.parentCOAAllocationid = 51) or (c.coaallocationid = 51 and sr.coaallocationid = 51))
	and trip.companyId in (select companyid from fn_Company_GetChildCompanies (7))
	and PostingDate >= '2015-09-01'
	--and PostingDate <= '2016-11-30'
Group by
	year(PostingDate), month(PostingDate), c.name, c.coaallocationid, c.displayorder
UNION
Select
	'Airfare Rev & COGS' as ResultType,
	YEAR(BilledDate) as yr, 
	MONTH(BilledDate) as mo,
	CAST(year(BilledDate) as varchar(4)) + '-' + RIGHT(100+CAST(month(BilledDate) as INT),2) as YearMonth,
	sum(revenueUSD) as rev,
	sum(costUSD) as cogs,
	'Revenue' as revL1,
	'COGS' as costL1,
	'Other' as L2,
	'Airfare' as L3,
	'' as localeid,
	'' as displayorder
From
	Finance_ItineraryServiceAirfareSummary
Where
	companyid in (select companyid from fn_Company_GetChildCompanies (7))
	and BilledDate >= '2015-09-01'
	--and BilledDate <= '2016-11-30'
Group by 
	YEAR(BilledDate),
	MONTH(BilledDate)
UNION
Select
	'Insurance Rev & COGS' as ResultType,
	YEAR(BilledDate) as yr, 
	MONTH(BilledDate) as mo,
	CAST(year(BilledDate) as varchar(4)) + '-' + RIGHT(100+CAST(month(BilledDate) as INT),2) as YearMonth,
	sum(revenueUSD) as rev,
	sum(costUSD) as cogs,
	'Revenue' as revL1,
	'COGS' as costL1,
	'Other' as L2,
	'Insurance' as L3,
	'' as localeid,
	'' as displayorder
From
	Finance_ItineraryServiceInsuranceSummary_TravInv 
Where
	companyid in (select companyid from fn_Company_GetChildCompanies (7))
	and BilledDate >= '2015-09-01'
	--and BilledDate <= '2016-11-30'
Group by 
	YEAR(BilledDate), MONTH(BilledDate)
UNION
Select
	'Agent Comm' as ResultType,
	year(PostingDate) as yr,
	month(PostingDate) as mo,
	CAST(year(PostingDate) as varchar(4)) + '-' + RIGHT(100+CAST(month(PostingDate) as INT),2) as YearMonth,
	sum(RevenueUSD) as rev,
	sum(ActualCostUSD) as cogs,
	'Revenue' as revL1,
	'Other' as costL1,
	'Marketing' as L2,
	c.name as L3,
	tripallocationparent.coaallocationid as localeid,
	tripallocationparent.displayorder as displayorder
From 
	COAAllocation c     
	inner join COAAllocationtree lt on (c.COAAllocationid = lt.parentCOAAllocationid)   
	inner join SalesReportTripsFromTripLedgerByAgent sr on lt.COAAllocationid = sr.COAAllocationid 
	inner join trip on trip.tripid = sr.tripid 
	inner join coaallocation tripallocationparent on tripallocationparent.coaallocationid = gradtours.fn_GetParentCOAAllocationIdUnderTours(51, trip.salescoaallocationid)  
Where
	((c.parentCOAAllocationid = 54) or (c.coaallocationid = 54 and sr.coaallocationid = 54))
	and trip.CompanyId in (select companyid from fn_Company_GetChildCompanies (7))
	and PostingDate >= '2015-09-01'
	--and PostingDate <= '2016-11-30'
Group by
	year(PostingDate),
	month(PostingDate),
	c.name,
	tripallocationparent.coaallocationid,
	tripallocationparent.displayorder
UNION
Select
	'SG&A Exp' as ResultType,
	Year(EffectiveDate) as yr,
	Month(EffectiveDate) as mo,
	CAST(year(EffectiveDate) as varchar(4)) + '-' + RIGHT(100+CAST(month(EffectiveDate) as INT),2) as YearMonth,
	0 as rev,
	sum(case when DebitCredit = 'C' then amountusd * -1 ELSE AmountUSD END) as cogs,
	'Revenue' as revL1,
	'Expenses' as costL1,
	'SG&A' as L2,
	CASE WHEN coaparent is not null	
		THEN coaparent + ' ' + AccountName
		ELSE AccountName END AS L3,
	'' as localeid,
	'' as displayorder
From
	registerentries
	inner join fn_Company_GetChildCompanies (7) c on c.companyid = registerentries.companyid
Where
	coacategorytypeid = 2
	and (coacategoryid = 55 or TripId is null)
	and coacategoryid <> 127 -- non tour specific cogs
	and coaid not in (select defaultexpensecoaid from CompanyVendors where vendorid = 1518) -- exclude TA commissions, we need this to run off booked and earned as appropriate
	and CAST(CONVERT(CHAR(8), EffectiveDate, 112) AS DATETIME) >= '2015-09-01'
	--and CAST(CONVERT(CHAR(8), EffectiveDate, 112) AS DATETIME) <= '2016-11-30'
Group By
	Year(EffectiveDate),
	Month(EffectiveDate),
	AccountName,
	coaparent
Having sum(case when DebitCredit = 'C' then amountusd * -1 ELSE AmountUSD END) <> 0

|||Report_TripServiceData
^^^CREATE VIEW [gradtours].[Report_TripServiceData]
AS
SELECT     isa.ServiceId,
                          (SELECT     service
                            FROM          gradtours.services
                            WHERE      (servicesId = isa.ServiceId)) AS ServiceName, gradtours.fn_GetIDofServiceFromServiceIdProviderServiceId(isa.ServiceId, isa.ProviderServiceId) 
                      AS ActivityId, isa.ItineraryId, isa.ServiceStartDate, isa.GlobalServiceId, isa.ProviderServiceId, isa.globalServiceName, isa.DefaultQuotedGroupAllocation, 
                      isa.QuotedGroupAllocation, gradtours.GetNumberOfHotelRooms(isa.ServiceId, isa.DefaultQuotedGroupAllocation, isa.QuotedGroupAllocation, N'SGL') AS Single, 
                      gradtours.GetNumberOfHotelRooms(isa.ServiceId, isa.DefaultQuotedGroupAllocation, isa.QuotedGroupAllocation, N'DBL') AS [Double], 
                      gradtours.GetNumberOfHotelRooms(isa.ServiceId, isa.DefaultQuotedGroupAllocation, isa.QuotedGroupAllocation, N'TWN') AS Twin, 
                      gradtours.GetNumberOfHotelRooms(isa.ServiceId, isa.DefaultQuotedGroupAllocation, isa.QuotedGroupAllocation, N'TPL') AS Triple, 
                      gradtours.GetNumberOfHotelRooms(isa.ServiceId, isa.DefaultQuotedGroupAllocation, isa.QuotedGroupAllocation, N'QUAD') AS Quad, isa.Cost, isa.ConvertedCost, 
                      isa.Cost_CurrencyId, isa.ConvertedCost_CurrencyId,
                          (SELECT     Name
                            FROM          gradtours.Currency
                            WHERE      (CurrencyId = isa.Cost_CurrencyId)) AS CostCurrencyName, isa.vendordisplayname, isa.VendorId, iad.itinerarytypeid,
                          (SELECT     Name
                            FROM          gradtours.ItineraryType
                            WHERE      (ItineraryTypeId = iad.itinerarytypeid)) AS ItineraryTypeName, isa.BookingId, bs.bookingStatus, isa.SourceLocaleName, isa.SourceLocaleId, 
                      isa.ServiceDescriptionId, isa.ActivityTypeName, isa.SimpleServiceName, (CASE isa.ServiceId WHEN 1 THEN
                          (SELECT     name
                            FROM          Category
                            WHERE      CategoryId =
                                                       (SELECT     categoryid
                                                         FROM          Hotel
                                                         WHERE      HotelId = (gradtours.fn_GetIDofServiceFromServiceIdProviderServiceId(isa.serviceId, isa.ProviderServiceId)))) WHEN 2 THEN
                          (SELECT     name
                            FROM          Category
                            WHERE      CategoryId =
                                                       (SELECT     categoryid
                                                         FROM          Ground
                                                         WHERE      GroundId = (gradtours.fn_GetIDofServiceFromServiceIdProviderServiceId(isa.serviceId, isa.ProviderServiceId)))) WHEN 3 THEN
                          (SELECT     name
                            FROM          Category
                            WHERE      CategoryId =
                                                       (SELECT     categoryid
                                                         FROM          Air
                                                         WHERE      AirId = (gradtours.fn_GetIDofServiceFromServiceIdProviderServiceId(isa.serviceId, isa.ProviderServiceId)))) WHEN 11 THEN
                          (SELECT     name
                            FROM          itinerarytype
                            WHERE      itinerarytypeid =
                                                       (SELECT     itineraryTypeId
                                                         FROM          itinerary
                                                         WHERE      itineraryId =
                                                                                    (SELECT     itineraryId
                                                                                      FROM          ItineraryService_AllDetails
                                                                                      WHERE      itineraryserviceid = isa.globalServiceId))) END) AS ServiceCategoryName, (CASE isa.ServiceId WHEN 1 THEN
                          (SELECT     name
                            FROM          HotelRoomCategory
                            WHERE      HotelRoomCategoryId = isa.ProviderServiceId) WHEN 2 THEN
                          (SELECT     VehicleName
                            FROM          Ground2Vehicle
                            WHERE      Ground2VehicleId = isa.ProviderServiceId) WHEN 3 THEN
                          (SELECT     Name
                            FROM          TransportCategory
                            WHERE      TransportCategoryId = isa.ProviderServiceId) WHEN 11 THEN
                          (SELECT     Name
                            FROM          ItineraryService2VendorRateType
                            WHERE      ItineraryService2VendorRateTypeId = isa.ProviderServiceId) END) AS ServiceSubCategoryName, 
                      (CASE WHEN isnumeric(substring(isa.QuotedGroupAllocation, 1, 1)) = 1 THEN '' WHEN substring(isa.QuotedGroupAllocation, 1, 1) 
                      = '#' THEN gradtours.fn_GroupAllocationString_GetNumberOfPeople(isa.DefaultQuotedGroupAllocation) 
                      ELSE gradtours.fn_GroupAllocationString_GetNumberOfPeople(ISNULL(isa.QuotedGroupAllocation, isa.DefaultQuotedGroupAllocation)) END) AS NumberOfPeople, 
                      '' AS Capacity_Vehicle, isa.DateCreated, gradtours.fn_GetMaxSeasonEndDateOfService(isa.ServiceId, isa.ProviderServiceId) AS RatesValidUntil, 
                      gradtours.fn_GetLastModifiedRatesDateOfService(isa.ServiceId, isa.ProviderServiceId) AS RatesLastModified,
                          (SELECT     Name
                            FROM          gradtours.Locale
                            WHERE      (LocaleId = iad.localeid)) AS Region,
                          (SELECT     Name
                            FROM          gradtours.COAAllocation
                            WHERE      (COAAllocationId = iad.salescoaallocationid)) AS SalesAllocation, (CASE isa.ServiceId WHEN 1 THEN
                          (SELECT     ProductCode
                            FROM          Hotel2Vendor
                            WHERE      VendorId = isa.VendorId AND HotelId = gradtours.fn_GetIDofServiceFromServiceIdProviderServiceId(isa.serviceId, isa.ProviderServiceId) AND 
                                                   isnull(Hotel2Vendor.Deleted, 0) = 0) WHEN 2 THEN
                          (SELECT     ProductCode
                            FROM          Ground2Vendor
                            WHERE      VendorId = isa.VendorId AND GroundId = gradtours.fn_GetIDofServiceFromServiceIdProviderServiceId(isa.serviceId, isa.ProviderServiceId) AND 
                                                   isnull(Ground2Vendor.Deleted, 0) = 0) WHEN 3 THEN
                          (SELECT     ProductCode
                            FROM          Air2Vendor
                            WHERE      VendorId = isa.VendorId AND AirId = gradtours.fn_GetIDofServiceFromServiceIdProviderServiceId(isa.serviceId, isa.ProviderServiceId) AND 
                                                   isnull(Air2Vendor.Deleted, 0) = 0) WHEN 11 THEN
                          (SELECT     ProductCode
                            FROM          ItineraryServiceVendorActivity
                            WHERE      ItineraryServiceVendorActivity.VendorId = isa.VendorId AND ItineraryServiceId = isa.globalServiceId AND isnull(ItineraryServiceVendorActivity.Deleted, 0) 
                                                   = 0) END) AS BookingCode, (CASE isa.ServiceId WHEN 1 THEN
                          (SELECT     ChainCode
                            FROM          Hotel
                            WHERE      HotelId = gradtours.fn_GetIDofServiceFromServiceIdProviderServiceId(isa.serviceId, isa.ProviderServiceId)) END) AS ChainCode, 
                      (CASE isa.ServiceId WHEN 1 THEN
                          (SELECT     BrandCode
                            FROM          Hotel
                            WHERE      HotelId = gradtours.fn_GetIDofServiceFromServiceIdProviderServiceId(isa.serviceId, isa.ProviderServiceId)) END) AS BrandCode, 
                      iad.salescoaallocationid, iad.itinerarystartdate
FROM         gradtours.ItineraryAllDetails AS iad INNER JOIN
                      gradtours.ItineraryService_AllDetails_WithBookingInfo AS isa ON isa.ItineraryId = iad.itineraryid AND isa.Deleted = 0 INNER JOIN
                      gradtours.ServiceDescription AS sd ON sd.ServiceDescriptionId = isa.ServiceDescriptionId AND sd.Deleted = 0 INNER JOIN
                      gradtours.bookingStatus AS bs ON bs.bookingStatusId = isa.BookingStatusId
WHERE     (iad.itinerarycategoryid = 8)

|||Report_TripServiceData_Revised
^^^CREATE VIEW [gradtours].[Report_TripServiceData_Revised]
AS
SELECT     gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, gradtours.services.service AS ServiceName, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceStartDate, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.GlobalServiceId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ProviderServiceId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.globalServiceName, gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.Cost, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.ConvertedCost, gradtours.ItineraryService_AllDetails_WithBookingInfo.Cost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.ConvertedCost_CurrencyId, gradtours.Currency.Name AS CostCurrencyName, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.vendordisplayname, gradtours.ItineraryService_AllDetails_WithBookingInfo.VendorId, 
                      gradtours.Itinerary.ItineraryTypeId, gradtours.ItineraryType.Name AS ItineraryTypeName, gradtours.ItineraryService_AllDetails_WithBookingInfo.BookingId, 
                      gradtours.bookingStatus.bookingStatus, gradtours.ServiceDescription.SourceLocaleName, gradtours.ServiceDescription.SourceLocaleId, 
                      gradtours.ServiceDescription.ServiceDescriptionId, gradtours.ServiceDescription.ActivityTypeDisplayName AS ActivityTypeName, 
                      gradtours.ServiceDescription.SimpleServiceName, gradtours.ServiceDescription.CategoryName AS ServiceCategoryName, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DateCreated,
                          (SELECT     Name
                            FROM          gradtours.Locale
                            WHERE      (LocaleId = gradtours.Itinerary.LocaleId)) AS Region,
                          (SELECT     Name
                            FROM          gradtours.COAAllocation
                            WHERE      (COAAllocationId = gradtours.Itinerary.SalesCOAAllocationId)) AS SalesAllocation, gradtours.Itinerary.SalesCOAAllocationId, 
                      gradtours.ItineraryQuote.ItineraryStartDate, 
                      CASE WHEN gradtours.ItineraryService_AllDetails_WithBookingInfo.IsCustomService = 1 THEN 'True' ELSE 'False' END AS IsCustomService
FROM         gradtours.ItineraryService_AllDetails_WithBookingInfo INNER JOIN
                      gradtours.services ON gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId = gradtours.services.servicesId LEFT OUTER JOIN
                      gradtours.Currency ON gradtours.ItineraryService_AllDetails_WithBookingInfo.Cost_CurrencyId = gradtours.Currency.CurrencyId INNER JOIN
                      gradtours.Itinerary ON gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryId = gradtours.Itinerary.ItineraryId LEFT OUTER JOIN
                      gradtours.ItineraryType ON gradtours.Itinerary.ItineraryTypeId = gradtours.ItineraryType.ItineraryTypeId INNER JOIN
                      gradtours.bookingStatus ON gradtours.ItineraryService_AllDetails_WithBookingInfo.BookingStatusId = gradtours.bookingStatus.bookingStatusId INNER JOIN
                      gradtours.ServiceDescription ON gradtours.services.servicesId = gradtours.ServiceDescription.ServiceId AND 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceDescriptionId = gradtours.ServiceDescription.ServiceDescriptionId LEFT OUTER JOIN
                      gradtours.ActivityType ON gradtours.ServiceDescription.ActivityTypeId = gradtours.ActivityType.ActivityTypeId INNER JOIN
                      gradtours.ItineraryQuote ON gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId
WHERE     (gradtours.Itinerary.ItineraryCategoryId = 8)

|||SalesReportTripsFromTripLedgerByAgent
^^^-- =============================================
-- Author: Dean Cummins
-- ALTER date: 19 Jan 2011
-- Description: Returns Trip Rev by TL/Region
-- =============================================
CREATE VIEW [gradtours].[SalesReportTripsFromTripLedgerByAgent]
AS
	SELECT
		t.TripId
		, SUM(ISNULL(v.actualCostUSD, 0)) AS ActualCostUSD
		, SUM(ISNULL(r.revenueusd, 0)) AS RevenueUSD
		, ISNULL(v.COAAllocationId, r.COAAllocationId) AS COAAllocationId
		, 0 AS BookedCostUSD
		, tl.postingdate
		, tl.quoteAgentId
		, t.TripStartDate AS startDate
		, ISNULL(v.vendorTypeId, r.vendorTypeId) AS vendorTypeId
		, t.cancelled
	FROM
		ItineraryTrip_VendorCostSummaryByCOAAllocationByDate v
		FULL OUTER JOIN ItineraryTrip_RevenueAllocationByCOAAllocationByDate r ON
			v.coaallocationid = r.coaallocationid
			AND v.vendortypeid = r.vendortypeid
			AND r.tripledgerid = v.tripledgerid
		FULL OUTER JOIN TripLedger tl ON tl.tripledgerid = ISNULL(r.tripledgerid, v.tripledgerid)
		INNER JOIN Product p on tl.ProductId = p.ProductId
		INNER JOIN Trip t ON t.TripId = p.tripid
	GROUP BY
		t.TripId
		, tl.postingdate
		, tl.quoteAgentId
		, t.TripStartDate
		, ISNULL(v.vendorTypeId, r.vendorTypeId)
		, ISNULL(v.COAAllocationId, r.COAAllocationId)
		, t.Cancelled

|||SalesReportTripsFromTripLedgerByAgent_XMonth_MK
^^^--SELECT * FROM [gradtours].[SalesReportTripsFromTripLedgerByAgent]
-- =============================================
-- Author: Dean Cummins
-- ALTER date: 19 Jan 2011
-- Description: Returns Trip Rev by TL/Region
-- Description: Optimize to search only for current year data. (Comment :MK: I cannot find such change in the views)
-- Optimized: MK: 2022-07-18
-- =============================================
CREATE VIEW [gradtours].[SalesReportTripsFromTripLedgerByAgent_XMonth_MK]
AS
	SELECT
		t.TripId
		, SUM(ISNULL(v.actualCostUSD, 0)) AS ActualCostUSD
		, SUM(ISNULL(r.revenueusd, 0)) AS RevenueUSD
		, ISNULL(v.COAAllocationId, r.COAAllocationId) AS COAAllocationId
		, 0 AS BookedCostUSD
		, tl.postingdate
		, tl.quoteAgentId
		, t.TripStartDate AS startDate
		, ISNULL(v.vendorTypeId, r.vendorTypeId) AS vendorTypeId
		, t.cancelled
		--TL.ISActive
	FROM
		ItineraryTrip_VendorCostSummaryByCOAAllocationByDate v
		INNER JOIN  ItineraryTrip_RevenueAllocationByCOAAllocationByDate r ON
			v.coaallocationid = r.coaallocationid
			AND v.vendortypeid = r.vendortypeid
			AND r.tripledgerid = v.tripledgerid
		INNER JOIN  TripLedger tl ON tl.tripledgerid = ISNULL(r.tripledgerid, v.tripledgerid)
		INNER JOIN Product p on tl.ProductId = p.ProductId
		INNER JOIN Trip t ON t.TripId = p.tripid
		--WHERE TL.ISActive=1 
		--and (v.coaallocationid =51 or r.coaallocationid =51)
	GROUP BY
		t.TripId
		, tl.postingdate
		, tl.quoteAgentId
		, t.TripStartDate
		, ISNULL(v.vendorTypeId, r.vendorTypeId)
		, ISNULL(v.COAAllocationId, r.COAAllocationId)
		, t.Cancelled
		--TL.ISActive

|||SalesViewCRM
^^^--set statistics io on
--set statistics time on
--select top 1000 * from [SalesViewCRM] where productitemid is null 
CREATE VIEW [gradtours].[SalesViewCRM]
AS
SELECT
  qaa.QuoteAgentActionId,
  qaa.ParentQuoteAgentActionId,
  qaa.QuoteAgentId,
  qaa.QuoteAgentActionTypeId,
  qaat.Name AS QuoteAgentActionTypeName,
  qaa.DateCreated,
  qaa.FollowUpDate,
  qaa.CompletedDate,
  qaa.CurrentItineraryId,
  c.ClientId,
  c.ClientTypeId,
  q.SalesCoaallocationId,
  CASE 
	WHEN 
		c.ClientTypeId in (3,4)
	THEN
		'AGENT'
	ELSE
		CASE 
			WHEN
				(select COUNT(*) from Trip 
				where MainContactClientId = c.ClientId) = 0
			THEN 
				'DIRECT'
			WHEN
				(select COUNT(*) from Trip 
				where MainContactClientId = c.ClientId) > 0
			THEN 'REPEAT'
		END
END as Channel
FROM QuoteAgentAction qaa
INNER JOIN QuoteAgentActionType qaat
  ON qaat.QuoteAgentActionTypeId = qaa.QuoteAgentActionTypeId
INNER JOIN Client c
  ON c.ClientId = qaa.ClientId
LEFT JOIN Itinerary q
  ON q.itineraryid = qaa.CurrentItineraryId

|||SalesViewOperations
^^^--set statistics io on
--set statistics time on
--select top 1000 * from [SalesViewOperations] 
CREATE VIEW [gradtours].[SalesViewOperations]
AS
	SELECT 
		t.SalesCoaAllocationId,
		t.QuoteAgentId,
		t.TripId,
		t.TripReference,
		t.Cancelled,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		count(s.ItineraryServiceId) as NumServices,
		sum(cast(s.IsCustomService as int)) as NumCustomService,
		sum(cast(s.UseCustomCost as int)) as NumCustomCost,
		sum(case when h.PreferredId in (1,2,3) then 1 else 0 end) as NumPreferredHotel,
		sum(case when s.ServiceId = 1 then 1 else 0 end) as NumHotels,
		0 as RatingRecommendKT,  --remove this
		0 as RatingQualityTour, --remove this
		0 as RatingQualityAccommodation, --remove this
		0 as RatingQualityDMC, --remove this
		0 as RatingRecommendSales, --remove this
		/*
		(select count(*) from travelerpaymentallocation a1
			inner join product p1 on p1.productid = a1.productid
			where p1.tripid = t.tripid) as NumClientPayments
		*/
		0 as NumClientPayments, --remove this
		(select sum(ActualCostUSD) from ClientRefund
			inner join ProductItem on ClientRefund.ProductItemId = ProductItem.ProductItemId
			where ClientRefund.TripId = t.TripId) as RefundAmountUSD,
		(select count(*) from TripFeedback where TripId = t.TripId and RecommendKT >= 0 and RecommendKT <= 6) as NumNPSDetractors,
		(select count(*) from TripFeedback where TripId = t.TripId and RecommendKT >= 9) as NumNPSPromoters,
		(select count(*) from TripFeedback where TripId = t.TripId and RecommendKT >= 0) as NumNPSScores
	FROM Trip t
		inner join ItineraryTrip i on i.ItineraryReference = t.TripReference
		inner join ItineraryDay d on d.ItineraryId = i.ItineraryId
		inner join ItineraryService s on s.ItineraryDayId = d.ItineraryDayId
		inner join ItineraryService2Booking b on b.ItineraryServiceId = s.ItineraryServiceId
		inner join BookingStatus bs on bs.BookingStatusId = b.BookingStatusId
		--inner join TripFeedback f on f.TripId = t.TripId
		left join HotelRoomCategory hrc on hrc.gHotelRoomId = s.GlobalServiceId
		left join Hotel2Vendor h on h.VendorId = s.VendorId and h.HotelId = hrc.HotelId
	where (bs.IncludedWhenCalculatingCost = 1 or bs.BookingStatusId = 15)
	group by 
		t.SalesCoaAllocationId,
		t.QuoteAgentId,
		t.TripId,
		t.Cancelled,
		t.TripReference,
		t.BookedDate,
		t.TripStartDate
		/*
		f.RecommendKT, 
		f.QualityTour,
		f.QualityAccommodation,
		f.QualityDMC,
		f.RecommendSales
		*/

|||Service2Picture
^^^CREATE view [gradtours].[Service2Picture] AS 
select GhotelroomId AS GlobalServiceId, Hotel2Picture.hotelid AS activityId, 1 AS ServiceId, pictureid, rank from Hotel2Picture inner join hotelroomcategory on hotel2picture.hotelid = hotelroomcategory.hotelid
union
select ground2vehicleid, Ground2Picture.groundid AS activityId, 2, pictureid, rank from Ground2Picture inner join ground2vehicle on Ground2Picture.groundid = ground2vehicle.groundid
union
select transportcategoryid, Transport2Picture.transportid AS activityId, 3, pictureid, rank from Transport2Picture inner join transportcategory on Transport2Picture.transportid = transportcategory.transportcategoryid

|||SupplierPaidTotals_ConvertedCost
^^^CREATE VIEW [gradtours].[SupplierPaidTotals_ConvertedCost]
AS
SELECT     gradtours.TripDetails.tripId, SUM(gradtours.TripDetails.ConvertedCost) AS costpreadj, 
                      SUM(CASE WHEN gradtours.TripDetails.usenewcost > 0 THEN gradtours.TripDetails.ConvertedNewcost ELSE gradtours.TripDetails.Convertedcost END) AS cost,
                          (SELECT     SUM(fee) AS Expr1
                            FROM          gradtours.vendorPayments
                            WHERE      (tripId = gradtours.TripDetails.tripId)) AS fee, gradtours.vwSumSupplierPaymentDetails.Paid, 
                      SUM(CASE WHEN gradtours.TripDetails.usenewcost > 0 THEN gradtours.TripDetails.convertednewcost - gradtours.TripDetails.convertedcost ELSE 0 END) AS diff, 
                      gradtours.ItineraryTrip_RevenueSummary.AdjustedRevenueUSD AS rev, ISNULL
                          ((SELECT     SUM(paid1 + paid2 + paid3) AS Expr1
                              FROM         gradtours.vendorPayments AS vendorPayments_1
                              WHERE     (tripId = gradtours.TripDetails.tripId)), 0) AS vendorpayments
FROM         gradtours.TripDetails INNER JOIN
                      gradtours.ItineraryTrip_RevenueSummary ON gradtours.TripDetails.tripId = gradtours.ItineraryTrip_RevenueSummary.ItineraryId FULL OUTER JOIN
                      gradtours.vwSumSupplierPaymentDetails ON gradtours.TripDetails.tripId = gradtours.vwSumSupplierPaymentDetails.ItineraryId
WHERE     (gradtours.TripDetails.bookingstatusid <> 5)
GROUP BY gradtours.vwSumSupplierPaymentDetails.Paid, gradtours.TripDetails.tripId, gradtours.ItineraryTrip_RevenueSummary.AdjustedRevenueUSD
HAVING      (gradtours.TripDetails.tripId IS NOT NULL)

|||SupplierPaidTotals_Cost
^^^CREATE VIEW [gradtours].[SupplierPaidTotals_Cost]
AS
SELECT     gradtours.TripDetails.tripId, SUM(gradtours.TripDetails.Cost) AS costpreadj, 
                      SUM(CASE WHEN gradtours.TripDetails.usenewcost > 0 THEN gradtours.TripDetails.newcost ELSE gradtours.TripDetails.cost END) AS cost,
                          (SELECT     SUM(fee) AS Expr1
                            FROM          gradtours.vendorPayments
                            WHERE      (tripId = gradtours.TripDetails.tripId)) AS fee, gradtours.vwSumSupplierPaymentDetails.Paid, 
                      SUM(CASE WHEN gradtours.TripDetails.usenewcost > 0 THEN gradtours.TripDetails.convertednewcost - gradtours.TripDetails.convertedcost ELSE 0 END) AS diff, 
                      gradtours.ItineraryTrip_RevenueSummary.AdjustedRevenueUSD AS rev,
                          (SELECT     SUM(paid1 + paid2 + paid3) AS Expr1
                            FROM          gradtours.vendorPayments AS vendorPayments_1
                            WHERE      (tripId = gradtours.TripDetails.tripId)) AS vendorpayments
FROM         gradtours.TripDetails INNER JOIN
                      gradtours.ItineraryTrip_RevenueSummary ON gradtours.TripDetails.tripId = gradtours.ItineraryTrip_RevenueSummary.ItineraryId FULL OUTER JOIN
                      gradtours.vwSumSupplierPaymentDetails ON gradtours.TripDetails.tripId = gradtours.vwSumSupplierPaymentDetails.ItineraryId
WHERE     (gradtours.TripDetails.bookingstatusid <> 5)
GROUP BY gradtours.vwSumSupplierPaymentDetails.Paid, gradtours.TripDetails.tripId, gradtours.ItineraryTrip_RevenueSummary.AdjustedRevenueUSD
HAVING      (gradtours.TripDetails.tripId IS NOT NULL)

|||TemplateItineraryHotels
^^^CREATE VIEW [gradtours].[TemplateItineraryHotels]
AS
SELECT     gradtours.Itinerary.ItineraryId, gradtours.HotelRoomCategory.HotelId AS HotelId, COUNT_BIG(*) AS countbig  
FROM         gradtours.Itinerary INNER JOIN  
                      gradtours.ItineraryCategory ON gradtours.Itinerary.ItineraryCategoryId = gradtours.ItineraryCategory.ItineraryCategoryId INNER JOIN  
                      gradtours.ItineraryDay ON gradtours.ItineraryDay.ItineraryId = gradtours.Itinerary.ItineraryId INNER JOIN  
                      gradtours.ItineraryService ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId AND itineraryservice.serviceid = 1
    INNER JOIN gradtours.hotelroomcategory on itineraryservice.globalserviceid = hotelroomcategory.ghotelroomid  
WHERE (gradtours.ItineraryCategory.IsItineraryTemplate = 1) AND (ISNULL(gradtours.ItineraryDay.Deleted, 0) = 0) AND (gradtours.ItineraryService.Deleted = 0) AND   
                      (gradtours.Itinerary.IsActive = 1) AND (gradtours.Itinerary.ActiveCode = '1234') AND (ISNULL(gradtours.Itinerary.Deleted, 0) = 0) OR  
                      (ISNULL(gradtours.ItineraryDay.Deleted, 0) = 0) AND (gradtours.ItineraryService.Deleted = 0) AND (gradtours.Itinerary.IsActive = 1) AND   
                      (gradtours.Itinerary.ActiveCode = '1234') AND (gradtours.Itinerary.ItineraryCategoryId = 6)
GROUP BY gradtours.Itinerary.ItineraryId, gradtours.HotelRoomCategory.HotelId  

|||TemplateItineraryLocales
^^^CREATE VIEW   [gradtours].[TemplateItineraryLocales]
AS  
SELECT gradtours.Itinerary.ItineraryId, gradtours.ItineraryService.SourceLocaleId AS LocaleId, 
ItineraryService.DisplayOrder, ItineraryService.TimeOfDayId, ItineraryDay.[Day], count_big(*) as countbig  
FROM         gradtours.Itinerary INNER JOIN  
                      gradtours.ItineraryCategory ON gradtours.Itinerary.ItineraryCategoryId = gradtours.ItineraryCategory.ItineraryCategoryId INNER JOIN  
                      gradtours.ItineraryDay ON gradtours.ItineraryDay.ItineraryId = gradtours.Itinerary.ItineraryId INNER JOIN  
                      gradtours.ItineraryService ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId  
WHERE     (gradtours.ItineraryCategory.IsItineraryTemplate = 1 OR gradtours.Itinerary.ItineraryCategoryId = 6)  
AND  (ISNULL(gradtours.ItineraryDay.Deleted, 0) = 0) AND (gradtours.ItineraryService.Deleted = 0)  
AND IsActive = 1 AND ActiveCode = '1234' --and countryid <> 168  
  
GROUP BY gradtours.Itinerary.ItineraryId, gradtours.ItineraryService.SourceLocaleId, ItineraryService.TimeOfDayId, ItineraryDay.[Day], displayorder

|||TransportServiceSeason
^^^CREATE VIEW [gradtours].[TransportServiceSeason]
AS
SELECT     gradtours.AirRates.AirSeasonId AS SeasonId, gradtours.AirRates.transportCategoryId AS GlobalServiceId, 
                      gradtours.AirRates.transportCategoryId AS ProviderServiceId, gradtours.AirSeasonDates.SeasonStartDate AS StartDate, 
                      gradtours.AirSeasonDates.SeasonEndDate AS EndDate, gradtours.AirSeason.Name, gradtours.AirSeason.CurrencyId, gradtours.Air2Vendor.VendorId, 
                      gradtours.Air2Vendor.ServiceRateTypeId, gradtours.Rate.RateId, gradtours.Rate.PerPerson, gradtours.Rate.PerVehicle, gradtours.Rate.Flat, gradtours.Rate.ServiceId, 
                      gradtours.Rate.RateTypeId, ISNULL(gradtours.TransportCategory.Deleted, 0) | ISNULL(gradtours.Air2Vendor.Deleted, 0) | ISNULL(gradtours.AirSeason.Deleted, 0) 
                      | ISNULL(gradtours.AirSeasonDates.Deleted, 0) | ISNULL(gradtours.AirRates.Deleted, 0) | ISNULL(gradtours.Rate.Deleted, 0) AS Deleted, 
                      gradtours.TransportCategory.Name AS TransportName, gradtours.TransportCategory.TransportCapacity, NULL AS SubItemId, NULL AS RateStructureSetupId, 
                      gradtours.Rate.RateSetupId, NULL AS AdultCapacity, NULL AS MaxKidCapacity, NULL AS MaxKidAge
FROM         gradtours.AirSeason INNER JOIN
                      gradtours.AirRates ON gradtours.AirSeason.AirSeasonId = gradtours.AirRates.AirSeasonId INNER JOIN
                      gradtours.AirSeasonDates ON gradtours.AirSeason.AirSeasonId = gradtours.AirSeasonDates.AirSeasonId INNER JOIN
                      gradtours.Rate ON gradtours.AirRates.RateId = gradtours.Rate.RateId INNER JOIN
                      gradtours.TransportCategory ON gradtours.AirRates.transportCategoryId = gradtours.TransportCategory.TransportCategoryId INNER JOIN
                      gradtours.Air2Vendor ON gradtours.AirSeason.AirId = gradtours.Air2Vendor.AirId AND gradtours.AirSeason.VendorId = gradtours.Air2Vendor.VendorId

|||Travelers
^^^CREATE VIEW [gradtours].[Travelers]
AS
SELECT     gradtours.traveler.travelerId, ISNULL(gradtours.Client.FirstName, '') + ' ' + ISNULL(gradtours.Client.LastName, '') AS travelername, gradtours.Client.Email, 
                      gradtours.Client.Male, gradtours.Client.Female, gradtours.traveler.passportNumber, gradtours.traveler.arrivalFlight, gradtours.traveler.departFlight, 
                      gradtours.Currency.CurrencyId, gradtours.Currency.Symbol AS CurrencySymbol, LTRIM(RTRIM(gradtours.Currency.HTML)) AS CurrencyHTML, 
                      gradtours.traveler.payment,
                          (SELECT     TOP (1) ARDue
                            FROM          gradtours.TripCommissionOwed
                            --WHERE      (TripCommissionTypeId = 1) AND ('KT:IT-' + CAST(TripId AS VARCHAR(20)) = t.SystemOfRecordId)
                            WHERE      (TripCommissionTypeId = 1) AND (RIGHT(t.SystemOfRecordId, LEN(t.SystemOfRecordId) - CHARINDEX('-', t.SystemOfRecordId)) = TripId)
                            ORDER BY ARDue DESC) AS FlightARDue, gradtours.Client.Age, gradtours.traveler.TripId, 
                      ISNULL(gradtours.Trip_TravelerRevenueSummary.QuotedPrice, 0) AS tripPrice, gradtours.Trip_TravelerRevenueSummary.AdjustedPrice_CurrencyId, 
                      ISNULL(CASE isnull(AdjustedPrice, 0) WHEN ISNULL(QuotedPrice, 0) THEN 0 ELSE AdjustedPrice - ISNULL(QuotedPrice, 0) END, 0) AS tripPriceAdjust, 
                      gradtours.Trip_TravelerRevenueSummary.AdjustedPrice_CurrencyId AS TripPrice_CurrencyId, 
                      gradtours.traveler.clientid, gradtours.Client.Phone, gradtours.Client.DateOfBirth, gradtours.traveler.passportCountry, 
                      CASE WHEN isdate(gradtours.traveler.passportexpiry) > 0 THEN CAST(gradtours.traveler.passportExpiry AS datetime) ELSE CAST('1900-01-01' AS DATETIME) 
                      END AS PassportExpiryDate
FROM         gradtours.Trip_TravelerRevenueSummary INNER JOIN
                      gradtours.Currency ON gradtours.Trip_TravelerRevenueSummary.AdjustedPrice_CurrencyId = gradtours.Currency.CurrencyId RIGHT OUTER JOIN
                      gradtours.Client INNER JOIN
                      gradtours.traveler ON gradtours.Client.ClientId = gradtours.traveler.clientid INNER JOIN
                      gradtours.GroupTraveler ON gradtours.traveler.travelerId = gradtours.GroupTraveler.travelerId ON 
                      gradtours.Trip_TravelerRevenueSummary.travelerId = gradtours.traveler.travelerId
                      INNER JOIN Trip t ON gradtours.Trip_TravelerRevenueSummary.TripId = t.TripId
WHERE     (gradtours.traveler.TripId IS NOT NULL)
GROUP BY gradtours.traveler.travelerId, ISNULL(gradtours.Client.FirstName, '') + ' ' + ISNULL(gradtours.Client.LastName, ''), gradtours.Client.Email, 
                      gradtours.traveler.passportNumber, gradtours.traveler.arrivalFlight, gradtours.traveler.departFlight, gradtours.Currency.CurrencyId, gradtours.Currency.Symbol, 
                      gradtours.traveler.payment, gradtours.Client.Age, gradtours.traveler.TripId, gradtours.Trip_TravelerRevenueSummary.AdjustedPrice_CurrencyId, 
                      gradtours.Client.Male, gradtours.Client.Female, LTRIM(RTRIM(gradtours.Currency.HTML)), ISNULL(gradtours.Trip_TravelerRevenueSummary.QuotedPrice, 0), 
                      ISNULL(CASE isnull(AdjustedPrice, 0) WHEN ISNULL(QuotedPrice, 0) THEN 0 ELSE AdjustedPrice - ISNULL(QuotedPrice, 0) END, 0), gradtours.traveler.clientid, 
                      gradtours.Client.Phone, gradtours.Client.DateOfBirth, gradtours.traveler.passportCountry, gradtours.traveler.passportExpiry
                      , t.SystemOfRecordId

|||Travelers_backup
^^^CREATE VIEW [gradtours].[Travelers_backup]
AS
SELECT     gradtours.traveler.travelerId, ISNULL(gradtours.Client.FirstName, '') + ' ' + ISNULL(gradtours.Client.LastName, '') AS travelername, gradtours.Client.Email, 
                      gradtours.Client.Male, gradtours.Client.Female, gradtours.traveler.passportNumber, gradtours.traveler.arrivalFlight, gradtours.traveler.departFlight, 
                      gradtours.Currency.CurrencyId, gradtours.Currency.Symbol AS CurrencySymbol, LTRIM(RTRIM(gradtours.Currency.HTML)) AS CurrencyHTML, 
                      gradtours.traveler.payment,
                          (SELECT     TOP (1) ARDue
                            FROM          gradtours.TripCommissionOwed
                            WHERE      (TripCommissionTypeId = 1) AND (TripId = gradtours.traveler.TripItineraryId)
                            ORDER BY ARDue DESC) AS FlightARDue, gradtours.Client.Age, gradtours.traveler.TripItineraryId, ISNULL(gradtours.GroupTraveler.QuotedPrice, 0) AS tripPrice, 
                      gradtours.GroupTraveler.adjustedPrice_currencyId, ISNULL(CASE isnull(gradtours.GroupTraveler.adjustedPrice, 0) 
                      WHEN gradtours.GroupTraveler.QuotedPrice THEN 0 ELSE gradtours.GroupTraveler.adjustedPrice - gradtours.GroupTraveler.QuotedPrice END, 0) AS tripPriceAdjust, 
                      gradtours.traveler.TripItineraryId AS tripId, gradtours.GroupTraveler.adjustedPrice_currencyId AS TripPrice_CurrencyId, gradtours.traveler.clientid, 
                      gradtours.Client.Phone, gradtours.Client.DateOfBirth, gradtours.traveler.passportCountry, CASE WHEN isdate(gradtours.traveler.passportexpiry) 
                      > 0 THEN CAST(gradtours.traveler.passportExpiry AS datetime) ELSE CAST('1900-01-01' AS DATETIME) END AS PassportExpiryDate
FROM         gradtours.Currency INNER JOIN
                      gradtours.Client INNER JOIN
                      gradtours.traveler ON gradtours.Client.ClientId = gradtours.traveler.clientid INNER JOIN
                      gradtours.GroupTraveler ON gradtours.traveler.travelerId = gradtours.GroupTraveler.travelerId ON 
                      gradtours.Currency.CurrencyId = gradtours.GroupTraveler.QuotedPrice_CurrencyId
WHERE     (gradtours.traveler.TripItineraryId IS NOT NULL)
GROUP BY gradtours.traveler.travelerId, ISNULL(gradtours.Client.FirstName, '') + ' ' + ISNULL(gradtours.Client.LastName, ''), gradtours.Client.Email, 
                      gradtours.traveler.passportNumber, gradtours.traveler.arrivalFlight, gradtours.traveler.departFlight, gradtours.Currency.CurrencyId, gradtours.Currency.Symbol, 
                      gradtours.traveler.payment, gradtours.Client.Age, gradtours.traveler.TripItineraryId, gradtours.GroupTraveler.adjustedPrice_currencyId, gradtours.Client.Male, 
                      gradtours.Client.Female, LTRIM(RTRIM(gradtours.Currency.HTML)), ISNULL(gradtours.GroupTraveler.QuotedPrice, 0), 
                      ISNULL(CASE isnull(gradtours.GroupTraveler.adjustedPrice, 0) 
                      WHEN gradtours.GroupTraveler.QuotedPrice THEN 0 ELSE gradtours.GroupTraveler.adjustedPrice - gradtours.GroupTraveler.QuotedPrice END, 0), 
                      gradtours.traveler.clientid, gradtours.Client.Phone, gradtours.Client.DateOfBirth, gradtours.traveler.passportCountry, gradtours.traveler.passportExpiry

|||Trip_GroupTraveler
^^^CREATE VIEW [gradtours].[Trip_GroupTraveler]
AS
SELECT        TOP (100) PERCENT gradtours.traveler.travelerId, gradtours.Client.FirstName, gradtours.Client.MiddleName, gradtours.Client.LastName, gradtours.Client.DateOfBirth, gradtours.Client.Age, gradtours.traveler.clientid, 
                         gradtours.traveler.arrivalFlight, gradtours.traveler.departFlight, gradtours.[Group].GroupId, gradtours.[Group].TripId, gradtours.traveler.VisasObtained, gradtours.traveler.Release, gradtours.traveler.Cancelled, 
                         gradtours.[Group].IsDefault, gradtours.[Group].ParentGroupId, gradtours.Client.Deleted | gradtours.traveler.deleted | gradtours.Traveler2Group.Deleted | gradtours.[Group].Deleted AS deleted, 
                         gradtours.Traveler2Group.TravelerOrder, gradtours.[Group].GroupOrder, gradtours.traveler.InCountryContactNo, gradtours.traveler.QuotedTravelerId, gradtours.traveler.ReleaseDate, gradtours.traveler.TRAMSPassengerNum, 
                         gradtours.traveler.SystemOfRecordId, gradtours.traveler.ArrivalFlightSORId, gradtours.traveler.DepartureFlightSORId, gradtours.traveler.diet, gradtours.traveler.mobility, gradtours.Client.HealthNotes AS health, 
                         gradtours.traveler.email
FROM            gradtours.[Group] INNER JOIN
                         gradtours.Traveler2Group ON gradtours.[Group].GroupId = gradtours.Traveler2Group.GroupId RIGHT OUTER JOIN
                         gradtours.traveler INNER JOIN
                         gradtours.Client ON gradtours.traveler.clientid = gradtours.Client.ClientId ON gradtours.Traveler2Group.TravelerId = gradtours.traveler.travelerId
WHERE        (gradtours.Client.Deleted | gradtours.traveler.deleted | gradtours.Traveler2Group.Deleted | gradtours.[Group].Deleted = 0)

|||Trip_QuotedCostByCOAAllocation
^^^CREATE VIEW [gradtours].[Trip_QuotedCostByCOAAllocation]
AS
	SELECT
		COALESCE(i.coaallocationid, v.coaallocationid, c2l.coaallocationid, 1) AS coaallocationid
		, CAST(SUM(ISNULL(i.QuotedCostUSD, 0)) AS MONEY) AS QuotedCostUSD
		, CAST(SUM(ISNULL(i.QuotedCost, 0)) AS MONEY) AS quotedCost
		, t.TripId
		, t.TripStartDate
		, t.datecancelled
		, v.vendorid
		, t.CompanyId
	FROM
		ProductItem i
		INNER JOIN vendors v ON i.vendorid = v.vendorid
		INNER JOIN Product p ON i.ProductId = p.ProductId
		INNER JOIN Trip t ON p.tripid = t.TripId
		LEFT OUTER JOIN coaallocation2locale c2l ON c2l.localeid = v.saleslocaleid
	WHERE
		i.IsCancelled IS NULL
		OR i.IsCancelled = 0
	GROUP BY
		t.TripId
		, COALESCE(i.coaallocationid, v.coaallocationid, c2l.coaallocationid, 1)
		, t.TripStartDate
		, t.datecancelled
		, v.vendorid
		, t.CompanyId

|||Trip_TravelerRevenueSummary
^^^CREATE VIEW [gradtours].[Trip_TravelerRevenueSummary]
AS
	SELECT
		t.travelerId
		, t.clientid
		, ISNULL(gradtours.TravelerInvoiceType.ParentInvoiceTypeId, 1) AS clientpaymenttypeid
		, MIN(ti.DueDate) AS DepositDueDate
		, MAX(ti.DueDate) AS DueDate
		, MAX(ti.InvoiceExpiration) AS InvoiceExpiration
		, ISNULL(SUM(ti.Amount), 0) AS adjustedPrice
		, ISNULL(ti.CurrencyId, t.tripprice_currencyId) AS adjustedPrice_CurrencyId
		, ISNULL(SUM(ti.AmountUSD), 0) AS adjustedPriceUSD
		, ISNULL((
			SELECT SUM(TravelerInvoices_1.Amount) AS Expr1
			FROM
				gradtours.TravelerInvoices AS TravelerInvoices_1
					INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_1 ON TravelerInvoices_1.InvoiceTypeId = travelerinvoicetype_1.InvoiceTypeId
			WHERE
				(ti.CurrencyId = TravelerInvoices_1.CurrencyId AND TravelerInvoices_1.BilledDate = MIN(ti.BilledDate))
				AND (TravelerInvoices_1.TravelerId = t.travelerId)
				AND (travelerinvoicetype_1.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0
			) AS quotedPrice
		, ISNULL(ti.CurrencyId, t.tripprice_currencyId) AS quotedPrice_CurrencyId
		, ISNULL((
			SELECT SUM(TravelerInvoices_1.AmountUSD) AS Expr1
			FROM
				gradtours.TravelerInvoices AS TravelerInvoices_1
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_1 ON TravelerInvoices_1.InvoiceTypeId = travelerinvoicetype_1.InvoiceTypeId
				WHERE
					(ti.CurrencyId = TravelerInvoices_1.CurrencyId AND TravelerInvoices_1.BilledDate = MIN(ti.BilledDate))
					AND (TravelerInvoices_1.TravelerId = t.travelerId)
					AND (travelerinvoicetype_1.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0
			) AS quotedPriceUSD
		, ISNULL ((
			SELECT SUM(gradtours.TravelerPaymentAllocation.SourceAmount) AS Expr1
			FROM
				gradtours.TravelerPaymentAllocation
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_2 ON gradtours.TravelerPaymentAllocation.InvoiceTypeid = travelerinvoicetype_2.InvoiceTypeId
			WHERE
				(ti.CurrencyId = TravelerPaymentAllocation.SourceCurrencyId AND gradtours.TravelerPaymentAllocation.ClientId = t.clientid)
				AND (gradtours.TravelerPaymentAllocation.TravelerId = t.travelerId)
				AND (travelerinvoicetype_2.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0
			) AS payment
		, ISNULL(ti.CurrencyId, t.tripprice_currencyId) AS payment_currencyid
		, ISNULL((
			SELECT SUM(TravelerPayments_1.AmountUSD) AS Expr1
			FROM
				gradtours.TravelerPaymentAllocation AS TravelerPayments_1
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_2 ON TravelerPayments_1.InvoiceTypeid = travelerinvoicetype_2.InvoiceTypeId
			WHERE
				(ti.CurrencyId = TravelerPayments_1.SourceCurrencyId AND TravelerPayments_1.ClientId = t.clientid)
				AND (TravelerPayments_1.TravelerId = t.travelerId)
				AND (travelerinvoicetype_2.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0
			) AS paymentUSD
		, ISNULL ((
			SELECT SUM(TravelerInvoices_3.Amount) AS Expr1
			FROM
				gradtours.TravelerInvoices AS TravelerInvoices_3
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_3 ON TravelerInvoices_3.InvoiceTypeId = travelerinvoicetype_3.InvoiceTypeId
			WHERE
				(TravelerInvoices_3.InvoiceTypeId = 3)
				AND (TravelerInvoices_3.TravelerId = t.travelerId)
				AND (travelerinvoicetype_3.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0
			) AS depositPrice
		, ISNULL ((
			SELECT SUM(TravelerPayments_4.SourceAmount) AS Expr1
			FROM
				gradtours.TravelerPaymentAllocation AS TravelerPayments_4
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_4 ON TravelerPayments_4.InvoiceTypeid = travelerinvoicetype_4.InvoiceTypeId
			WHERE
				(TravelerPayments_4.InvoiceTypeid = 3)
				AND (TravelerPayments_4.TravelerId = t.travelerId)
				AND (travelerinvoicetype_4.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0
			) AS depositPayment
		, t.tripId
	FROM
		traveler t
		LEFT OUTER JOIN gradtours.TravelerInvoices ti ON t.travelerId = ti.TravelerId
		LEFT OUTER JOIN gradtours.TravelerInvoiceType ON gradtours.TravelerInvoiceType.InvoiceTypeId = ti.InvoiceTypeId
	GROUP BY
		t.travelerId
		, t.clientid
		, ti.CurrencyId
		, gradtours.TravelerInvoiceType.ParentInvoiceTypeId
		, t.tripprice_currencyId
		, t.tripId

|||Trip_TravelerRevenueSummary_Alt
^^^-- =============================================                          
-- Author:  Sergey Kikot
-- Create date: 2018-12-19
-- Description: Alternative implementation of Trip_TravelerRevenueSummary
-- =============================================                          
CREATE VIEW [gradtours].[Trip_TravelerRevenueSummary_Alt]
AS
	SELECT sub.travelerId, sub.clientid, sub.clientpaymenttypeid, sub.DepositDueDate, sub.DueDate, sub.InvoiceExpiration, adjustedPrice, sub.adjustedPrice_CurrencyId
		, sub.adjustedPriceUSD, amounts.quotedPrice, sub.quotedPrice_CurrencyId, amounts.quotedPriceUSD, payments.payment, sub.payment_currencyid, payments.paymentUSD
		, deposits.depositPrice, depositPayments.depositPayment, sub.tripId
	FROM 
	( SELECT
		t.travelerId
		, t.clientid
		, ISNULL(gradtours.TravelerInvoiceType.ParentInvoiceTypeId, 1) AS clientpaymenttypeid
		, MIN(ti.DueDate) AS DepositDueDate
		, MAX(ti.DueDate) AS DueDate
		, MAX(ti.InvoiceExpiration) AS InvoiceExpiration
		, ISNULL(SUM(ti.Amount), 0) AS adjustedPrice
		, ISNULL(ti.CurrencyId, t.tripprice_currencyId) AS adjustedPrice_CurrencyId
		, ISNULL(ti.CurrencyId, t.tripprice_currencyId) AS quotedPrice_CurrencyId
		, ISNULL(ti.CurrencyId, t.tripprice_currencyId) AS payment_currencyid
		, ISNULL(SUM(ti.AmountUSD), 0) AS adjustedPriceUSD
		, t.tripId
		, MIN(ti.BilledDate) AS SubMinBilledDate
		, ti.CurrencyId AS SubCurrencyId
		, gradtours.TravelerInvoiceType.ParentInvoiceTypeId AS SubParentInvoiceTypeId
	FROM
		traveler t
		LEFT OUTER JOIN gradtours.TravelerInvoices ti ON t.travelerId = ti.TravelerId
		LEFT OUTER JOIN gradtours.TravelerInvoiceType ON gradtours.TravelerInvoiceType.InvoiceTypeId = ti.InvoiceTypeId
	GROUP BY
		t.travelerId
		, t.clientid
		, ti.CurrencyId
		, gradtours.TravelerInvoiceType.ParentInvoiceTypeId
		, t.tripprice_currencyId
		, t.tripId
	) sub
	CROSS APPLY (
		SELECT
			ISNULL(SUM(TravelerInvoices_1.Amount), 0) AS quotedPrice
			, ISNULL(SUM(TravelerInvoices_1.AmountUSD), 0) AS quotedPriceUSD
			FROM
				gradtours.TravelerInvoices AS TravelerInvoices_1
					INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_1 ON TravelerInvoices_1.InvoiceTypeId = travelerinvoicetype_1.InvoiceTypeId
			WHERE
				(TravelerInvoices_1.CurrencyId = sub.SubCurrencyId AND TravelerInvoices_1.BilledDate = sub.SubMinBilledDate)
				AND (TravelerInvoices_1.TravelerId = sub.travelerId)
				AND (travelerinvoicetype_1.ParentInvoiceTypeId = sub.SubParentInvoiceTypeId)
	) AS amounts
	CROSS APPLY (
		SELECT
			ISNULL(SUM(gradtours.TravelerPaymentAllocation.SourceAmount), 0) AS payment
			, ISNULL(SUM(gradtours.TravelerPaymentAllocation.AmountUSD), 0) AS paymentUSD
		FROM
			gradtours.TravelerPaymentAllocation
			INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_2 ON gradtours.TravelerPaymentAllocation.InvoiceTypeid = travelerinvoicetype_2.InvoiceTypeId
		WHERE
			(sub.SubCurrencyId = TravelerPaymentAllocation.SourceCurrencyId AND gradtours.TravelerPaymentAllocation.ClientId = sub.clientid)
			AND (gradtours.TravelerPaymentAllocation.TravelerId = sub.travelerId)
			AND (travelerinvoicetype_2.ParentInvoiceTypeId = sub.SubParentInvoiceTypeId)
	) AS payments
	CROSS APPLY (
		SELECT
			ISNULL(SUM(TravelerInvoices_3.Amount), 0) AS depositPrice
		FROM
			gradtours.TravelerInvoices AS TravelerInvoices_3
			INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_3 ON TravelerInvoices_3.InvoiceTypeId = travelerinvoicetype_3.InvoiceTypeId
		WHERE
			(TravelerInvoices_3.InvoiceTypeId = 3)
			AND (TravelerInvoices_3.TravelerId = sub.travelerId)
			AND (travelerinvoicetype_3.ParentInvoiceTypeId = sub.SubParentInvoiceTypeId)
	) AS deposits
	CROSS APPLY (
		SELECT ISNULL(SUM(TravelerPayments_4.SourceAmount), 0) AS depositPayment
		FROM
			gradtours.TravelerPaymentAllocation AS TravelerPayments_4
			INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_4 ON TravelerPayments_4.InvoiceTypeid = travelerinvoicetype_4.InvoiceTypeId
		WHERE
			(TravelerPayments_4.InvoiceTypeid = 3)
			AND (TravelerPayments_4.TravelerId = sub.travelerId)
			AND (travelerinvoicetype_4.ParentInvoiceTypeId = sub.SubParentInvoiceTypeId)
	) AS depositPayments

|||Trip_TravelerRevenueSummaryByProduct
^^^CREATE VIEW [gradtours].[Trip_TravelerRevenueSummaryByProduct] AS
	SELECT
		t.travelerId
		, t.clientid
		, t.tripId
		, ti.ProductId
		, ISNULL(gradtours.TravelerInvoiceType.ParentInvoiceTypeId, 1) AS clientpaymenttypeid
		, MIN(ti.DueDate) AS DepositDueDate
		, MAX(ti.DueDate) AS DueDate
		, MAX(ti.InvoiceExpiration) AS InvoiceExpiration
		, ISNULL(SUM(ti.Amount), 0) AS adjustedPrice
		, ISNULL(ti.CurrencyId, t.tripprice_currencyId) AS adjustedPrice_CurrencyId
		, ISNULL(SUM(ti.AmountUSD), 0) AS adjustedPriceUSD
		, ISNULL((
			SELECT SUM(TravelerInvoices_1.Amount) AS Expr1
			FROM
				gradtours.TravelerInvoices AS TravelerInvoices_1
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_1 ON TravelerInvoices_1.InvoiceTypeId = travelerinvoicetype_1.InvoiceTypeId
			WHERE
				(ti.CurrencyId = TravelerInvoices_1.CurrencyId AND TravelerInvoices_1.BilledDate = MIN(ti.BilledDate))
				AND (TravelerInvoices_1.TravelerId = t.travelerId)
				AND (ti.ProductId = TravelerInvoices_1.ProductId OR (ti.ProductId IS NULL AND TravelerInvoices_1.ProductId IS NULL))
				AND (travelerinvoicetype_1.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS quotedPrice
		, ISNULL(ti.CurrencyId, t.tripprice_currencyId) AS quotedPrice_CurrencyId
		, ISNULL((
			SELECT SUM(TravelerInvoices_1.AmountUSD) AS Expr1
			FROM
				gradtours.TravelerInvoices AS TravelerInvoices_1
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_1 ON TravelerInvoices_1.InvoiceTypeId = travelerinvoicetype_1.InvoiceTypeId
			WHERE
				(ti.CurrencyId = TravelerInvoices_1.CurrencyId AND TravelerInvoices_1.BilledDate = MIN(ti.BilledDate))
				AND (TravelerInvoices_1.TravelerId = t.travelerId)
				AND (ti.ProductId = TravelerInvoices_1.ProductId OR (ti.ProductId IS NULL AND TravelerInvoices_1.ProductId IS NULL))
				AND (travelerinvoicetype_1.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS quotedPriceUSD
		, ISNULL ((
			SELECT SUM(gradtours.TravelerPaymentAllocation.SourceAmount) AS Expr1
			FROM
				gradtours.TravelerPaymentAllocation
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_2 ON gradtours.TravelerPaymentAllocation.InvoiceTypeid = travelerinvoicetype_2.InvoiceTypeId
			WHERE
				(ti.CurrencyId = TravelerPaymentAllocation.SourceCurrencyId AND gradtours.TravelerPaymentAllocation.ClientId = t.clientid)
				AND (gradtours.TravelerPaymentAllocation.TravelerId = t.travelerId)
				AND (ti.ProductId = TravelerPaymentAllocation.ProductId OR (ti.ProductId IS NULL AND TravelerPaymentAllocation.ProductId IS NULL))
				AND (travelerinvoicetype_2.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS payment
		, ISNULL(ti.CurrencyId, t.tripprice_currencyId) AS payment_currencyid
		, ISNULL((
			SELECT SUM(TravelerPayments_1.AmountUSD) AS Expr1
			FROM
				gradtours.TravelerPaymentAllocation AS TravelerPayments_1
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_2 ON TravelerPayments_1.InvoiceTypeid = travelerinvoicetype_2.InvoiceTypeId
			WHERE
				(ti.CurrencyId = TravelerPayments_1.SourceCurrencyId AND TravelerPayments_1.ClientId = t.clientid)
				AND (TravelerPayments_1.TravelerId = t.travelerId)
				AND (ti.ProductId = TravelerPayments_1.ProductId OR (ti.ProductId IS NULL AND TravelerPayments_1.ProductId IS NULL))
				AND (travelerinvoicetype_2.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS paymentUSD
		, ISNULL((
			SELECT SUM(TravelerInvoices_3.Amount) AS Expr1
			FROM
				gradtours.TravelerInvoices AS TravelerInvoices_3
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_3 ON TravelerInvoices_3.InvoiceTypeId = travelerinvoicetype_3.InvoiceTypeId
			WHERE
				(TravelerInvoices_3.InvoiceTypeId = 3)
				AND (TravelerInvoices_3.TravelerId = t.travelerId)
				AND (ti.ProductId = TravelerInvoices_3.ProductId OR (ti.ProductId IS NULL AND TravelerInvoices_3.ProductId IS NULL))
				AND (travelerinvoicetype_3.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS depositPrice
		, ISNULL((
			SELECT SUM(TravelerPayments_4.SourceAmount) AS Expr1
			FROM
				gradtours.TravelerPaymentAllocation AS TravelerPayments_4
				INNER JOIN gradtours.TravelerInvoiceType AS travelerinvoicetype_4 ON TravelerPayments_4.InvoiceTypeid = travelerinvoicetype_4.InvoiceTypeId
			WHERE
				(TravelerPayments_4.InvoiceTypeid = 3)
				AND (TravelerPayments_4.TravelerId = t.travelerId)
				AND (ti.ProductId = TravelerPayments_4.ProductId OR (ti.ProductId IS NULL AND TravelerPayments_4.ProductId IS NULL))
				AND (travelerinvoicetype_4.ParentInvoiceTypeId = gradtours.TravelerInvoiceType.ParentInvoiceTypeId)), 0) AS depositPayment
	FROM
		gradtours.traveler t
		LEFT OUTER JOIN gradtours.TravelerInvoices ti ON t.travelerId = ti.TravelerId
		LEFT OUTER JOIN gradtours.TravelerInvoiceType ON gradtours.TravelerInvoiceType.InvoiceTypeId = ti.InvoiceTypeId
	GROUP BY
		t.travelerId
		, t.clientid
		, ti.CurrencyId
		, gradtours.TravelerInvoiceType.ParentInvoiceTypeId
		, t.tripprice_currencyId
		, ti.ProductId
		, t.tripId

|||Trip_VendorCostSummary
^^^CREATE VIEW [gradtours].[Trip_VendorCostSummary]
AS
SELECT        TOP (100) PERCENT t.TripId, t.TripStartDate, t.TripReference, v.vendorId, v.vendordisplayname, v.DefaultCurrencyId, v.VendorTypeId, v.LocaleId, ISNULL(v.ParentId, v.vendorId) AS ParentVendorId, SUM(ISNULL(i.ActualCost, 0)) 
                         AS ActualCost, ISNULL(i.Currency, v.DefaultCurrencyId) AS ActualCost_CurrencyId, SUM(ISNULL(i.QuotedCost, 0)) AS QuotedCost, ISNULL(acu.AmountUsd, 0) AS ActualCostUSD, SUM(ISNULL(i.QuotedCostUSD, 0)) 
                         AS QuotedCostUSD, p.ProductId
FROM            gradtours.ProductItem AS i INNER JOIN
                         gradtours.Product AS p ON i.ProductId = p.ProductId INNER JOIN
                         gradtours.vendors AS v ON i.VendorId = v.vendorId INNER JOIN
                         gradtours.Trip AS t ON p.TripId = t.TripId LEFT OUTER JOIN
                             (SELECT        p0.TripId, SUM(ISNULL(vpos.AmountUSD, 0)) AS AmountUsd
                               FROM            gradtours.VendorPurchaseOrders AS vpo INNER JOIN
                                                         gradtours.Product AS p0 ON vpo.ProductId = p0.ProductId INNER JOIN
                                                         gradtours.VendorPurchaseOrderServices AS vpos ON vpos.VendorPurchaseOrderId = vpo.VendorPurchaseOrderId
                               GROUP BY p0.TripId) AS acu ON t.TripId = acu.TripId
WHERE        (i.IsArchived = 0) AND (i.VendorId IN
                             (SELECT        vendorId
                               FROM            gradtours.Vendor
                               WHERE        (vendorId = 6574) OR
                                                         (ParentId = 6574))) OR
                         (i.IsCancelled = 0) AND (i.IsArchived = 0)
GROUP BY t.TripId, t.TripStartDate, t.TripReference, v.vendorId, v.vendordisplayname, v.DefaultCurrencyId, v.ParentId, v.VendorTypeId, v.LocaleId, ISNULL(i.Currency, v.DefaultCurrencyId), ISNULL(acu.AmountUsd, 0), p.ProductId

|||Trip_VendorCostSummary_Narrow
^^^CREATE VIEW [gradtours].[Trip_VendorCostSummary_Narrow]
AS
SELECT
	TOP (100) PERCENT t.TripId, v.VendorTypeId, SUM(ISNULL(i.QuotedCostUSD, 0)) AS QuotedCostUSD
FROM
	gradtours.Trip AS t
	INNER JOIN gradtours.Product AS p ON p.TripId = t.TripId
	INNER JOIN gradtours.ProductItem AS i ON i.ProductId = p.ProductId
	INNER JOIN gradtours.vendors AS v ON i.VendorId = v.vendorId
WHERE
	(i.IsArchived = 0)
--	AND (i.VendorId IN (SELECT vendorId FROM gradtours.Vendor WHERE (vendorId = 6574) OR (ParentId = 6574)))
	AND (v.VendorId = 6574 OR v.ParentId = 6574)
	OR (i.IsCancelled = 0)
	AND (i.IsArchived = 0)
GROUP BY
	t.TripId, v.VendorTypeId

|||Trip_VendorQuotedCosts
^^^CREATE VIEW [gradtours].[Trip_VendorQuotedCosts]
AS
	SELECT TOP (100) PERCENT
		items.ProductId, items.VendorId, SUM(i.QuotedCost) QuotedCost, SUM(i.QuotedCostUSD) QuotedCostUSD
	FROM
	(SELECT DISTINCT vpo.ProductId, vpo.VendorId, vpos.ProductItemId
	FROM
		VendorPurchaseOrders vpo WITH(NOLOCK)
		INNER JOIN VendorPurchaseOrderServices vpos WITH(NOLOCK) ON vpo.VendorPurchaseOrderId = vpos.VendorPurchaseOrderId
		INNER JOIN ProductItem i0 WITH(NOLOCK) ON vpos.ProductItemId = i0.ProductItemId
	WHERE
		i0.IsCancelled = 0
	) items
	INNER JOIN ProductItem i WITH(NOLOCK) ON items.ProductItemId = i.ProductItemId
	GROUP BY
		items.ProductId, items.VendorId

|||TripDetails
^^^CREATE VIEW [gradtours].[TripDetails]
AS
SELECT     gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryServiceId AS tripDetailsId, gradtours.ItineraryQuote.ItineraryId AS tripId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.VendorId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      CASE isnull(gradtours.ItineraryService_AllDetails_WithBookingInfo.CustomServiceName, '') 
                      WHEN '' THEN gradtours.ItineraryService_AllDetails_WithBookingInfo.globalServiceName ELSE gradtours.ItineraryService_AllDetails_WithBookingInfo.CustomServiceName
                       END AS details, CASE isnull(gradtours.ItineraryService_AllDetails_WithBookingInfo.CustomServiceName, '') 
                      WHEN '' THEN gradtours.ItineraryService_AllDetails_WithBookingInfo.globalServiceName ELSE gradtours.ItineraryService_AllDetails_WithBookingInfo.CustomServiceName
                       END AS reports, gradtours.ItineraryQuote.NumberOfPeople, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation, 
                      N'SGL') AS singles, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation, 
                      N'DBL') AS doubles, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation, 
                      N'TWN') AS twins, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation, 
                      N'TPL') AS triples, gradtours.ItineraryService_AllDetails_WithBookingInfo.DriverId, 
                      CASE gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId WHEN 1 THEN gradtours.ItineraryService_AllDetails_WithBookingInfo.ProviderServiceId ELSE NULL
                       END AS hotelroomcategoryid, NULL AS airRatesId, 
                      CASE gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId WHEN 2 THEN gradtours.ItineraryService_AllDetails_WithBookingInfo.GlobalServiceId ELSE NULL
                       END AS ground2vehicleid, NULL AS IsAlternate, NULL AS ParentTripDetailsId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ProviderServiceId, NULL 
                      AS AirAlternatesId, NULL AS AirClassId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryServiceId, 0 AS DisplayOrder, 
                      gradtours.bookingStatus.tripServiceBookingStatusId AS bookingstatusid, ISNULL(gradtours.ItineraryService_AllDetails_WithBookingInfo.Cost, 0) AS Cost, 
                      ISNULL(gradtours.ItineraryService_AllDetails_WithBookingInfo.ConvertedCost, 0) AS ConvertedCost, 
                      ISNULL(gradtours.ItineraryService_AllDetails_WithBookingInfo.Cost_CurrencyId, 1) AS Cost_CurrencyId, 
                      ISNULL(gradtours.ItineraryService_AllDetails_WithBookingInfo.ConvertedCost_CurrencyId, 1) AS ConvertedCost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.actualCost AS NewCost, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.actualCost_currencyId AS NewCost_CurrencyId, 1 AS UseNewCost, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryService2BookingId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ClientNotes AS notes, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.actualConvertedCost AS ConvertedNewCost, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.actualConvertedCost_CurrencyId AS ConvertedNewCost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.Day, gradtours.ItineraryService_AllDetails_WithBookingInfo.Day AS DayNumber, 
                      gradtours.ItineraryQuote.NumberOfPeople AS numberPeople
FROM         gradtours.ItineraryService_AllDetails_WithBookingInfo INNER JOIN
                      gradtours.bookingStatus ON gradtours.ItineraryService_AllDetails_WithBookingInfo.BookingStatusId = gradtours.bookingStatus.bookingStatusId INNER JOIN
                      gradtours.ItineraryQuote ON gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryId = gradtours.ItineraryQuote.ItineraryId
WHERE     (gradtours.bookingStatus.IncludedWhenCalculatingCost = 1)

|||TripDetails_AllDetails_Ground_OBSOLETE_SEE_DEAN
^^^CREATE VIEW [gradtours].[TripDetails_AllDetails_Ground_OBSOLETE_SEE_DEAN]
AS
SELECT     TripDetails_AllDetails_1.tripDetailsId, TripDetails_AllDetails_1.tripId, TripDetails_AllDetails_1.bookingStatusId, TripDetails_AllDetails_1.vendorId, 
                      TripDetails_AllDetails_1.serviceId, TripDetails_AllDetails_1.dayNumber, TripDetails_AllDetails_1.details, TripDetails_AllDetails_1.reports, 
                      TripDetails_AllDetails_1.cost, TripDetails_AllDetails_1.newCost, TripDetails_AllDetails_1.numberPeople, TripDetails_AllDetails_1.singles, 
                      TripDetails_AllDetails_1.doubles, TripDetails_AllDetails_1.triples, TripDetails_AllDetails_1.notes, TripDetails_AllDetails_1.twins, 
                      TripDetails_AllDetails_1.UseNewCost, TripDetails_AllDetails_1.DriverId, TripDetails_AllDetails_1.hotelRoomCategoryId, TripDetails_AllDetails_1.airRatesId, 
                      TripDetails_AllDetails_1.ground2vehicleId, TripDetails_AllDetails_1.ParentTripDetailsId, TripDetails_AllDetails_1.isAlternate, TripDetails_AllDetails_1.cost_currencyId,
                       TripDetails_AllDetails_1.newCost_currencyId, TripDetails_AllDetails_1.AirAlternatesId, TripDetails_AllDetails_1.AirClassId, 
                      TripDetails_AllDetails_1.providerServiceId, TripDetails_AllDetails_1.ConvertedCost, TripDetails_AllDetails_1.ConvertedCost_CurrencyId, 
                      TripDetails_AllDetails_1.serviceDate, TripDetails_AllDetails_1.ground2vehicleId AS GlobalServiceId, 
                      CASE gradtours.GlobalGroundVehicle.VehicleName WHEN 'No Vehicle' THEN gradtours.GlobalGround.GroundName ELSE gradtours.GlobalGround.GroundName + ' (' + gradtours.GlobalGroundVehicle.VehicleName
                       + '(' + CONVERT(varchar(5), gradtours.GlobalGroundVehicle.Capacity) + '))' END AS GlobalServiceName, TripDetails_AllDetails_1.ProviderId, 
                      TripDetails_AllDetails_1.vendordisplayname
FROM         gradtours.GlobalGround INNER JOIN
                      gradtours.GlobalGroundVehicle ON gradtours.GlobalGround.gGroundId = gradtours.GlobalGroundVehicle.gGroundId RIGHT OUTER JOIN
                      gradtours.TripDetails_AllDetails AS TripDetails_AllDetails_1 ON gradtours.GlobalGroundVehicle.gGroundVehicleId = TripDetails_AllDetails_1.ground2vehicleId
WHERE     (TripDetails_AllDetails_1.serviceId = 2)

|||TripDetails_AllDetails_Hotels_OBSOLETE_SEE_DEAN
^^^CREATE VIEW [gradtours].[TripDetails_AllDetails_Hotels_OBSOLETE_SEE_DEAN]
AS
SELECT     gradtours.TripDetails_AllDetails.tripDetailsId, gradtours.TripDetails_AllDetails.tripId, gradtours.TripDetails_AllDetails.bookingStatusId, 
                      gradtours.TripDetails_AllDetails.vendorId, gradtours.TripDetails_AllDetails.serviceId, gradtours.TripDetails_AllDetails.dayNumber, 
                      gradtours.TripDetails_AllDetails.details, gradtours.TripDetails_AllDetails.reports, gradtours.TripDetails_AllDetails.cost, gradtours.TripDetails_AllDetails.newCost, 
                      gradtours.TripDetails_AllDetails.numberPeople, gradtours.TripDetails_AllDetails.singles, gradtours.TripDetails_AllDetails.doubles, 
                      gradtours.TripDetails_AllDetails.triples, gradtours.TripDetails_AllDetails.notes, gradtours.TripDetails_AllDetails.twins, gradtours.TripDetails_AllDetails.UseNewCost, 
                      gradtours.TripDetails_AllDetails.DriverId, gradtours.TripDetails_AllDetails.hotelRoomCategoryId, gradtours.TripDetails_AllDetails.airRatesId, 
                      gradtours.TripDetails_AllDetails.ground2vehicleId, gradtours.TripDetails_AllDetails.ParentTripDetailsId, gradtours.TripDetails_AllDetails.isAlternate, 
                      gradtours.TripDetails_AllDetails.cost_currencyId, gradtours.TripDetails_AllDetails.newCost_currencyId, gradtours.TripDetails_AllDetails.AirAlternatesId, 
                      gradtours.TripDetails_AllDetails.AirClassId, gradtours.TripDetails_AllDetails.providerServiceId, gradtours.TripDetails_AllDetails.ConvertedCost, 
                      gradtours.TripDetails_AllDetails.ConvertedCost_CurrencyId, gradtours.TripDetails_AllDetails.serviceDate, 
                      gradtours.HotelRoomCategory.gHotelRoomId AS GlobalServiceId, 
                      gradtours.GlobalHotel.Name + ' (' + gradtours.GlobalHotelRoom.RoomName + ')' AS GlobalServiceName, gradtours.TripDetails_AllDetails.ProviderId, 
                      gradtours.TripDetails_AllDetails.vendordisplayname
FROM         gradtours.GlobalHotelRoom INNER JOIN
                      gradtours.GlobalHotel ON gradtours.GlobalHotelRoom.gHotelId = gradtours.GlobalHotel.gHotelId INNER JOIN
                      gradtours.TripDetails_AllDetails INNER JOIN
                      gradtours.HotelRoomCategory ON gradtours.TripDetails_AllDetails.hotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId ON 
                      gradtours.GlobalHotelRoom.gHotelRoomId = gradtours.HotelRoomCategory.gHotelRoomId

|||TripDetails_AllDetails_OBSOLETE_SEE_DEAN
^^^CREATE VIEW [gradtours].[TripDetails_AllDetails_OBSOLETE_SEE_DEAN]
AS
SELECT     gradtours.tripDetails.tripDetailsId, gradtours.tripDetails.tripId, gradtours.tripDetails.bookingStatusId, gradtours.tripDetails.vendorId, gradtours.tripDetails.serviceId, 
                      gradtours.tripDetails.dayNumber, gradtours.tripDetails.details, gradtours.tripDetails.reports, gradtours.tripDetails.cost, gradtours.tripDetails.newCost, 
                      gradtours.tripDetails.numberPeople, gradtours.tripDetails.singles, gradtours.tripDetails.doubles, gradtours.tripDetails.triples, gradtours.tripDetails.notes, 
                      gradtours.tripDetails.twins, gradtours.tripDetails.UseNewCost, gradtours.tripDetails.DriverId, gradtours.tripDetails.hotelRoomCategoryId, 
                      gradtours.tripDetails.airRatesId, gradtours.tripDetails.ground2vehicleId, CASE WHEN gradtours.tripDetails.ParentTripDetailsId IS NULL 
                      THEN tripDetails.tripDetailsId ELSE gradtours.tripDetails.ParentTripDetailsId END AS ParentTripDetailsId, gradtours.tripDetails.isAlternate, 
                      gradtours.tripDetails.cost_currencyId, gradtours.tripDetails.newCost_currencyId, gradtours.tripDetails.AirAlternatesId, gradtours.tripDetails.AirClassId, 
                      gradtours.tripDetails.providerServiceId, gradtours.tripDetails.ConvertedCost, gradtours.tripDetails.ConvertedCost_CurrencyId, DATEADD(dd, 
                      gradtours.tripDetails.dayNumber - 1, gradtours.trips.startDate) AS serviceDate, gradtours.vendors.vendordisplayname, gradtours.vendors.ProviderId
FROM         gradtours.tripDetails INNER JOIN
                      gradtours.trips ON gradtours.tripDetails.tripId = gradtours.trips.tripId INNER JOIN
                      gradtours.vendors ON gradtours.tripDetails.vendorId = gradtours.vendors.vendorId

|||TripDetails_Beta_OBSOLETE_SEE_DEAN
^^^CREATE VIEW [gradtours].[TripDetails_Beta_OBSOLETE_SEE_DEAN]
AS
SELECT     gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryServiceId AS tripDetailsId, gradtours.ItineraryQuote.ItineraryId AS tripId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.VendorId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      CASE isnull(gradtours.ItineraryService_AllDetails_WithBookingInfo.CustomServiceName, '') 
                      WHEN '' THEN gradtours.ItineraryService_AllDetails_WithBookingInfo.globalServiceName ELSE gradtours.ItineraryService_AllDetails_WithBookingInfo.CustomServiceName
                       END AS details, CASE isnull(gradtours.ItineraryService_AllDetails_WithBookingInfo.CustomServiceName, '') 
                      WHEN '' THEN gradtours.ItineraryService_AllDetails_WithBookingInfo.globalServiceName ELSE gradtours.ItineraryService_AllDetails_WithBookingInfo.CustomServiceName
                       END AS reports, gradtours.ItineraryQuote.NumberOfPeople, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation, 
                      N'SGL') AS singles, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation, 
                      N'DBL') AS doubles, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation, 
                      N'TWN') AS twins, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation, 
                      N'TPL') AS triples, gradtours.ItineraryService_AllDetails_WithBookingInfo.DriverId, 
                      CASE gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId WHEN 1 THEN gradtours.ItineraryService_AllDetails_WithBookingInfo.ProviderServiceId ELSE NULL
                       END AS hotelroomcategoryid, NULL AS airRatesId, 
                      CASE gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId WHEN 2 THEN gradtours.ItineraryService_AllDetails_WithBookingInfo.GlobalServiceId ELSE NULL
                       END AS ground2vehicleid, NULL AS IsAlternate, NULL AS ParentTripDetailsId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ProviderServiceId, NULL 
                      AS AirAlternatesId, NULL AS AirClassId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryServiceId, 0 AS DisplayOrder, 
                      gradtours.bookingStatus.tripServiceBookingStatusId AS bookingstatusid, ISNULL(gradtours.ItineraryService_AllDetails_WithBookingInfo.Cost, 0) AS Cost, 
                      ISNULL(gradtours.ItineraryService_AllDetails_WithBookingInfo.ConvertedCost, 0) AS ConvertedCost, 
                      ISNULL(gradtours.ItineraryService_AllDetails_WithBookingInfo.Cost_CurrencyId, 1) AS Cost_CurrencyId, 
                      ISNULL(gradtours.ItineraryService_AllDetails_WithBookingInfo.ConvertedCost_CurrencyId, 1) AS ConvertedCost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.actualCost AS NewCost, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.actualCost_currencyId AS NewCost_CurrencyId, 1 AS UseNewCost, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryService2BookingId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ClientNotes AS notes, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.actualConvertedCost AS ConvertedNewCost, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.actualConvertedCost_CurrencyId AS ConvertedNewCost_CurrencyId, 
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.Day, gradtours.ItineraryService_AllDetails_WithBookingInfo.Day AS DayNumber, 
                      gradtours.ItineraryQuote.NumberOfPeople AS numberPeople
FROM gradtours.ItineraryService_AllDetails_WithBookingInfo 
INNER JOIN gradtours.bookingStatus 
ON gradtours.ItineraryService_AllDetails_WithBookingInfo.BookingStatusId = gradtours.bookingStatus.bookingStatusId 
INNER JOIN gradtours.ItineraryQuote 
ON gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryId = gradtours.ItineraryQuote.ItineraryId

|||TripDetailsWithGlobalIds_OBSOLETE_SEE_DEAN
^^^CREATE VIEW [gradtours].[TripDetailsWithGlobalIds_OBSOLETE_SEE_DEAN]
AS
SELECT     tripDetailsId, tripId, bookingStatusId, vendorId, serviceId, dayNumber, details, reports, cost, newCost, numberPeople, singles, doubles, triples, notes, twins, 
                      UseNewCost, DriverId, hotelRoomCategoryId, airRatesId, ground2vehicleId, ParentTripDetailsId, isAlternate, cost_currencyId, newCost_currencyId, AirAlternatesId, 
                      AirClassId, providerServiceId, ConvertedCost, ConvertedCost_CurrencyId, serviceDate, GlobalServiceId, GlobalServiceName, ProviderId, vendordisplayname
FROM         gradtours.TripDetails_AllDetails_Ground
UNION
SELECT     tripDetailsId, tripId, bookingStatusId, vendorId, serviceId, dayNumber, details, reports, cost, newCost, numberPeople, singles, doubles, triples, notes, twins, 
                      UseNewCost, DriverId, hotelRoomCategoryId, airRatesId, ground2vehicleId, ParentTripDetailsId, isAlternate, cost_currencyId, newCost_currencyId, AirAlternatesId, 
                      AirClassId, providerServiceId, ConvertedCost, ConvertedCost_CurrencyId, serviceDate, GlobalServiceId, GlobalServiceName, ProviderId, vendordisplayname
FROM         gradtours.TripDetails_AllDetails_Hotels

|||TripItineraryLocales
^^^CREATE VIEW   [gradtours].[TripItineraryLocales]
AS
SELECT gradtours.Itinerary.ItineraryId, gradtours.ItineraryService.SourceLocaleId AS LocaleId, 
bookeddate, count_big(*) as countbig  
FROM         gradtours.Itinerary INNER JOIN  
                      gradtours.ItineraryTrip ON gradtours.Itinerary.ItineraryID = gradtours.ItineraryTrip.ItineraryID INNER JOIN  
                      gradtours.ItineraryDay ON gradtours.ItineraryDay.ItineraryId = gradtours.Itinerary.ItineraryId INNER JOIN  
                      gradtours.ItineraryService ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId  
WHERE  (ISNULL(gradtours.ItineraryDay.Deleted, 0) = 0) AND (gradtours.ItineraryService.Deleted = 0)  
AND Cancelled = 0
  
GROUP BY gradtours.Itinerary.ItineraryId, gradtours.ItineraryService.SourceLocaleId, bookeddate

|||Trips
^^^CREATE VIEW [gradtours].[Trips]
AS
SELECT     gradtours.Itinerary.ItineraryId AS tripId, gradtours.ItineraryQuote.ItineraryRef AS tripRef, gradtours.ItineraryQuote.GroupName, 
                      gradtours.ItineraryTrip.BookedDate AS BookDate, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryQuote.ItineraryStartDate AS StartDate, 
                      gradtours.Itinerary.NumberOfDays AS tripDays, CAST(gradtours.ItineraryQuote.NumberOfPeople AS int) AS groupSize, '' AS referralSource, '' AS clientNotes, 
                      '' AS vendorNotes, gradtours.ItineraryTrip.Cancelled AS cancelledtrip, 0 AS publictrip, 0 AS urgenttrip, gradtours.Itinerary.Name AS tripName, 0 AS kids0to12, 
                      0 AS kids13to17, 'Y' AS TCAgree, NULL AS coordinatorid, gradtours.ItineraryQuote.QuoteAgentId, NULL AS PreTripCall, NULL AS PostTripCall, 
                      gradtours.ItineraryQuote.TourAgentId, NULL AS TourAgentCommissionPct, NULL AS TourAgentCommissionSurcharge, 
                      gradtours.ItineraryTrip.DateCreated AS DateUploaded, NULL AS AgentCommissionPercent, gradtours.ItineraryQuote.QuotedGroupAllocation AS RoomAllocations, 
                      0 AS FivePctDiscount, gradtours.Itinerary.ItineraryId, gradtours.Itinerary.Includes, gradtours.Itinerary.Excludes, gradtours.Itinerary.Options, gradtours.Itinerary.Terms, 
                      gradtours.ItineraryTrip.PaymentNotes, gradtours.Itinerary.OldTripId
FROM         gradtours.Itinerary INNER JOIN
                      gradtours.ItineraryQuote ON gradtours.Itinerary.ItineraryId = gradtours.ItineraryQuote.ItineraryId INNER JOIN
                      gradtours.ItineraryTrip ON gradtours.ItineraryQuote.ItineraryId = gradtours.ItineraryTrip.ItineraryId INNER JOIN
                      gradtours.Booking ON gradtours.Itinerary.ItineraryId = gradtours.Booking.itineraryid
WHERE     (gradtours.Itinerary.Deleted IS NULL OR
                      gradtours.Itinerary.Deleted <> 1) AND (gradtours.ItineraryQuote.Deleted IS NULL OR
                      gradtours.ItineraryQuote.Deleted <> 1) AND (gradtours.Itinerary.ItineraryCategoryId = 8) AND (gradtours.Itinerary.ItineraryId IS NOT NULL)

|||v_GetCurrencyRates
^^^CREATE VIEW [gradtours].[v_GetCurrencyRates]
AS SELECT * FROM gradtours.fn_GetCurrencyRates()

|||v_RPT_FinanceViewTravelerInvoice
^^^CREATE VIEW [gradtours].[v_RPT_FinanceViewTravelerInvoice]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid as TripCoaAllocationId,
		p.coaallocationid as ProductCoaAllocationId,
		i.CurrencyId,
		SUM(i.Amount) as Amount,
		SUM(i.AmountUSD) as AmountUSD,
		i.DueDate,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip (NOLOCK) 
						inner join Client (NOLOCK) on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip (NOLOCK) 
						inner join Client (NOLOCK) on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel
	FROM
		TripLedger tl (NOLOCK) --* (-H-)
		inner join TravelerInvoices i (NOLOCK) on i.TripLedgerId = tl.TripLedgerId --* (D2)
		inner join Traveler tt (NOLOCK) on tt.travelerId = i.TravelerId --* (D1)
		inner join Product p (NOLOCK) on p.ProductId = tl.ProductId --* (H2)
		inner join Trip t (NOLOCK) on t.TripId = p.TripId --* (H1)
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid,
		p.coaallocationid,
		i.CurrencyId,
		i.DueDate

|||v_RPT_FinanceViewVendorCost
^^^CREATE VIEW [gradtours].[v_RPT_FinanceViewVendorCost]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name as ProductItemName,
		i.ServiceId,
		
		v.VendorId,
		v.ParentId as ParentVendorId,
		v.VendorName as VendorName,
		v.VendorTypeId,
		t.salescoaallocationid as TripCoaAllocationId,
		i.coaallocationid as ProductItemCoaAllocationId,
		v.coaallocationid as VendorCoaAllocationId,
		vpos.CurrencyId,
		SUM(vpos.Amount) as Amount,
		SUM(vpos.AmountUSD) as AmountUSD,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip (NOLOCK)
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip (NOLOCK)
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel
	FROM
		TripLedger tl (NOLOCK)
		inner join VendorPurchaseOrders vpo (NOLOCK) on vpo.TripLedgerId = tl.TripLedgerId
		inner join VendorPurchaseOrderServices vpos (NOLOCK) on vpos.VendorPurchaseOrderId = vpo.VendorPurchaseOrderId
		inner join ProductItem i (NOLOCK) on i.ProductItemId = vpos.ProductItemId
		inner join Product p (NOLOCK) on p.ProductId = i.ProductId
		inner join Trip t (NOLOCK) on t.TripId = p.TripId
		inner join Vendors v (NOLOCK) on v.VendorId = vpo.VendorId
		
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name,
		i.ServiceId,
		v.VendorId,
		v.ParentId,
		v.VendorName,
		v.VendorTypeId,
		t.salescoaallocationid,
		i.coaallocationid, 
		v.coaallocationid, 
		vpos.CurrencyId

|||Vendor
^^^create view [gradtours].[Vendor]
as
  select * from Vendors

|||VendorPaymentGrouping
^^^CREATE view [gradtours].[VendorPaymentGrouping] as
        select paymentdate, currencyid, coaid, reference, memo,registertransactionid
        ,sum(amount) as amount
        ,sum(amountusd) as amountusd
         ,(select Amount from Register where Register.RegisterTransactionId = VendorPaymentAllocation.RegisterTransactionId and COAID = 58) as feeAmount      
 ,(select SourceAmount from Register where Register.RegisterTransactionId = VendorPaymentAllocation.RegisterTransactionId and COAID = 58) as feeSourceAmount      
 ,(select AmountUSD from Register where Register.RegisterTransactionId = VendorPaymentAllocation.RegisterTransactionId and COAID = 58) as feeAmountUSD  
         from VendorPaymentAllocation
        group by paymentdate, currencyid, coaid, reference, memo, registertransactionid, currencyid

|||VendorPaymentGroupingReports
^^^CREATE view [gradtours].[VendorPaymentGroupingReports] as  
        select vpa.paymentdate, vpa.currencyid, vpa.coaid, COALESCE(vpa.reference, bp.reference) Reference, COALESCE(vpa.memo, bp.memo) Memo, vpa.registertransactionid  
        ,sum(vpa.amount) as amount  
        ,sum(vpa.amountusd) as amountusd  
         ,(select Amount from Register where Register.RegisterTransactionId = vpa.RegisterTransactionId and COAID = 58) as feeAmount        
 ,(select SourceAmount from Register where Register.RegisterTransactionId = vpa.RegisterTransactionId and COAID = 58) as feeSourceAmount        
 ,(select AmountUSD from Register where Register.RegisterTransactionId = vpa.RegisterTransactionId and COAID = 58) as feeAmountUSD  ,vendorexpenseid,p.vendorid, pr.ProductId, pr.TripId
			, rpt.Description AS PaymentMethod, vpa.DateCreated
         from VendorPaymentAllocation vpa
 inner join vendors v on v.vendorid = vpa.vendorid    
 inner join vendors p on p.vendorid = isnull(v.parentid, v.vendorid) 
 left JOIN Product pr ON vpa.ProductId = pr.ProductId
 LEFT JOIN BankPayment bp ON vpa.BankPaymentId = bp.BankPaymentId
 LEFT JOIN RecordedPaymentType rpt ON bp.recordedpaymenttypeid = rpt.RecordedPaymentTypeId
 GROUP BY  p.vendorid, vpa.paymentdate, vpa.currencyid, vpa.coaid, COALESCE(vpa.reference, bp.reference), COALESCE(vpa.memo, bp.memo), vpa.registertransactionid, vpa.currencyid  ,vendorexpenseid, pr.ProductId, pr.TripId, rpt.Description, vpa.DateCreated

|||VendorServiceMarkupSummary
^^^-- =============================================
-- Author:		Tom Song
-- Create date: 2019-04-23
-- Description:	the Vendor Markup Summary TMT view
-- Add MarketAdjustment, ReviewDate and Reason columns
-- =============================================
CREATE VIEW [gradtours].[VendorServiceMarkupSummary]
as
 select vm.VendorId, v.VendorName, 
	CASE WHEN h.HotelId is not null then
			h.LocaleId --Hotel Dashboard Description
		WHEN g.GroundId is not null then
			g.LocaleId --Ground Dashboard Description
		WHEN a.AirId is not null then
			destLocale.LocaleId
		ELSE
			l.LocaleId END AS LocaleId,
	 l.Name as LocaleName,vmt.Name as ServiceTypeName, vm.VendorMarkupId, vm.Markup, vm.MarketAdjustment, vm.ReviewDate, vm.Reason, lt.LocaleTypeName, vm.ServiceManagementId,
				CASE WHEN h.HotelId is not null then
						h.Name --Hotel Dashboard Description
					WHEN g.GroundId is not null then
						g.Name --Ground Dashboard Description
					WHEN a.AirId is not null then
						'Flight from ' + sourceLocale.Name + ' to ' + destLocale.Name + ' - ' + a.Name --Air Dashboard Description
					ELSE
						l.Name
					END as LocaleServiceName_Display,
				--
				TableDisplayOrder = case when vm.ServiceManagementId is not NULL then (99 + vm.VendorMarkupTypeId) ELSE lt.DisplayOrder END,
				--
				CASE WHEN h.HotelId is not null then
						h.Name + '-' + cast(h.HotelId as varchar(15))
					WHEN g.GroundId is not null then
						g.Name + '-' + cast(g.GroundId as varchar(15))
					WHEN a.AirId is not null then
						'Flight from ' + sourceLocale.Name + ' to ' + destLocale.Name + ' - ' + a.Name + '-' + cast(a.AirId as varchar(15))
					ELSE
						l.Name + '-' + cast(l.LocaleId as varchar(15))
					END as LocaleServiceName_UniqueKey
    from VendorMarkup vm (NOLOCK)
       left outer join VendorMarkupType vmt (NOLOCK) on vmt.VendorMarkupTypeId = vm.VendorMarkupTypeId
       left outer join Vendors v     (NOLOCK) on vm.VendorId = v.VendorId
       left outer join Locale l      (NOLOCK) on l.LocaleId = vm.LocaleId
       left outer join LocaleType lt (NOLOCK) on lt.LocaleTypeId = l.LocaleTypeId
       left outer join Air a         (NOLOCK) on a.AirId    = vm.ServiceManagementId and (vm.VendorMarkupTypeId = 4 or vm.VendorMarkupTypeId = 5)
       left outer join Ground g      (NOLOCK) on g.GroundId = vm.ServiceManagementId and vm.VendorMarkupTypeId = 3
       left outer join Hotel h       (NOLOCK) on h.HotelId  = vm.ServiceManagementId and (vm.VendorMarkupTypeId = 1 or vm.VendorMarkupTypeId = 2)
       left outer join Locale sourceLocale (NOLOCK) on sourceLocale.LocaleId = a.SourceLocaleId
       left outer join Locale destLocale   (NOLOCK) on destLocale.LocaleId   = a.DestinationLocaleId
   where  DateDeleted is null
    --and vm.VendorId = 142
       --Order by    TableDisplayOrder, LocaleServiceName_Display, ServiceTypeName

|||vw_ResultSetChanges_Itinerary_v2
^^^CREATE   VIEW [gradtours].[vw_ResultSetChanges_Itinerary_v2]
AS
-- =============================================    
-- Author:  Trinadh Pothala    
-- Create date: Fed 18 2025    
-- Description: View to track changes in itinerary  
SELECT 
    curr.snapshot_id,
    curr.snapshot_date,
    curr.row_count,
    prev.row_count as previous_row_count,
    curr.execution_time_ms,
    curr.has_changes,
    JSON_VALUE(curr.change_details, '$.new_count') as new_records,
    JSON_VALUE(curr.change_details, '$.deleted_count') as deleted_records,
    JSON_VALUE(curr.change_details, '$.updated_count') as updated_records,
    JSON_QUERY(curr.change_details, '$.updated_details') as field_changes,
    curr.new_record_ids,
    curr.deleted_record_ids,
    CASE 
        WHEN curr.has_changes = 0 THEN 'No Change'
        WHEN curr.row_count > ISNULL(prev.row_count, 0) AND ISNULL(JSON_VALUE(curr.change_details, '$.deleted_count'), 0) = 0 THEN 'Records Added Only'
        WHEN curr.row_count < ISNULL(prev.row_count, 0) AND ISNULL(JSON_VALUE(curr.change_details, '$.new_count'), 0) = 0 THEN 'Records Deleted Only'
        WHEN ISNULL(JSON_VALUE(curr.change_details, '$.updated_count'), 0) > 0 
             AND ISNULL(JSON_VALUE(curr.change_details, '$.new_count'), 0) = 0 
             AND ISNULL(JSON_VALUE(curr.change_details, '$.deleted_count'), 0) = 0 THEN 'Records Modified Only'
        ELSE 'Multiple Changes'
    END as change_type
FROM gradtours.ResultSetChanges_Itinerary_v2 curr
LEFT JOIN gradtours.ResultSetChanges_Itinerary_v2 prev 
    ON prev.snapshot_id = (
        SELECT MAX(snapshot_id) 
        FROM gradtours.ResultSetChanges_Itinerary_v2 
        WHERE snapshot_id < curr.snapshot_id
    );

|||vw_Rpt_FinanceViewRevenueAllocation
^^^CREATE VIEW [gradtours].[vw_Rpt_FinanceViewRevenueAllocation]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		i.ProductItemId,
		i.ProductItemType,
		i.Name as ProductItemName,
		i.ServiceId,
		v.VendorId,
		v.ParentId as ParentVendorId,
		v.VendorName as VendorName,
		v.VendorTypeId,
		t.salescoaallocationid as TripCoaAllocationId,
		r.coaallocationid as RevCoaAllocationId,
		i.coaallocationid as ProductItemCoaAllocationId,
		v.coaallocationid as VendorCoaAllocationId,
		r.CurrencyId,
		SUM(r.Amount) as Amount,
		SUM(r.AmountUSD) as AmountUSD
	FROM
		TripLedger tl (NOLOCK)
		inner join ItineraryServiceRevenueAllocation r (NOLOCK) on r.TripLedgerId = tl.TripLedgerId
		inner join Product p (NOLOCK) on p.ProductId = tl.ProductId
		inner join Trip t (NOLOCK) on t.TripId = p.TripId
		left join ProductItem i (NOLOCK) on i.ProductItemId = r.ProductItemId
		left join Vendors v (NOLOCK) on v.VendorId = i.VendorId
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		i.ProductItemId,
		i.ProductItemType,
		i.Name,
		i.ServiceId,
		v.VendorId,
		v.ParentId,
		v.VendorName,
		v.VendorTypeId,
		t.salescoaallocationid,
		i.coaallocationid, 
		v.coaallocationid, 
		r.coaallocationid,
		r.CurrencyId

|||vw_Rpt_FinanceViewTravelerInvoice
^^^CREATE VIEW [gradtours].[vw_Rpt_FinanceViewTravelerInvoice]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid as TripCoaAllocationId,
		p.coaallocationid as ProductCoaAllocationId,
		i.CurrencyId,
		SUM(i.Amount) as Amount,
		SUM(i.AmountUSD) as AmountUSD,
		i.DueDate,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip (NOLOCK) 
						inner join Client (NOLOCK) on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip (NOLOCK) 
						inner join Client (NOLOCK) on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel
	FROM
		TripLedger tl (NOLOCK) --* (-H-)
		inner join TravelerInvoices i (NOLOCK) on i.TripLedgerId = tl.TripLedgerId --* (D2)
		inner join Traveler tt (NOLOCK) on tt.travelerId = i.TravelerId --* (D1)
		inner join Product p (NOLOCK) on p.ProductId = tl.ProductId --* (H2)
		inner join Trip t (NOLOCK) on t.TripId = p.TripId --* (H1)
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		tt.TravelerId,
		t.salescoaallocationid,
		p.coaallocationid,
		i.CurrencyId,
		i.DueDate

|||vw_Rpt_FinanceViewVendorCost
^^^CREATE VIEW [gradtours].[vw_Rpt_FinanceViewVendorCost]
AS
	SELECT 
		tl.TripLedgerId,
		tl.QuoteAgentId as TripLedgerQuoteAgentId,
		tl.PostingDate,
		p.BookedDate as BookedDate,
		case when p.ProductTypeId = 3 then p.BookedDate else t.TripStartDate end as EarnedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled as ProductCancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId as TripQuoteAgentId,
		t.MainContactClientId as ClientId,
		t.BookedDate as TripBookedDate,
		t.TripStartDate,
		t.DateCancelled as TripCancelledDate,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name as ProductItemName,
		i.ServiceId,
		
		v.VendorId,
		v.ParentId as ParentVendorId,
		v.VendorName as VendorName,
		v.VendorTypeId,
		t.salescoaallocationid as TripCoaAllocationId,
		i.coaallocationid as ProductItemCoaAllocationId,
		v.coaallocationid as VendorCoaAllocationId,
		vpos.CurrencyId,
		SUM(vpos.Amount) as Amount,
		SUM(vpos.AmountUSD) as AmountUSD,
		CASE 
			WHEN 
				t.TourAgentId > 0
			THEN
				'AGENT'
			ELSE
				CASE 
					WHEN
						(select COUNT(*) from Trip (NOLOCK)
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) = 0
					THEN 
						'DIRECT'
		
					WHEN
						(select COUNT(*) from Trip (NOLOCK)
						inner join Client on trip.MainContactClientId = client.ClientId
						where Client.ClientId = t.MainContactClientId and Trip.BookedDate < t.BookedDate) > 0
					THEN 'REPEAT'
				END
		END as Channel
	FROM
		TripLedger tl (NOLOCK)
		inner join VendorPurchaseOrders vpo (NOLOCK) on vpo.TripLedgerId = tl.TripLedgerId
		inner join VendorPurchaseOrderServices vpos (NOLOCK) on vpos.VendorPurchaseOrderId = vpo.VendorPurchaseOrderId
		inner join ProductItem i (NOLOCK) on i.ProductItemId = vpos.ProductItemId
		inner join Product p (NOLOCK) on p.ProductId = i.ProductId
		inner join Trip t (NOLOCK) on t.TripId = p.TripId
		inner join Vendors v (NOLOCK) on v.VendorId = vpo.VendorId
		
	GROUP BY 
		tl.TripLedgerId,
		tl.QuoteAgentId,
		tl.PostingDate,
		p.BookedDate,
		p.ProductId,
		p.ProductTypeId,
		p.Cancelled,
		t.CompanyId,
		t.CompanyBrandId,
		t.TripId,
		t.TripReference,
		t.QuoteAgentId,
		t.MainContactClientId,
		t.BookedDate,
		t.TripStartDate,
		t.DateCancelled,
		t.TourAgentId,
		i.ProductItemId,
		i.ProductItemType,
		i.Name,
		i.ServiceId,
		v.VendorId,
		v.ParentId,
		v.VendorName,
		v.VendorTypeId,
		t.salescoaallocationid,
		i.coaallocationid, 
		v.coaallocationid, 
		vpos.CurrencyId

|||vw_TMT_ADX_RoomCategory
^^^create view [gradtours].[vw_TMT_ADX_RoomCategory]
  as
 Select distinct t.TeHotelRoomCategoryId, t.Description, RoomName, t.Category, m.TehotelPropertyMappingId, hrc.Name as TMTRoomCateogory, t.HotelPropertyId, hrc.HotelId
 from TeHotelRoomCategory t
Inner join HotelRoomCategoryTmt2Adx h on h.AdxHotelRoomCategoryId = t.TeHotelRoomCategoryId
Inner join TeHotelPropertyMapping m on m.HotelPropertyId = t.HotelPropertyId
inner join [HotelRoomCategory] hrc  on h.HotelRoomCategoryId = hrc.HotelRoomCategoryId
Where t.Deleted = 0 and h.Deleted = 0  and hrc.TeHotelRoomTypeId is null

|||vwcoaallocationtree
^^^CREATE VIEW [gradtours].[vwcoaallocationtree]      
AS      
WITH COAAllocationTreeR(COAAllocationId, ParentCOAAllocationId, CompanyId, Level) AS (SELECT      COAAllocation.COAAllocationId, COAAllocation.ParentCOAAllocationId, COAAllocation.CompanyId, 1
  FROM         gradtours.COAAllocation  INNER JOIN COAAllocation l2 on COAAllocation.ParentCOAAllocationId = l2.COAAllocationid      
  WHERE     ( COAAllocation.Deleted = 0)      
  UNION ALL      
  SELECT     L.COAAllocationId, LT.ParentCOAAllocationId, L.CompanyId, LT.Level + 1
  FROM         gradtours.COAAllocation AS L INNER JOIN      
                        COAAllocationTreeR AS LT ON L.ParentCOAAllocationId = LT.COAAllocationId      
  INNER JOIN COAAllocation l2 on LT.ParentCOAAllocationId = l2.COAAllocationid      
 WHERE     (L.Deleted = 0))      
    SELECT     COAAllocationId,ParentCOAAllocationId, CompanyId, Level
     FROM         COAAllocationTreeR AS COAAllocationTreeR_1      
   UNION
   select coaallocationid, coaallocationid as ParentCOAAllocation, CompanyId, 0
   from coaallocation

|||vwCOACategoryTree
^^^   CREATE VIEW [gradtours].[vwCOACategoryTree] as  
 WITH COACategoryTreeR(COACategoryId, ParentCOACategoryId) AS  
  (SELECT      gradtours.COACategory.COACategoryId,   
                          gradtours.COACategory.ParentCOACategoryId  AS Expr1  
   FROM          gradtours.COACategory LEFT OUTER JOIN  
                          gradtours.COACategory AS l2 ON gradtours.COACategory.ParentCOACategoryId = l2.COACategoryId  
   WHERE      (gradtours.COACategory.Deleted = 0)  
   UNION ALL  
   SELECT     L.COACategoryId, LT.ParentCOACategoryId AS Expr1  
   FROM         gradtours.COACategory AS L INNER JOIN  
                         COACategoryTreeR AS LT ON L.ParentCOACategoryId = LT.COACategoryId INNER JOIN  
                         gradtours.COACategory AS l2 ON LT.ParentCOACategoryId = l2.COACategoryId  
   WHERE     (L.Deleted = 0))  
    SELECT     *  
     FROM         COACategoryTreeR   
      UNION   
      select COACategoryid, coacategoryid from COACategory  

|||vwEveryDaySince2013
^^^CREATE VIEW [gradtours].[vwEveryDaySince2013]
AS
WITH cteNumber AS
 (SELECT Nbr=ROW_NUMBER() OVER(ORDER BY (SELECT 1))
  FROM master.dbo.spt_values a CROSS JOIN master.dbo.spt_values b)
SELECT Nbr, cast(Nbr as datetime) dt FROM cteNumber
WHERE Nbr BETWEEN CAST(CAST('2013-01-01 00:00:00.000' AS DATETIME) AS INT) AND CAST(CAST('2100-12-31 00:00:00.000' AS DATETIME) AS INT)

|||vwEveryDaySince2021_MK
^^^CREATE VIEW [gradtours].[vwEveryDaySince2021_MK]
AS
WITH cteNumber AS
 (SELECT Nbr=ROW_NUMBER() OVER(ORDER BY (SELECT 1))
  FROM master.dbo.spt_values a CROSS JOIN master.dbo.spt_values b)
SELECT Nbr, cast(Nbr as datetime) dt FROM cteNumber
WHERE Nbr BETWEEN CAST(CAST('2021-01-01 00:00:00.000' AS DATETIME) AS INT) AND CAST(CAST('2100-12-31 00:00:00.000' AS DATETIME) AS INT)

|||vwEveryDaySinceStartDate_MK_NEW
^^^Create VIEW [gradtours].[vwEveryDaySinceStartDate_MK_NEW]
AS
WITH 
start_date AS (
  SELECT CAST(dateadd(yy,-2,getdate()) AS DATETIME) AS value
),
end_date AS (
  SELECT CAST(dateadd(yy,+100,GETDATE()) AS DATETIME) AS value
),
cteNumber AS (
  SELECT Nbr = ROW_NUMBER() OVER(ORDER BY (SELECT 1))
  FROM master.dbo.spt_values a CROSS JOIN master.dbo.spt_values b
)
SELECT Nbr, CAST(Nbr as datetime) dt 
FROM cteNumber
CROSS JOIN start_date
CROSS JOIN end_date
WHERE Nbr BETWEEN CAST(CAST(start_date.value AS DATETIME) AS INT) AND CAST(CAST(end_date.value AS DATETIME) AS INT)
--select TOP 10000 * from [gradtours].[vwEveryDaySinceStartDate_MK_NEW] order by 1 ASC

|||vwGroundRates
^^^CREATE VIEW [gradtours].[vwGroundRates]
AS
SELECT     gradtours.Rate.Flat, gradtours.Rate.PerVehicle AS MaxPerVehicleRate, gradtours.Rate.PerPerson AS MaxPerPersonRate, gradtours.Rate.RateTypeId, 
                      gradtours.GroundSeason.CurrencyId AS Rate_CurrencyId,
                          (SELECT     MAX(Flat) AS Expr1
                            FROM          gradtours.Rate2RateRange
                            WHERE      (RateId = gradtours.Rate.RateId) AND (Deleted <> 1)) AS MaximumRange,
                          (SELECT     MIN(Flat) AS Expr1
                            FROM          gradtours.Rate2RateRange AS Rate2RateRange_1
                            WHERE      (RateId = gradtours.Rate.RateId) AND (Deleted <> 1)) AS MinimumRange, GroundRates_1.Ground2VehicleId
FROM         gradtours.GroundRates AS GroundRates_1 INNER JOIN
                      gradtours.Rate ON GroundRates_1.RateId = gradtours.Rate.RateId INNER JOIN
                      gradtours.RateType ON gradtours.Rate.RateTypeId = gradtours.RateType.RateTypeId INNER JOIN
                      gradtours.GroundSeasonDates ON GroundRates_1.GroundSeasonId = gradtours.GroundSeasonDates.GroundSeasonId INNER JOIN
                      gradtours.GroundSeason ON GroundRates_1.GroundSeasonId = gradtours.GroundSeason.GroundSeasonId AND 
                      gradtours.GroundSeasonDates.GroundSeasonId = gradtours.GroundSeason.GroundSeasonId
WHERE     (GroundRates_1.Deleted IS NULL OR
                      GroundRates_1.Deleted <> 1) AND (gradtours.Rate.Deleted = 0) AND (gradtours.RateType.Deleted = 0) AND (gradtours.GroundSeasonDates.Deleted IS NULL OR
                      gradtours.GroundSeasonDates.Deleted <> 1) AND (gradtours.GroundSeason.Deleted IS NULL OR
                      gradtours.GroundSeason.Deleted <> 1) AND (GroundRates_1.GroundRatesTypesId = 1) AND (gradtours.GroundSeasonDates.SeasonStartDate <= GETDATE()) AND 
                      (gradtours.GroundSeasonDates.SeasonEndDate >= GETDATE())

|||vwKTCamps
^^^CREATE VIEW [gradtours].[vwKTCamps]  
AS  
SELECT     gradtours.ItineraryService_AllDetails_WithBookingInfo.globalServiceName, gradtours.ItineraryService_AllDetails_WithBookingInfo.vendordisplayname,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.ProviderId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.CustomServiceName, gradtours.ItineraryService_AllDetails_WithBookingInfo.GlobalServiceId,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.Day, gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceStartDate,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.BookingStatusId, gradtours.ItineraryService_AllDetails_WithBookingInfo.VendorId,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryCategoryId, gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryServiceId,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryId, gradtours.ItineraryTrip.Cancelled, gradtours.ItineraryQuote.GroupName,   
                      gradtours.ItineraryTrip.BookedDate, gradtours.ItineraryQuote.ItineraryStartDate, gradtours.ItineraryService_AllDetails_WithBookingInfo.IsCustom,   
                      gradtours.ItineraryQuote.ItineraryRef, gradtours.bookingStatus.tripServiceBookingStatusId, gradtours.ItineraryService_AllDetails_WithBookingInfo.IsActive,   
                      gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation,   
                      N'SGL') AS singles, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation,   
                      N'TWN') AS twins, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation,   
                      N'DBL') AS doubles, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation,   
                      N'TPL') AS triples, gradtours.GetNumberOfHotelRooms(gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId,   
                      gradtours.ItineraryService_AllDetails_WithBookingInfo.DefaultQuotedGroupAllocation, gradtours.ItineraryService_AllDetails_WithBookingInfo.QuotedGroupAllocation,   
                      N'ROOM') AS quads, gradtours.HotelRoomCategory.Name  
FROM         gradtours.ItineraryTrip INNER JOIN  
                      gradtours.ItineraryQuote ON gradtours.ItineraryTrip.ItineraryId = gradtours.ItineraryQuote.ItineraryId INNER JOIN  
                      gradtours.ItineraryService_AllDetails_WithBookingInfo INNER JOIN  
                      gradtours.bookingStatus ON gradtours.ItineraryService_AllDetails_WithBookingInfo.BookingStatusId = gradtours.bookingStatus.bookingStatusId ON   
                      gradtours.ItineraryQuote.ItineraryId = gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryId INNER JOIN  
                      gradtours.HotelRoomCategory ON gradtours.ItineraryService_AllDetails_WithBookingInfo.GlobalServiceId = gradtours.HotelRoomCategory.gHotelRoomId  
WHERE     (gradtours.ItineraryService_AllDetails_WithBookingInfo.Deleted <> 1) AND (gradtours.ItineraryService_AllDetails_WithBookingInfo.ServiceId = 1) AND   
                      (gradtours.ItineraryService_AllDetails_WithBookingInfo.GlobalServiceId IN  
                          (SELECT     gHotelRoomId  
                            FROM          gradtours.HotelRoomCategory AS HotelRoomCategory_1  
                            WHERE      (HotelId IN (5, 6, 7, 8205)) AND (ISNULL(Deleted, 0) = 0))) AND (gradtours.ItineraryService_AllDetails_WithBookingInfo.VendorId = 49) AND   
                      (gradtours.ItineraryTrip.Cancelled <> 1) AND (gradtours.ItineraryService_AllDetails_WithBookingInfo.IsActive <> 0) AND   
                      (gradtours.ItineraryService_AllDetails_WithBookingInfo.ItineraryCategoryId = 8) AND (gradtours.HotelRoomCategory.Deleted IS NULL OR  
                      gradtours.HotelRoomCategory.Deleted <> 1) AND (gradtours.bookingStatus.tripServiceBookingStatusId IN (1, 2, 3))  

|||vwLocaleTree
^^^CREATE VIEW [gradtours].[vwLocaleTree]    
AS    
WITH LocaleTreeR(LocaleId, LocaleTypeId, ParentLocaleId, ParentLocaleTypeId) AS (SELECT      Locale.LocaleId,  Locale.LocaleTypeId, Locale.ParentLocaleId,  l2.LocaleTypeId    
  FROM         gradtours.Locale  INNER JOIN locale l2 on locale.ParentLocaleId = l2.localeid    
  WHERE     ( Locale.Deleted = 0)    
  UNION ALL    
  SELECT     L.LocaleId, L.LocaleTypeId, LT.ParentLocaleId, l2.LocaleTypeId   
  FROM         gradtours.Locale AS L INNER JOIN    
                        LocaleTreeR AS LT ON L.ParentLocaleId = LT.LocaleId    
  INNER JOIN locale l2 on LT.ParentLocaleId = l2.localeid    
 WHERE     (L.Deleted = 0))    
    SELECT     LocaleId,LocaleTypeId, ParentLocaleId, ParentLocaleTypeId  
     FROM         LocaleTreeR AS LocaleTreeR_1    

|||vwMaxGroundRates
^^^CREATE VIEW [gradtours].[vwMaxGroundRates]
AS
SELECT     g.Name AS groundName, g2veh.Ground2VehicleId, g.Markup, veh.Capacity,
                          (SELECT     ISNULL(MAX(gr.Price), 0) AS Expr1
                            FROM          gradtours.GroundRates AS gr INNER JOIN
                                                   gradtours.GroundSeason AS s ON gr.GroundSeasonId = s.GroundSeasonId
                            WHERE      (gr.GroundId = gr.GroundId) AND (gr.VehicleId = gr.VehicleId) AND (gr.Deleted IS NULL OR
                                                   gr.Deleted <> 1) AND (gr.GroundRatesTypesId = 1) AND (s.Year = YEAR(GETDATE())) AND (gr.GroundId = g.GroundId) AND (gr.VehicleId = veh.VehicleId)) 
                      AS MaxPerVehicleRate,
                          (SELECT     ISNULL(MAX(gr.Price), 0) AS Expr1
                            FROM          gradtours.GroundRates AS gr INNER JOIN
                                                   gradtours.GroundSeason AS s ON gr.GroundSeasonId = s.GroundSeasonId
                            WHERE      (gr.GroundId = gr.GroundId) AND (gr.VehicleId = gr.VehicleId) AND (gr.Deleted IS NULL OR
                                                   gr.Deleted <> 1) AND (gr.GroundRatesTypesId = 2) AND (s.Year = YEAR(GETDATE())) AND (gr.GroundId = g.GroundId) AND (gr.VehicleId = veh.VehicleId)) 
                      AS MaxPerPersonRate, 1 AS Rate_CurrencyId
FROM         gradtours.Ground AS g INNER JOIN
                      gradtours.Location AS l ON g.LocationId = l.LocationId INNER JOIN
                      gradtours.Country AS c ON l.CountryId = c.CountryId INNER JOIN
                      gradtours.Region AS r ON c.RegionId = r.RegionId INNER JOIN
                      gradtours.Vehicle AS veh ON r.RegionId = veh.RegionId AND c.CountryId = veh.CountryId INNER JOIN
                      gradtours.Ground2Vehicle AS g2veh ON g.GroundId = g2veh.GroundId AND veh.VehicleId = g2veh.VehicleId
WHERE     (g.IsGlobal IS NULL OR
                      g.IsGlobal <> 1) AND (veh.Deleted IS NULL OR
                      veh.Deleted <> 1) AND (g2veh.Deleted IS NULL OR
                      g2veh.Deleted <> 1)

|||vwMinmaxhotelrate
^^^CREATE VIEW [gradtours].[vwMinmaxhotelrate]
as
SELECT     MIN(gradtours.Rate.Flat) AS minRate, MAX(gradtours.Rate.Flat) AS maxrate, gradtours.HotelRates.HotelRoomCategoryId, gradtours.HotelRates.HotelId, 
                      gradtours.HotelRoomCategory.gHotelRoomId, gradtours.HotelSeason.CurrencyId AS Rate_CurrencyId, gradtours.HotelSeason.VendorId, 
                      gradtours.fn_Accomodation_IsTripleRateAvailable(gradtours.HotelRoomCategory.HotelRoomCategoryId) AS IsTriple,
					  (select israteonrequest from HotelRoomCategory2Vendor where deleted=0 and HotelRoomCategoryId=gradtours.HotelRoomCategory.HotelRoomCategoryId and
					  vendorid = gradtours.HotelSeason.vendorid) as IsRateOnRequest
FROM         gradtours.HotelRates INNER JOIN
                      gradtours.Rate ON gradtours.HotelRates.RateId = gradtours.Rate.RateId INNER JOIN
                      gradtours.HotelRoomCategory ON gradtours.HotelRates.HotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId INNER JOIN
                      gradtours.HotelSeason ON gradtours.HotelRates.HotelSeasonId = gradtours.HotelSeason.HotelSeasonId INNER JOIN
                      gradtours.Hotel ON gradtours.Hotel.HotelId = gradtours.HotelRoomCategory.HotelId INNER JOIN
                      gradtours.Hotel2Vendor ON gradtours.Hotel.HotelId = gradtours.Hotel2Vendor.HotelId AND gradtours.HotelSeason.VendorId = gradtours.Hotel2Vendor.VendorId
WHERE     (gradtours.HotelRates.HotelRoomTypeId = 3) AND (gradtours.HotelRates.Deleted IS NULL OR
                      gradtours.HotelRates.Deleted = 0) AND (gradtours.Rate.Flat > 0) AND (gradtours.HotelSeason.Deleted IS NULL OR
                      gradtours.HotelSeason.Deleted = 0) AND (gradtours.HotelRoomCategory.Deleted IS NULL OR
                      gradtours.HotelRoomCategory.Deleted = 0) AND (gradtours.Hotel.Deleted IS NULL OR
                      gradtours.Hotel.Deleted = 0) AND (gradtours.Hotel2Vendor.Deleted IS NULL OR
                      gradtours.Hotel2Vendor.Deleted = 0)
GROUP BY gradtours.HotelRates.HotelRoomCategoryId, gradtours.HotelRates.HotelId, gradtours.HotelRoomCategory.gHotelRoomId, gradtours.HotelSeason.CurrencyId, 
                      gradtours.HotelSeason.VendorId, gradtours.HotelRoomCategory.HotelRoomCategoryId

|||vwMinmaxhotelrate_Hints
^^^CREATE VIEW [gradtours].[vwMinmaxhotelrate_Hints]
AS
SELECT     MIN(gradtours.Rate.Flat) AS minRate, MAX(gradtours.Rate.Flat) AS maxrate, gradtours.HotelRates.HotelRoomCategoryId, gradtours.HotelRates.HotelId, 
                      gradtours.HotelRoomCategory.gHotelRoomId, gradtours.HotelSeason.CurrencyId AS Rate_CurrencyId, gradtours.HotelSeason.VendorId, 
                      gradtours.fn_Accomodation_IsTripleRateAvailable(gradtours.HotelRoomCategory.HotelRoomCategoryId) AS IsTriple
FROM         gradtours.HotelRates WITH(INDEX(RoomCategory)) INNER JOIN
                      gradtours.Rate ON gradtours.HotelRates.RateId = gradtours.Rate.RateId INNER JOIN
                      gradtours.HotelRoomCategory WITH(INDEX(IX_HotelRoomCategory_hotelId)) ON gradtours.HotelRates.HotelRoomCategoryId = gradtours.HotelRoomCategory.HotelRoomCategoryId INNER JOIN
                      gradtours.HotelSeason ON gradtours.HotelRates.HotelSeasonId = gradtours.HotelSeason.HotelSeasonId INNER JOIN
                      gradtours.Hotel ON gradtours.Hotel.HotelId = gradtours.HotelRoomCategory.HotelId INNER JOIN
                      gradtours.Hotel2Vendor ON gradtours.Hotel.HotelId = gradtours.Hotel2Vendor.HotelId AND gradtours.HotelSeason.VendorId = gradtours.Hotel2Vendor.VendorId
WHERE     (gradtours.HotelRates.HotelRoomTypeId = 3) AND (gradtours.HotelRates.Deleted IS NULL OR
                      gradtours.HotelRates.Deleted = 0) AND (gradtours.Rate.Flat > 0) AND (gradtours.HotelSeason.Deleted IS NULL OR
                      gradtours.HotelSeason.Deleted = 0) AND (gradtours.HotelRoomCategory.Deleted IS NULL OR
                      gradtours.HotelRoomCategory.Deleted = 0) AND (gradtours.Hotel.Deleted IS NULL OR
                      gradtours.Hotel.Deleted = 0) AND (gradtours.Hotel2Vendor.Deleted IS NULL OR
                      gradtours.Hotel2Vendor.Deleted = 0)
GROUP BY gradtours.HotelRates.HotelRoomCategoryId, gradtours.HotelRates.HotelId, gradtours.HotelRoomCategory.gHotelRoomId, gradtours.HotelSeason.CurrencyId, 
                      gradtours.HotelSeason.VendorId, gradtours.HotelRoomCategory.HotelRoomCategoryId

|||vwMinMaxHotelRate_withProviders
^^^CREATE VIEW [gradtours].[vwMinMaxHotelRate_withProviders]
AS
SELECT     VendorId, gHotelRoomId, Rate_CurrencyID, MIN(Rate) AS MinRate, MAX(Rate) AS MaxRate
FROM         gradtours.GlobalCachedHotelRate
WHERE     (RateStatus = 0)
GROUP BY VendorId, gHotelRoomId, HotelRoomTypeID, Rate_CurrencyID, RateStatus
HAVING      (HotelRoomTypeID = 3)
UNION
SELECT     VendorId, gHotelRoomId, Rate_CurrencyId, minRate, maxrate
FROM         gradtours.vwMinmaxhotelrate
WHERE     (gHotelRoomId IS NOT NULL) AND (VendorId IS NOT NULL) AND (Rate_CurrencyID is NOT NULL)

|||vwPackageRates
^^^CREATE VIEW [gradtours].[vwPackageRates]
AS
SELECT     gradtours.ItineraryServiceSeason.CurrencyId, gradtours.Rate.PerPerson AS MaxPerPersonRate, gradtours.Rate.PerVehicle AS MaxPerVehicleRate, 
                      gradtours.Rate.Flat, gradtours.Rate.RateTypeId, gradtours.ItineraryServiceSeason2Rate.ItineraryService2VendorRateTypeId,
                          (SELECT     MAX(Flat) AS Expr1
                            FROM          gradtours.Rate2RateRange
                            WHERE      (RateId = gradtours.Rate.RateId) AND (Deleted <> 1)) AS MaximumRange,
                          (SELECT     MIN(Flat) AS Expr1
                            FROM          gradtours.Rate2RateRange AS Rate2RateRange_1
                            WHERE      (RateId = gradtours.Rate.RateId) AND (Deleted <> 1)) AS MinimumRange, gradtours.ItineraryServiceSeason.ItineraryServiceId, 
                      gradtours.ItineraryServiceSeason.VendorId
FROM         gradtours.Rate INNER JOIN
                      gradtours.ItineraryServiceSeason2Rate ON gradtours.Rate.RateId = gradtours.ItineraryServiceSeason2Rate.RateId INNER JOIN
                      gradtours.ItineraryServiceSeason ON 
                      gradtours.ItineraryServiceSeason2Rate.ItineraryServiceSeasonId = gradtours.ItineraryServiceSeason.ItineraryServiceSeasonId INNER JOIN
                      gradtours.RateType ON gradtours.Rate.RateTypeId = gradtours.RateType.RateTypeId
WHERE     (gradtours.ItineraryServiceSeason.Deleted = 0) AND (gradtours.ItineraryServiceSeason2Rate.Deleted = 0) AND (gradtours.Rate.Deleted = 0) AND 
                      (gradtours.RateType.Deleted = 0) AND (gradtours.ItineraryServiceSeason.StartDate <= GETDATE()) AND (gradtours.ItineraryServiceSeason.EndDate >= GETDATE())

|||vwSumSupplierPaymentDetails
^^^CREATE VIEW [gradtours].[vwSumSupplierPaymentDetails]
AS
SELECT     SUM(gradtours.SupplierPaymentDetails.Paid) AS Paid, gradtours.ItineraryDay.ItineraryId
FROM         gradtours.ItineraryService2Booking INNER JOIN
                      gradtours.SupplierPaymentDetails ON 
                      gradtours.ItineraryService2Booking.ItineraryService2BookingId = gradtours.SupplierPaymentDetails.ItineraryService2BookingId INNER JOIN
                      gradtours.ItineraryService ON gradtours.ItineraryService2Booking.ItineraryServiceId = gradtours.ItineraryService.ItineraryServiceId INNER JOIN
                      gradtours.ItineraryDay ON gradtours.ItineraryService.ItineraryDayId = gradtours.ItineraryDay.ItineraryDayId
WHERE     (gradtours.ItineraryDay.Deleted IS NULL OR
                      gradtours.ItineraryDay.Deleted <> 1) AND (gradtours.ItineraryService.Deleted <> 1)
GROUP BY gradtours.ItineraryDay.ItineraryId

|||vwTourAgentTripsSummary
^^^CREATE VIEW [gradtours].[vwTourAgentTripsSummary]  
AS  
WITH tripsandcommissions AS (SELECT     (SELECT     ISNULL(AdjustedPrice * CurrencyUsdToBase, 0) AS Expr1  
                                                                                             FROM         gradtours.ItineraryTrip_RevenueSummary2  
                                                                                             WHERE     (ItineraryId = iq.ItineraryId and clientpaymenttypeid = 1)) AS revenue,  
                                                                                                (SELECT     ISNULL(SUM(ActualConvertedCost), 0) AS Expr1  
                                                                                                  FROM          gradtours.ItineraryTrip_VendorCostSummaryByServiceTypeWithCommissionable  
																										inner join services on ItineraryTrip_VendorCostSummaryByServiceTypeWithCommissionable.serviceid = services.servicesid and includeintripmargin = 1
                                                                                                  WHERE     (ItineraryId = iq.ItineraryId) AND IsCommissionable = 0) AS CostNonCommissionable,  
  
                                                                                                (SELECT     ISNULL(SUM(fee), 0) AS Expr1  
                                                                                                  FROM          gradtours.vendorPayments AS vp  
                                                                                                  WHERE      (vendorId = 900 OR  
                                                                                                                         vendorId = 902) AND (tripId = iq.ItineraryId)) AS Fees,  
                                                                                                (SELECT     ISNULL(SUM(paid1 + paid2 + paid3), 0) AS Expr1  
                                                                                                  FROM          gradtours.vendorPayments AS vp  
                                                                                                  WHERE      (vendorId = 901) AND (tripId = iq.ItineraryId)) AS commissionPaid, iq.TourAgentId, 0 AS TourAgentCommissionPct,   
                                                                                            0 AS TourAgentCommissionSurcharge, iq.ItineraryStartDate, it.BookedDate AS bookdate, it.ItineraryId AS tripId,   
                                                                                            it.ItineraryReference AS tripRef, iq.NumberOfPeople AS groupSize  
                                                                     FROM          gradtours.ItineraryTrip AS it INNER JOIN  
                                                                                            gradtours.ItineraryQuote AS iq ON iq.ItineraryId = it.ItineraryId  
                                                                     WHERE      (it.Cancelled = 0))  
    SELECT     revenue, CostNonCommissionable, Fees, (revenue - CostNonCommissionable - Fees) * ISNULL(TourAgentCommissionPct, 0) + ISNULL(TourAgentCommissionSurcharge, 0) AS commissionPayable,   
                            revenue - CostNonCommissionable - Fees AS commissionableRevenue, ISNULL(commissionPaid, 0) AS commissionPaid, TourAgentCommissionPct,   
                            TourAgentCommissionSurcharge, TourAgentId, ItineraryStartDate, bookdate, tripId, tripRef, groupSize  
     FROM         tripsandcommissions AS tripsandcommissions_1  

|||vwTourAgentTripsSummary_backup_bad
^^^CREATE VIEW [gradtours].[vwTourAgentTripsSummary_backup_bad]
AS
WITH tripsandcommissions AS (SELECT     (SELECT     ISNULL(AdjustedRevenueUSD, 0) AS Expr1
                                                                                             FROM         gradtours.ItineraryTrip_RevenueSummary
                                                                                             WHERE     (ItineraryId = gradtours.Trips.tripId)) AS revenue,
                                                                                                (SELECT     ISNULL(SUM(CASE WHEN UseNewCost > 0 THEN NewCost ELSE Cost END), 0) AS Expr1
                                                                                                  FROM          gradtours.TripDetails
                                                                                                  WHERE      (ServiceId = 3) AND (tripId = gradtours.Trips.tripId)) AS CostAir,
                                                                                                (SELECT     ISNULL(SUM(fee), 0) AS Expr1
                                                                                                  FROM          gradtours.vendorPayments AS vp
                                                                                                  WHERE      (vendorId = 900 OR
                                                                                                                         vendorId = 902) AND (tripId = gradtours.Trips.tripId)) AS Fees,
                                                                                                (SELECT     ISNULL(SUM(paid1 + paid2 + paid3), 0) AS Expr1
                                                                                                  FROM          gradtours.vendorPayments AS vp
                                                                                                  WHERE      (vendorId = 901) AND (tripId = gradtours.Trips.tripId)) AS commissionPaid, TourAgentCommissionPct, 
                                                                                            TourAgentCommissionSurcharge, TourAgentId, ItineraryStartDate, BookDate, tripId, tripRef, groupSize
                                                                     FROM          gradtours.Trips
                                                                     WHERE      (cancelledtrip = 0))
    SELECT     revenue, CostAir, Fees, (revenue - CostAir - Fees) * ISNULL(TourAgentCommissionPct, 0) + ISNULL(TourAgentCommissionSurcharge, 0) AS commissionPayable, 
                            revenue - CostAir - Fees AS commissionableRevenue, ISNULL(commissionPaid, 0) AS commissionPaid, TourAgentCommissionPct, 
                            TourAgentCommissionSurcharge, TourAgentId, ItineraryStartDate, BookDate, tripId, tripRef, groupSize
     FROM         tripsandcommissions AS tripsandcommissions_1

|||vwTourAgentTripsSummary_new
^^^CREATE VIEW [gradtours].[vwTourAgentTripsSummary_new]
AS
WITH tripsandcommissions AS (SELECT     (SELECT     ISNULL(AdjustedRevenueUSD, 0) AS Expr1
                                                                                             FROM         gradtours.ItineraryTrip_RevenueSummary
                                                                                             WHERE     (ItineraryId = iq.ItineraryId)) AS revenue,
                                                                                                (SELECT     ISNULL(SUM(ActualCost), 0) AS Expr1
                                                                                                  FROM          gradtours.ItineraryTrip_VendorCostSummaryByServiceType
                                                                                                  WHERE      (ServiceId = 3) AND (ItineraryId = iq.ItineraryId)) AS CostAir,
                                                                                                (SELECT     ISNULL(SUM(fee), 0) AS Expr1
                                                                                                  FROM          gradtours.vendorPayments AS vp
                                                                                                  WHERE      (vendorId = 900 OR
                                                                                                                         vendorId = 902) AND (tripId = iq.ItineraryId)) AS Fees,
                                                                                                (SELECT     ISNULL(SUM(paid1 + paid2 + paid3), 0) AS Expr1
                                                                                                  FROM          gradtours.vendorPayments AS vp
                                                                                                  WHERE      (vendorId = 901) AND (tripId = iq.ItineraryId)) AS commissionPaid, iq.TourAgentId, 0 AS TourAgentCommissionPct, 
                                                                                            0 AS TourAgentCommissionSurcharge, iq.ItineraryStartDate, it.BookedDate AS bookdate, it.ItineraryId AS tripId, 
                                                                                            it.ItineraryReference AS tripRef, iq.NumberOfPeople AS groupSize
                                                                     FROM          gradtours.ItineraryTrip AS it INNER JOIN
                                                                                            gradtours.ItineraryQuote AS iq ON iq.ItineraryId = it.ItineraryId
                                                                     WHERE      (it.Cancelled = 0))
    SELECT     revenue, CostAir, Fees, (revenue - CostAir - Fees) * ISNULL(TourAgentCommissionPct, 0) + ISNULL(TourAgentCommissionSurcharge, 0) AS commissionPayable, 
                            revenue - CostAir - Fees AS commissionableRevenue, ISNULL(commissionPaid, 0) AS commissionPaid, TourAgentCommissionPct, 
                            TourAgentCommissionSurcharge, TourAgentId, ItineraryStartDate, bookdate, tripId, tripRef, groupSize
     FROM         tripsandcommissions AS tripsandcommissions_1

|||vwTramsMarketing
^^^CREATE VIEW [gradtours].[vwTramsMarketing]
AS
	SELECT 
		[Data Source Id]
      ,[Reporting Branch]
      ,[Primary Agent Name]
      ,[Client Name]
      ,[Creation Date]
      ,[Profile Creation Year]
      ,[Phone Mktg Permission]
      ,[Email Mktg Permission]
      ,[Address Mktg Permission]
      ,[E-mail]
      ,[Address line 1]
      ,[Apt/Suit]
      ,[City]
      ,[State]
      ,[Country]
      ,[Phone]
      ,[Travel Categories]
      ,[Trip Vendors]
      ,[Interests]
	 from SQL02_TRAVELEDGE.Trams_Global.dbo.TE_MarketingExtract

|||vwTransportRates
^^^CREATE VIEW [gradtours].[vwTransportRates]
AS
SELECT     gradtours.Rate.Flat, gradtours.Rate.PerVehicle, gradtours.Rate.PerPerson, gradtours.Rate.RateTypeId, gradtours.AirRates.transportCategoryId, 
                      gradtours.AirSeason.CurrencyId,
                          (SELECT     MAX(Flat) AS Expr1
                            FROM          gradtours.Rate2RateRange
                            WHERE      (RateId = gradtours.Rate.RateId) AND (Deleted <> 1)) AS MaximumRange,
                          (SELECT     MIN(Flat) AS Expr1
                            FROM          gradtours.Rate2RateRange AS Rate2RateRange_1
                            WHERE      (RateId = gradtours.Rate.RateId) AND (Deleted <> 1)) AS MinimumRange, gradtours.AirSeasonDates.SeasonEndDate, 
                      gradtours.AirSeasonDates.SeasonStartDate
FROM         gradtours.AirRates INNER JOIN
                      gradtours.Rate ON gradtours.AirRates.RateId = gradtours.Rate.RateId INNER JOIN
                      gradtours.RateType ON gradtours.Rate.RateTypeId = gradtours.RateType.RateTypeId INNER JOIN
                      gradtours.AirSeason ON gradtours.AirRates.AirSeasonId = gradtours.AirSeason.AirSeasonId INNER JOIN
                      gradtours.AirSeasonDates ON gradtours.AirSeason.AirSeasonId = gradtours.AirSeasonDates.AirSeasonId AND 
                      gradtours.AirRates.AirSeasonId = gradtours.AirSeasonDates.AirSeasonId
WHERE     (gradtours.AirRates.Deleted IS NULL) AND (gradtours.AirSeasonDates.Deleted IS NULL) AND (gradtours.AirSeason.Deleted IS NULL) AND (gradtours.Rate.Deleted = 0) 
                      AND (gradtours.RateType.Deleted = 0) AND (gradtours.AirSeasonDates.SeasonStartDate <= GETDATE()) AND 
                      (gradtours.AirSeasonDates.SeasonEndDate >= GETDATE()) OR
                      (gradtours.AirRates.Deleted = 0) AND (gradtours.AirSeasonDates.Deleted = 0) AND (gradtours.AirSeason.Deleted = 0)

